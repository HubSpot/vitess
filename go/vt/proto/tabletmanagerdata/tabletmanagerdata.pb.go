// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabletmanagerdata.proto

package tabletmanagerdata

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	logutil "vitess.io/vitess/go/vt/proto/logutil"
	query "vitess.io/vitess/go/vt/proto/query"
	replicationdata "vitess.io/vitess/go/vt/proto/replicationdata"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TableDefinition struct {
	// the table name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the SQL to run to create the table
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// the columns in the order that will be used to dump and load the data
	Columns []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	// the primary key columns in the primary key order
	PrimaryKeyColumns []string `protobuf:"bytes,4,rep,name=primary_key_columns,json=primaryKeyColumns,proto3" json:"primary_key_columns,omitempty"`
	// type is either mysqlctl.TableBaseTable or mysqlctl.TableView
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// how much space the data file takes.
	DataLength uint64 `protobuf:"varint,6,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	// approximate number of rows
	RowCount uint64 `protobuf:"varint,7,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
}

func (m *TableDefinition) Reset()      { *m = TableDefinition{} }
func (*TableDefinition) ProtoMessage() {}
func (*TableDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{0}
}
func (m *TableDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableDefinition.Merge(m, src)
}
func (m *TableDefinition) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TableDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_TableDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_TableDefinition proto.InternalMessageInfo

func (m *TableDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableDefinition) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *TableDefinition) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TableDefinition) GetPrimaryKeyColumns() []string {
	if m != nil {
		return m.PrimaryKeyColumns
	}
	return nil
}

func (m *TableDefinition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TableDefinition) GetDataLength() uint64 {
	if m != nil {
		return m.DataLength
	}
	return 0
}

func (m *TableDefinition) GetRowCount() uint64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

type SchemaDefinition struct {
	DatabaseSchema   string             `protobuf:"bytes,1,opt,name=database_schema,json=databaseSchema,proto3" json:"database_schema,omitempty"`
	TableDefinitions []*TableDefinition `protobuf:"bytes,2,rep,name=table_definitions,json=tableDefinitions,proto3" json:"table_definitions,omitempty"`
	Version          string             `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *SchemaDefinition) Reset()      { *m = SchemaDefinition{} }
func (*SchemaDefinition) ProtoMessage() {}
func (*SchemaDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{1}
}
func (m *SchemaDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaDefinition.Merge(m, src)
}
func (m *SchemaDefinition) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SchemaDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaDefinition proto.InternalMessageInfo

func (m *SchemaDefinition) GetDatabaseSchema() string {
	if m != nil {
		return m.DatabaseSchema
	}
	return ""
}

func (m *SchemaDefinition) GetTableDefinitions() []*TableDefinition {
	if m != nil {
		return m.TableDefinitions
	}
	return nil
}

func (m *SchemaDefinition) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type SchemaChangeResult struct {
	// before_schema holds the schema before each change.
	BeforeSchema *SchemaDefinition `protobuf:"bytes,1,opt,name=before_schema,json=beforeSchema,proto3" json:"before_schema,omitempty"`
	// after_schema holds the schema after each change.
	AfterSchema *SchemaDefinition `protobuf:"bytes,2,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
}

func (m *SchemaChangeResult) Reset()      { *m = SchemaChangeResult{} }
func (*SchemaChangeResult) ProtoMessage() {}
func (*SchemaChangeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{2}
}
func (m *SchemaChangeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaChangeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaChangeResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaChangeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaChangeResult.Merge(m, src)
}
func (m *SchemaChangeResult) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SchemaChangeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaChangeResult.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaChangeResult proto.InternalMessageInfo

func (m *SchemaChangeResult) GetBeforeSchema() *SchemaDefinition {
	if m != nil {
		return m.BeforeSchema
	}
	return nil
}

func (m *SchemaChangeResult) GetAfterSchema() *SchemaDefinition {
	if m != nil {
		return m.AfterSchema
	}
	return nil
}

// UserPermission describes a single row in the mysql.user table
// Primary key is Host+User
// PasswordChecksum is the crc64 of the password, for security reasons
type UserPermission struct {
	Host             string            `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	User             string            `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	PasswordChecksum uint64            `protobuf:"varint,3,opt,name=password_checksum,json=passwordChecksum,proto3" json:"password_checksum,omitempty"`
	Privileges       map[string]string `protobuf:"bytes,4,rep,name=privileges,proto3" json:"privileges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UserPermission) Reset()      { *m = UserPermission{} }
func (*UserPermission) ProtoMessage() {}
func (*UserPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{3}
}
func (m *UserPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPermission.Merge(m, src)
}
func (m *UserPermission) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UserPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPermission.DiscardUnknown(m)
}

var xxx_messageInfo_UserPermission proto.InternalMessageInfo

func (m *UserPermission) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *UserPermission) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserPermission) GetPasswordChecksum() uint64 {
	if m != nil {
		return m.PasswordChecksum
	}
	return 0
}

func (m *UserPermission) GetPrivileges() map[string]string {
	if m != nil {
		return m.Privileges
	}
	return nil
}

// DbPermission describes a single row in the mysql.db table
// Primary key is Host+Db+User
type DbPermission struct {
	Host       string            `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Db         string            `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	User       string            `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Privileges map[string]string `protobuf:"bytes,4,rep,name=privileges,proto3" json:"privileges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DbPermission) Reset()      { *m = DbPermission{} }
func (*DbPermission) ProtoMessage() {}
func (*DbPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{4}
}
func (m *DbPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DbPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DbPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DbPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbPermission.Merge(m, src)
}
func (m *DbPermission) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DbPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_DbPermission.DiscardUnknown(m)
}

var xxx_messageInfo_DbPermission proto.InternalMessageInfo

func (m *DbPermission) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DbPermission) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *DbPermission) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DbPermission) GetPrivileges() map[string]string {
	if m != nil {
		return m.Privileges
	}
	return nil
}

// Permissions have all the rows in mysql.{user,db} tables,
// (all rows are sorted by primary key)
type Permissions struct {
	UserPermissions []*UserPermission `protobuf:"bytes,1,rep,name=user_permissions,json=userPermissions,proto3" json:"user_permissions,omitempty"`
	DbPermissions   []*DbPermission   `protobuf:"bytes,2,rep,name=db_permissions,json=dbPermissions,proto3" json:"db_permissions,omitempty"`
}

func (m *Permissions) Reset()      { *m = Permissions{} }
func (*Permissions) ProtoMessage() {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{5}
}
func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetUserPermissions() []*UserPermission {
	if m != nil {
		return m.UserPermissions
	}
	return nil
}

func (m *Permissions) GetDbPermissions() []*DbPermission {
	if m != nil {
		return m.DbPermissions
	}
	return nil
}

type PingRequest struct {
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PingRequest) Reset()      { *m = PingRequest{} }
func (*PingRequest) ProtoMessage() {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{6}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type PingResponse struct {
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PingResponse) Reset()      { *m = PingResponse{} }
func (*PingResponse) ProtoMessage() {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{7}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type SleepRequest struct {
	// duration is in nanoseconds
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *SleepRequest) Reset()      { *m = SleepRequest{} }
func (*SleepRequest) ProtoMessage() {}
func (*SleepRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{8}
}
func (m *SleepRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SleepRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SleepRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SleepRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SleepRequest.Merge(m, src)
}
func (m *SleepRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SleepRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SleepRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SleepRequest proto.InternalMessageInfo

func (m *SleepRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type SleepResponse struct {
}

func (m *SleepResponse) Reset()      { *m = SleepResponse{} }
func (*SleepResponse) ProtoMessage() {}
func (*SleepResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{9}
}
func (m *SleepResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SleepResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SleepResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SleepResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SleepResponse.Merge(m, src)
}
func (m *SleepResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SleepResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SleepResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SleepResponse proto.InternalMessageInfo

type ExecuteHookRequest struct {
	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters []string          `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ExtraEnv   map[string]string `protobuf:"bytes,3,rep,name=extra_env,json=extraEnv,proto3" json:"extra_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ExecuteHookRequest) Reset()      { *m = ExecuteHookRequest{} }
func (*ExecuteHookRequest) ProtoMessage() {}
func (*ExecuteHookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{10}
}
func (m *ExecuteHookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteHookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteHookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteHookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteHookRequest.Merge(m, src)
}
func (m *ExecuteHookRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteHookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteHookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteHookRequest proto.InternalMessageInfo

func (m *ExecuteHookRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecuteHookRequest) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ExecuteHookRequest) GetExtraEnv() map[string]string {
	if m != nil {
		return m.ExtraEnv
	}
	return nil
}

type ExecuteHookResponse struct {
	ExitStatus int64  `protobuf:"varint,1,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	Stdout     string `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     string `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *ExecuteHookResponse) Reset()      { *m = ExecuteHookResponse{} }
func (*ExecuteHookResponse) ProtoMessage() {}
func (*ExecuteHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{11}
}
func (m *ExecuteHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteHookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteHookResponse.Merge(m, src)
}
func (m *ExecuteHookResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteHookResponse proto.InternalMessageInfo

func (m *ExecuteHookResponse) GetExitStatus() int64 {
	if m != nil {
		return m.ExitStatus
	}
	return 0
}

func (m *ExecuteHookResponse) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *ExecuteHookResponse) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

type GetSchemaRequest struct {
	Tables        []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	IncludeViews  bool     `protobuf:"varint,2,opt,name=include_views,json=includeViews,proto3" json:"include_views,omitempty"`
	ExcludeTables []string `protobuf:"bytes,3,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
}

func (m *GetSchemaRequest) Reset()      { *m = GetSchemaRequest{} }
func (*GetSchemaRequest) ProtoMessage() {}
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{12}
}
func (m *GetSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaRequest.Merge(m, src)
}
func (m *GetSchemaRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaRequest proto.InternalMessageInfo

func (m *GetSchemaRequest) GetTables() []string {
	if m != nil {
		return m.Tables
	}
	return nil
}

func (m *GetSchemaRequest) GetIncludeViews() bool {
	if m != nil {
		return m.IncludeViews
	}
	return false
}

func (m *GetSchemaRequest) GetExcludeTables() []string {
	if m != nil {
		return m.ExcludeTables
	}
	return nil
}

type GetSchemaResponse struct {
	SchemaDefinition *SchemaDefinition `protobuf:"bytes,1,opt,name=schema_definition,json=schemaDefinition,proto3" json:"schema_definition,omitempty"`
}

func (m *GetSchemaResponse) Reset()      { *m = GetSchemaResponse{} }
func (*GetSchemaResponse) ProtoMessage() {}
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{13}
}
func (m *GetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaResponse.Merge(m, src)
}
func (m *GetSchemaResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaResponse proto.InternalMessageInfo

func (m *GetSchemaResponse) GetSchemaDefinition() *SchemaDefinition {
	if m != nil {
		return m.SchemaDefinition
	}
	return nil
}

type GetPermissionsRequest struct {
}

func (m *GetPermissionsRequest) Reset()      { *m = GetPermissionsRequest{} }
func (*GetPermissionsRequest) ProtoMessage() {}
func (*GetPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{14}
}
func (m *GetPermissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsRequest.Merge(m, src)
}
func (m *GetPermissionsRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetPermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsRequest proto.InternalMessageInfo

type GetPermissionsResponse struct {
	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *GetPermissionsResponse) Reset()      { *m = GetPermissionsResponse{} }
func (*GetPermissionsResponse) ProtoMessage() {}
func (*GetPermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{15}
}
func (m *GetPermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsResponse.Merge(m, src)
}
func (m *GetPermissionsResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetPermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsResponse proto.InternalMessageInfo

func (m *GetPermissionsResponse) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type SetReadOnlyRequest struct {
}

func (m *SetReadOnlyRequest) Reset()      { *m = SetReadOnlyRequest{} }
func (*SetReadOnlyRequest) ProtoMessage() {}
func (*SetReadOnlyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{16}
}
func (m *SetReadOnlyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetReadOnlyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetReadOnlyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetReadOnlyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReadOnlyRequest.Merge(m, src)
}
func (m *SetReadOnlyRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SetReadOnlyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReadOnlyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetReadOnlyRequest proto.InternalMessageInfo

type SetReadOnlyResponse struct {
}

func (m *SetReadOnlyResponse) Reset()      { *m = SetReadOnlyResponse{} }
func (*SetReadOnlyResponse) ProtoMessage() {}
func (*SetReadOnlyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{17}
}
func (m *SetReadOnlyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetReadOnlyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetReadOnlyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetReadOnlyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReadOnlyResponse.Merge(m, src)
}
func (m *SetReadOnlyResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SetReadOnlyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReadOnlyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetReadOnlyResponse proto.InternalMessageInfo

type SetReadWriteRequest struct {
}

func (m *SetReadWriteRequest) Reset()      { *m = SetReadWriteRequest{} }
func (*SetReadWriteRequest) ProtoMessage() {}
func (*SetReadWriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{18}
}
func (m *SetReadWriteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetReadWriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetReadWriteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetReadWriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReadWriteRequest.Merge(m, src)
}
func (m *SetReadWriteRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SetReadWriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReadWriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetReadWriteRequest proto.InternalMessageInfo

type SetReadWriteResponse struct {
}

func (m *SetReadWriteResponse) Reset()      { *m = SetReadWriteResponse{} }
func (*SetReadWriteResponse) ProtoMessage() {}
func (*SetReadWriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{19}
}
func (m *SetReadWriteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetReadWriteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetReadWriteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetReadWriteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReadWriteResponse.Merge(m, src)
}
func (m *SetReadWriteResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SetReadWriteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReadWriteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetReadWriteResponse proto.InternalMessageInfo

type ChangeTypeRequest struct {
	TabletType topodata.TabletType `protobuf:"varint,1,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
}

func (m *ChangeTypeRequest) Reset()      { *m = ChangeTypeRequest{} }
func (*ChangeTypeRequest) ProtoMessage() {}
func (*ChangeTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{20}
}
func (m *ChangeTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeTypeRequest.Merge(m, src)
}
func (m *ChangeTypeRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ChangeTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeTypeRequest proto.InternalMessageInfo

func (m *ChangeTypeRequest) GetTabletType() topodata.TabletType {
	if m != nil {
		return m.TabletType
	}
	return topodata.TabletType_UNKNOWN
}

type ChangeTypeResponse struct {
}

func (m *ChangeTypeResponse) Reset()      { *m = ChangeTypeResponse{} }
func (*ChangeTypeResponse) ProtoMessage() {}
func (*ChangeTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{21}
}
func (m *ChangeTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeTypeResponse.Merge(m, src)
}
func (m *ChangeTypeResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ChangeTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeTypeResponse proto.InternalMessageInfo

type RefreshStateRequest struct {
}

func (m *RefreshStateRequest) Reset()      { *m = RefreshStateRequest{} }
func (*RefreshStateRequest) ProtoMessage() {}
func (*RefreshStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{22}
}
func (m *RefreshStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshStateRequest.Merge(m, src)
}
func (m *RefreshStateRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RefreshStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshStateRequest proto.InternalMessageInfo

type RefreshStateResponse struct {
}

func (m *RefreshStateResponse) Reset()      { *m = RefreshStateResponse{} }
func (*RefreshStateResponse) ProtoMessage() {}
func (*RefreshStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{23}
}
func (m *RefreshStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshStateResponse.Merge(m, src)
}
func (m *RefreshStateResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RefreshStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshStateResponse proto.InternalMessageInfo

type RunHealthCheckRequest struct {
}

func (m *RunHealthCheckRequest) Reset()      { *m = RunHealthCheckRequest{} }
func (*RunHealthCheckRequest) ProtoMessage() {}
func (*RunHealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{24}
}
func (m *RunHealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunHealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunHealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunHealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunHealthCheckRequest.Merge(m, src)
}
func (m *RunHealthCheckRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RunHealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunHealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunHealthCheckRequest proto.InternalMessageInfo

type RunHealthCheckResponse struct {
}

func (m *RunHealthCheckResponse) Reset()      { *m = RunHealthCheckResponse{} }
func (*RunHealthCheckResponse) ProtoMessage() {}
func (*RunHealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{25}
}
func (m *RunHealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunHealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunHealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunHealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunHealthCheckResponse.Merge(m, src)
}
func (m *RunHealthCheckResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RunHealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunHealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunHealthCheckResponse proto.InternalMessageInfo

type IgnoreHealthErrorRequest struct {
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (m *IgnoreHealthErrorRequest) Reset()      { *m = IgnoreHealthErrorRequest{} }
func (*IgnoreHealthErrorRequest) ProtoMessage() {}
func (*IgnoreHealthErrorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{26}
}
func (m *IgnoreHealthErrorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IgnoreHealthErrorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IgnoreHealthErrorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IgnoreHealthErrorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IgnoreHealthErrorRequest.Merge(m, src)
}
func (m *IgnoreHealthErrorRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *IgnoreHealthErrorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IgnoreHealthErrorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IgnoreHealthErrorRequest proto.InternalMessageInfo

func (m *IgnoreHealthErrorRequest) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type IgnoreHealthErrorResponse struct {
}

func (m *IgnoreHealthErrorResponse) Reset()      { *m = IgnoreHealthErrorResponse{} }
func (*IgnoreHealthErrorResponse) ProtoMessage() {}
func (*IgnoreHealthErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{27}
}
func (m *IgnoreHealthErrorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IgnoreHealthErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IgnoreHealthErrorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IgnoreHealthErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IgnoreHealthErrorResponse.Merge(m, src)
}
func (m *IgnoreHealthErrorResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *IgnoreHealthErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IgnoreHealthErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IgnoreHealthErrorResponse proto.InternalMessageInfo

type ReloadSchemaRequest struct {
	// wait_position allows scheduling a schema reload to occur after a
	// given DDL has replicated to this slave, by specifying a replication
	// position to wait for. Leave empty to trigger the reload immediately.
	WaitPosition string `protobuf:"bytes,1,opt,name=wait_position,json=waitPosition,proto3" json:"wait_position,omitempty"`
}

func (m *ReloadSchemaRequest) Reset()      { *m = ReloadSchemaRequest{} }
func (*ReloadSchemaRequest) ProtoMessage() {}
func (*ReloadSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{28}
}
func (m *ReloadSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReloadSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReloadSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReloadSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadSchemaRequest.Merge(m, src)
}
func (m *ReloadSchemaRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReloadSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadSchemaRequest proto.InternalMessageInfo

func (m *ReloadSchemaRequest) GetWaitPosition() string {
	if m != nil {
		return m.WaitPosition
	}
	return ""
}

type ReloadSchemaResponse struct {
}

func (m *ReloadSchemaResponse) Reset()      { *m = ReloadSchemaResponse{} }
func (*ReloadSchemaResponse) ProtoMessage() {}
func (*ReloadSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{29}
}
func (m *ReloadSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReloadSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReloadSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReloadSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadSchemaResponse.Merge(m, src)
}
func (m *ReloadSchemaResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReloadSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadSchemaResponse proto.InternalMessageInfo

type PreflightSchemaRequest struct {
	Changes []string `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (m *PreflightSchemaRequest) Reset()      { *m = PreflightSchemaRequest{} }
func (*PreflightSchemaRequest) ProtoMessage() {}
func (*PreflightSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{30}
}
func (m *PreflightSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreflightSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreflightSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreflightSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreflightSchemaRequest.Merge(m, src)
}
func (m *PreflightSchemaRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PreflightSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreflightSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreflightSchemaRequest proto.InternalMessageInfo

func (m *PreflightSchemaRequest) GetChanges() []string {
	if m != nil {
		return m.Changes
	}
	return nil
}

type PreflightSchemaResponse struct {
	// change_results has for each change the schema before and after it.
	// The number of elements is identical to the length of "changes" in the request.
	ChangeResults []*SchemaChangeResult `protobuf:"bytes,1,rep,name=change_results,json=changeResults,proto3" json:"change_results,omitempty"`
}

func (m *PreflightSchemaResponse) Reset()      { *m = PreflightSchemaResponse{} }
func (*PreflightSchemaResponse) ProtoMessage() {}
func (*PreflightSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{31}
}
func (m *PreflightSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreflightSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreflightSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreflightSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreflightSchemaResponse.Merge(m, src)
}
func (m *PreflightSchemaResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PreflightSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PreflightSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PreflightSchemaResponse proto.InternalMessageInfo

func (m *PreflightSchemaResponse) GetChangeResults() []*SchemaChangeResult {
	if m != nil {
		return m.ChangeResults
	}
	return nil
}

type ApplySchemaRequest struct {
	Sql              string            `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Force            bool              `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	AllowReplication bool              `protobuf:"varint,3,opt,name=allow_replication,json=allowReplication,proto3" json:"allow_replication,omitempty"`
	BeforeSchema     *SchemaDefinition `protobuf:"bytes,4,opt,name=before_schema,json=beforeSchema,proto3" json:"before_schema,omitempty"`
	AfterSchema      *SchemaDefinition `protobuf:"bytes,5,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
}

func (m *ApplySchemaRequest) Reset()      { *m = ApplySchemaRequest{} }
func (*ApplySchemaRequest) ProtoMessage() {}
func (*ApplySchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{32}
}
func (m *ApplySchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplySchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplySchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplySchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplySchemaRequest.Merge(m, src)
}
func (m *ApplySchemaRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ApplySchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplySchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplySchemaRequest proto.InternalMessageInfo

func (m *ApplySchemaRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *ApplySchemaRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ApplySchemaRequest) GetAllowReplication() bool {
	if m != nil {
		return m.AllowReplication
	}
	return false
}

func (m *ApplySchemaRequest) GetBeforeSchema() *SchemaDefinition {
	if m != nil {
		return m.BeforeSchema
	}
	return nil
}

func (m *ApplySchemaRequest) GetAfterSchema() *SchemaDefinition {
	if m != nil {
		return m.AfterSchema
	}
	return nil
}

type ApplySchemaResponse struct {
	BeforeSchema *SchemaDefinition `protobuf:"bytes,1,opt,name=before_schema,json=beforeSchema,proto3" json:"before_schema,omitempty"`
	AfterSchema  *SchemaDefinition `protobuf:"bytes,2,opt,name=after_schema,json=afterSchema,proto3" json:"after_schema,omitempty"`
}

func (m *ApplySchemaResponse) Reset()      { *m = ApplySchemaResponse{} }
func (*ApplySchemaResponse) ProtoMessage() {}
func (*ApplySchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{33}
}
func (m *ApplySchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplySchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplySchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplySchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplySchemaResponse.Merge(m, src)
}
func (m *ApplySchemaResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ApplySchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplySchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplySchemaResponse proto.InternalMessageInfo

func (m *ApplySchemaResponse) GetBeforeSchema() *SchemaDefinition {
	if m != nil {
		return m.BeforeSchema
	}
	return nil
}

func (m *ApplySchemaResponse) GetAfterSchema() *SchemaDefinition {
	if m != nil {
		return m.AfterSchema
	}
	return nil
}

type LockTablesRequest struct {
}

func (m *LockTablesRequest) Reset()      { *m = LockTablesRequest{} }
func (*LockTablesRequest) ProtoMessage() {}
func (*LockTablesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{34}
}
func (m *LockTablesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockTablesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockTablesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockTablesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockTablesRequest.Merge(m, src)
}
func (m *LockTablesRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LockTablesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockTablesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockTablesRequest proto.InternalMessageInfo

type LockTablesResponse struct {
}

func (m *LockTablesResponse) Reset()      { *m = LockTablesResponse{} }
func (*LockTablesResponse) ProtoMessage() {}
func (*LockTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{35}
}
func (m *LockTablesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockTablesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockTablesResponse.Merge(m, src)
}
func (m *LockTablesResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LockTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockTablesResponse proto.InternalMessageInfo

type UnlockTablesRequest struct {
}

func (m *UnlockTablesRequest) Reset()      { *m = UnlockTablesRequest{} }
func (*UnlockTablesRequest) ProtoMessage() {}
func (*UnlockTablesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{36}
}
func (m *UnlockTablesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockTablesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockTablesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockTablesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockTablesRequest.Merge(m, src)
}
func (m *UnlockTablesRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UnlockTablesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockTablesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockTablesRequest proto.InternalMessageInfo

type UnlockTablesResponse struct {
}

func (m *UnlockTablesResponse) Reset()      { *m = UnlockTablesResponse{} }
func (*UnlockTablesResponse) ProtoMessage() {}
func (*UnlockTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{37}
}
func (m *UnlockTablesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockTablesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockTablesResponse.Merge(m, src)
}
func (m *UnlockTablesResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UnlockTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockTablesResponse proto.InternalMessageInfo

type ExecuteFetchAsDbaRequest struct {
	Query          []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DbName         string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	MaxRows        uint64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	DisableBinlogs bool   `protobuf:"varint,4,opt,name=disable_binlogs,json=disableBinlogs,proto3" json:"disable_binlogs,omitempty"`
	ReloadSchema   bool   `protobuf:"varint,5,opt,name=reload_schema,json=reloadSchema,proto3" json:"reload_schema,omitempty"`
}

func (m *ExecuteFetchAsDbaRequest) Reset()      { *m = ExecuteFetchAsDbaRequest{} }
func (*ExecuteFetchAsDbaRequest) ProtoMessage() {}
func (*ExecuteFetchAsDbaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{38}
}
func (m *ExecuteFetchAsDbaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteFetchAsDbaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteFetchAsDbaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteFetchAsDbaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteFetchAsDbaRequest.Merge(m, src)
}
func (m *ExecuteFetchAsDbaRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteFetchAsDbaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteFetchAsDbaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteFetchAsDbaRequest proto.InternalMessageInfo

func (m *ExecuteFetchAsDbaRequest) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteFetchAsDbaRequest) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *ExecuteFetchAsDbaRequest) GetMaxRows() uint64 {
	if m != nil {
		return m.MaxRows
	}
	return 0
}

func (m *ExecuteFetchAsDbaRequest) GetDisableBinlogs() bool {
	if m != nil {
		return m.DisableBinlogs
	}
	return false
}

func (m *ExecuteFetchAsDbaRequest) GetReloadSchema() bool {
	if m != nil {
		return m.ReloadSchema
	}
	return false
}

type ExecuteFetchAsDbaResponse struct {
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ExecuteFetchAsDbaResponse) Reset()      { *m = ExecuteFetchAsDbaResponse{} }
func (*ExecuteFetchAsDbaResponse) ProtoMessage() {}
func (*ExecuteFetchAsDbaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{39}
}
func (m *ExecuteFetchAsDbaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteFetchAsDbaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteFetchAsDbaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteFetchAsDbaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteFetchAsDbaResponse.Merge(m, src)
}
func (m *ExecuteFetchAsDbaResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteFetchAsDbaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteFetchAsDbaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteFetchAsDbaResponse proto.InternalMessageInfo

func (m *ExecuteFetchAsDbaResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ExecuteFetchAsAllPrivsRequest struct {
	Query        []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DbName       string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	MaxRows      uint64 `protobuf:"varint,3,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	ReloadSchema bool   `protobuf:"varint,4,opt,name=reload_schema,json=reloadSchema,proto3" json:"reload_schema,omitempty"`
}

func (m *ExecuteFetchAsAllPrivsRequest) Reset()      { *m = ExecuteFetchAsAllPrivsRequest{} }
func (*ExecuteFetchAsAllPrivsRequest) ProtoMessage() {}
func (*ExecuteFetchAsAllPrivsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{40}
}
func (m *ExecuteFetchAsAllPrivsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteFetchAsAllPrivsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteFetchAsAllPrivsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteFetchAsAllPrivsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteFetchAsAllPrivsRequest.Merge(m, src)
}
func (m *ExecuteFetchAsAllPrivsRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteFetchAsAllPrivsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteFetchAsAllPrivsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteFetchAsAllPrivsRequest proto.InternalMessageInfo

func (m *ExecuteFetchAsAllPrivsRequest) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteFetchAsAllPrivsRequest) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *ExecuteFetchAsAllPrivsRequest) GetMaxRows() uint64 {
	if m != nil {
		return m.MaxRows
	}
	return 0
}

func (m *ExecuteFetchAsAllPrivsRequest) GetReloadSchema() bool {
	if m != nil {
		return m.ReloadSchema
	}
	return false
}

type ExecuteFetchAsAllPrivsResponse struct {
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ExecuteFetchAsAllPrivsResponse) Reset()      { *m = ExecuteFetchAsAllPrivsResponse{} }
func (*ExecuteFetchAsAllPrivsResponse) ProtoMessage() {}
func (*ExecuteFetchAsAllPrivsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{41}
}
func (m *ExecuteFetchAsAllPrivsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteFetchAsAllPrivsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteFetchAsAllPrivsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteFetchAsAllPrivsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteFetchAsAllPrivsResponse.Merge(m, src)
}
func (m *ExecuteFetchAsAllPrivsResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteFetchAsAllPrivsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteFetchAsAllPrivsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteFetchAsAllPrivsResponse proto.InternalMessageInfo

func (m *ExecuteFetchAsAllPrivsResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ExecuteFetchAsAppRequest struct {
	Query   []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	MaxRows uint64 `protobuf:"varint,2,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
}

func (m *ExecuteFetchAsAppRequest) Reset()      { *m = ExecuteFetchAsAppRequest{} }
func (*ExecuteFetchAsAppRequest) ProtoMessage() {}
func (*ExecuteFetchAsAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{42}
}
func (m *ExecuteFetchAsAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteFetchAsAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteFetchAsAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteFetchAsAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteFetchAsAppRequest.Merge(m, src)
}
func (m *ExecuteFetchAsAppRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteFetchAsAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteFetchAsAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteFetchAsAppRequest proto.InternalMessageInfo

func (m *ExecuteFetchAsAppRequest) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteFetchAsAppRequest) GetMaxRows() uint64 {
	if m != nil {
		return m.MaxRows
	}
	return 0
}

type ExecuteFetchAsAppResponse struct {
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ExecuteFetchAsAppResponse) Reset()      { *m = ExecuteFetchAsAppResponse{} }
func (*ExecuteFetchAsAppResponse) ProtoMessage() {}
func (*ExecuteFetchAsAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{43}
}
func (m *ExecuteFetchAsAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteFetchAsAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteFetchAsAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteFetchAsAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteFetchAsAppResponse.Merge(m, src)
}
func (m *ExecuteFetchAsAppResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ExecuteFetchAsAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteFetchAsAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteFetchAsAppResponse proto.InternalMessageInfo

func (m *ExecuteFetchAsAppResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type SlaveStatusRequest struct {
}

func (m *SlaveStatusRequest) Reset()      { *m = SlaveStatusRequest{} }
func (*SlaveStatusRequest) ProtoMessage() {}
func (*SlaveStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{44}
}
func (m *SlaveStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveStatusRequest.Merge(m, src)
}
func (m *SlaveStatusRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SlaveStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveStatusRequest proto.InternalMessageInfo

type SlaveStatusResponse struct {
	Status *replicationdata.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *SlaveStatusResponse) Reset()      { *m = SlaveStatusResponse{} }
func (*SlaveStatusResponse) ProtoMessage() {}
func (*SlaveStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{45}
}
func (m *SlaveStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveStatusResponse.Merge(m, src)
}
func (m *SlaveStatusResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SlaveStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveStatusResponse proto.InternalMessageInfo

func (m *SlaveStatusResponse) GetStatus() *replicationdata.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type MasterPositionRequest struct {
}

func (m *MasterPositionRequest) Reset()      { *m = MasterPositionRequest{} }
func (*MasterPositionRequest) ProtoMessage() {}
func (*MasterPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{46}
}
func (m *MasterPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MasterPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MasterPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterPositionRequest.Merge(m, src)
}
func (m *MasterPositionRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MasterPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MasterPositionRequest proto.InternalMessageInfo

type MasterPositionResponse struct {
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *MasterPositionResponse) Reset()      { *m = MasterPositionResponse{} }
func (*MasterPositionResponse) ProtoMessage() {}
func (*MasterPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{47}
}
func (m *MasterPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MasterPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MasterPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterPositionResponse.Merge(m, src)
}
func (m *MasterPositionResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MasterPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MasterPositionResponse proto.InternalMessageInfo

func (m *MasterPositionResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type StopSlaveRequest struct {
}

func (m *StopSlaveRequest) Reset()      { *m = StopSlaveRequest{} }
func (*StopSlaveRequest) ProtoMessage() {}
func (*StopSlaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{48}
}
func (m *StopSlaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopSlaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopSlaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopSlaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSlaveRequest.Merge(m, src)
}
func (m *StopSlaveRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopSlaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSlaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopSlaveRequest proto.InternalMessageInfo

type StopSlaveResponse struct {
}

func (m *StopSlaveResponse) Reset()      { *m = StopSlaveResponse{} }
func (*StopSlaveResponse) ProtoMessage() {}
func (*StopSlaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{49}
}
func (m *StopSlaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopSlaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopSlaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopSlaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSlaveResponse.Merge(m, src)
}
func (m *StopSlaveResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopSlaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSlaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopSlaveResponse proto.InternalMessageInfo

type StopSlaveMinimumRequest struct {
	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	WaitTimeout int64  `protobuf:"varint,2,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
}

func (m *StopSlaveMinimumRequest) Reset()      { *m = StopSlaveMinimumRequest{} }
func (*StopSlaveMinimumRequest) ProtoMessage() {}
func (*StopSlaveMinimumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{50}
}
func (m *StopSlaveMinimumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopSlaveMinimumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopSlaveMinimumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopSlaveMinimumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSlaveMinimumRequest.Merge(m, src)
}
func (m *StopSlaveMinimumRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopSlaveMinimumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSlaveMinimumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopSlaveMinimumRequest proto.InternalMessageInfo

func (m *StopSlaveMinimumRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *StopSlaveMinimumRequest) GetWaitTimeout() int64 {
	if m != nil {
		return m.WaitTimeout
	}
	return 0
}

type StopSlaveMinimumResponse struct {
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *StopSlaveMinimumResponse) Reset()      { *m = StopSlaveMinimumResponse{} }
func (*StopSlaveMinimumResponse) ProtoMessage() {}
func (*StopSlaveMinimumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{51}
}
func (m *StopSlaveMinimumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopSlaveMinimumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopSlaveMinimumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopSlaveMinimumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSlaveMinimumResponse.Merge(m, src)
}
func (m *StopSlaveMinimumResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopSlaveMinimumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSlaveMinimumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopSlaveMinimumResponse proto.InternalMessageInfo

func (m *StopSlaveMinimumResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type StartSlaveRequest struct {
}

func (m *StartSlaveRequest) Reset()      { *m = StartSlaveRequest{} }
func (*StartSlaveRequest) ProtoMessage() {}
func (*StartSlaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{52}
}
func (m *StartSlaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartSlaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartSlaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartSlaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSlaveRequest.Merge(m, src)
}
func (m *StartSlaveRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StartSlaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSlaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartSlaveRequest proto.InternalMessageInfo

type StartSlaveResponse struct {
}

func (m *StartSlaveResponse) Reset()      { *m = StartSlaveResponse{} }
func (*StartSlaveResponse) ProtoMessage() {}
func (*StartSlaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{53}
}
func (m *StartSlaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartSlaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartSlaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartSlaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSlaveResponse.Merge(m, src)
}
func (m *StartSlaveResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StartSlaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSlaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartSlaveResponse proto.InternalMessageInfo

type StartSlaveUntilAfterRequest struct {
	Position    string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	WaitTimeout int64  `protobuf:"varint,2,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
}

func (m *StartSlaveUntilAfterRequest) Reset()      { *m = StartSlaveUntilAfterRequest{} }
func (*StartSlaveUntilAfterRequest) ProtoMessage() {}
func (*StartSlaveUntilAfterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{54}
}
func (m *StartSlaveUntilAfterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartSlaveUntilAfterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartSlaveUntilAfterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartSlaveUntilAfterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSlaveUntilAfterRequest.Merge(m, src)
}
func (m *StartSlaveUntilAfterRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StartSlaveUntilAfterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSlaveUntilAfterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartSlaveUntilAfterRequest proto.InternalMessageInfo

func (m *StartSlaveUntilAfterRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *StartSlaveUntilAfterRequest) GetWaitTimeout() int64 {
	if m != nil {
		return m.WaitTimeout
	}
	return 0
}

type StartSlaveUntilAfterResponse struct {
}

func (m *StartSlaveUntilAfterResponse) Reset()      { *m = StartSlaveUntilAfterResponse{} }
func (*StartSlaveUntilAfterResponse) ProtoMessage() {}
func (*StartSlaveUntilAfterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{55}
}
func (m *StartSlaveUntilAfterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartSlaveUntilAfterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartSlaveUntilAfterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartSlaveUntilAfterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSlaveUntilAfterResponse.Merge(m, src)
}
func (m *StartSlaveUntilAfterResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StartSlaveUntilAfterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSlaveUntilAfterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartSlaveUntilAfterResponse proto.InternalMessageInfo

type TabletExternallyReparentedRequest struct {
	// external_id is an string value that may be provided by an external
	// agent for tracking purposes. The tablet will emit this string in
	// events triggered by TabletExternallyReparented, such as VitessReparent.
	ExternalId string `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (m *TabletExternallyReparentedRequest) Reset()      { *m = TabletExternallyReparentedRequest{} }
func (*TabletExternallyReparentedRequest) ProtoMessage() {}
func (*TabletExternallyReparentedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{56}
}
func (m *TabletExternallyReparentedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletExternallyReparentedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletExternallyReparentedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TabletExternallyReparentedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletExternallyReparentedRequest.Merge(m, src)
}
func (m *TabletExternallyReparentedRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TabletExternallyReparentedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletExternallyReparentedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TabletExternallyReparentedRequest proto.InternalMessageInfo

func (m *TabletExternallyReparentedRequest) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

type TabletExternallyReparentedResponse struct {
}

func (m *TabletExternallyReparentedResponse) Reset()      { *m = TabletExternallyReparentedResponse{} }
func (*TabletExternallyReparentedResponse) ProtoMessage() {}
func (*TabletExternallyReparentedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{57}
}
func (m *TabletExternallyReparentedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletExternallyReparentedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletExternallyReparentedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TabletExternallyReparentedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletExternallyReparentedResponse.Merge(m, src)
}
func (m *TabletExternallyReparentedResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TabletExternallyReparentedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletExternallyReparentedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TabletExternallyReparentedResponse proto.InternalMessageInfo

type TabletExternallyElectedRequest struct {
}

func (m *TabletExternallyElectedRequest) Reset()      { *m = TabletExternallyElectedRequest{} }
func (*TabletExternallyElectedRequest) ProtoMessage() {}
func (*TabletExternallyElectedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{58}
}
func (m *TabletExternallyElectedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletExternallyElectedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletExternallyElectedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TabletExternallyElectedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletExternallyElectedRequest.Merge(m, src)
}
func (m *TabletExternallyElectedRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TabletExternallyElectedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletExternallyElectedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TabletExternallyElectedRequest proto.InternalMessageInfo

type TabletExternallyElectedResponse struct {
}

func (m *TabletExternallyElectedResponse) Reset()      { *m = TabletExternallyElectedResponse{} }
func (*TabletExternallyElectedResponse) ProtoMessage() {}
func (*TabletExternallyElectedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{59}
}
func (m *TabletExternallyElectedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletExternallyElectedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletExternallyElectedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TabletExternallyElectedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletExternallyElectedResponse.Merge(m, src)
}
func (m *TabletExternallyElectedResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TabletExternallyElectedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletExternallyElectedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TabletExternallyElectedResponse proto.InternalMessageInfo

type GetSlavesRequest struct {
}

func (m *GetSlavesRequest) Reset()      { *m = GetSlavesRequest{} }
func (*GetSlavesRequest) ProtoMessage() {}
func (*GetSlavesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{60}
}
func (m *GetSlavesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSlavesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSlavesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSlavesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSlavesRequest.Merge(m, src)
}
func (m *GetSlavesRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetSlavesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSlavesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSlavesRequest proto.InternalMessageInfo

type GetSlavesResponse struct {
	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *GetSlavesResponse) Reset()      { *m = GetSlavesResponse{} }
func (*GetSlavesResponse) ProtoMessage() {}
func (*GetSlavesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{61}
}
func (m *GetSlavesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSlavesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSlavesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSlavesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSlavesResponse.Merge(m, src)
}
func (m *GetSlavesResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetSlavesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSlavesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSlavesResponse proto.InternalMessageInfo

func (m *GetSlavesResponse) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type ResetReplicationRequest struct {
}

func (m *ResetReplicationRequest) Reset()      { *m = ResetReplicationRequest{} }
func (*ResetReplicationRequest) ProtoMessage() {}
func (*ResetReplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{62}
}
func (m *ResetReplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetReplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetReplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetReplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetReplicationRequest.Merge(m, src)
}
func (m *ResetReplicationRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ResetReplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetReplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetReplicationRequest proto.InternalMessageInfo

type ResetReplicationResponse struct {
}

func (m *ResetReplicationResponse) Reset()      { *m = ResetReplicationResponse{} }
func (*ResetReplicationResponse) ProtoMessage() {}
func (*ResetReplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{63}
}
func (m *ResetReplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetReplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetReplicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetReplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetReplicationResponse.Merge(m, src)
}
func (m *ResetReplicationResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ResetReplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetReplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetReplicationResponse proto.InternalMessageInfo

type VReplicationExecRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *VReplicationExecRequest) Reset()      { *m = VReplicationExecRequest{} }
func (*VReplicationExecRequest) ProtoMessage() {}
func (*VReplicationExecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{64}
}
func (m *VReplicationExecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VReplicationExecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VReplicationExecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VReplicationExecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VReplicationExecRequest.Merge(m, src)
}
func (m *VReplicationExecRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VReplicationExecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VReplicationExecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VReplicationExecRequest proto.InternalMessageInfo

func (m *VReplicationExecRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type VReplicationExecResponse struct {
	Result *query.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *VReplicationExecResponse) Reset()      { *m = VReplicationExecResponse{} }
func (*VReplicationExecResponse) ProtoMessage() {}
func (*VReplicationExecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{65}
}
func (m *VReplicationExecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VReplicationExecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VReplicationExecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VReplicationExecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VReplicationExecResponse.Merge(m, src)
}
func (m *VReplicationExecResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VReplicationExecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VReplicationExecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VReplicationExecResponse proto.InternalMessageInfo

func (m *VReplicationExecResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type VReplicationWaitForPosRequest struct {
	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Position string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *VReplicationWaitForPosRequest) Reset()      { *m = VReplicationWaitForPosRequest{} }
func (*VReplicationWaitForPosRequest) ProtoMessage() {}
func (*VReplicationWaitForPosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{66}
}
func (m *VReplicationWaitForPosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VReplicationWaitForPosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VReplicationWaitForPosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VReplicationWaitForPosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VReplicationWaitForPosRequest.Merge(m, src)
}
func (m *VReplicationWaitForPosRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VReplicationWaitForPosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VReplicationWaitForPosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VReplicationWaitForPosRequest proto.InternalMessageInfo

func (m *VReplicationWaitForPosRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VReplicationWaitForPosRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type VReplicationWaitForPosResponse struct {
}

func (m *VReplicationWaitForPosResponse) Reset()      { *m = VReplicationWaitForPosResponse{} }
func (*VReplicationWaitForPosResponse) ProtoMessage() {}
func (*VReplicationWaitForPosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{67}
}
func (m *VReplicationWaitForPosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VReplicationWaitForPosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VReplicationWaitForPosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VReplicationWaitForPosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VReplicationWaitForPosResponse.Merge(m, src)
}
func (m *VReplicationWaitForPosResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *VReplicationWaitForPosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VReplicationWaitForPosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VReplicationWaitForPosResponse proto.InternalMessageInfo

type InitMasterRequest struct {
}

func (m *InitMasterRequest) Reset()      { *m = InitMasterRequest{} }
func (*InitMasterRequest) ProtoMessage() {}
func (*InitMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{68}
}
func (m *InitMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitMasterRequest.Merge(m, src)
}
func (m *InitMasterRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *InitMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitMasterRequest proto.InternalMessageInfo

type InitMasterResponse struct {
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *InitMasterResponse) Reset()      { *m = InitMasterResponse{} }
func (*InitMasterResponse) ProtoMessage() {}
func (*InitMasterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{69}
}
func (m *InitMasterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitMasterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitMasterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitMasterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitMasterResponse.Merge(m, src)
}
func (m *InitMasterResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *InitMasterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitMasterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitMasterResponse proto.InternalMessageInfo

func (m *InitMasterResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type PopulateReparentJournalRequest struct {
	TimeCreatedNs       int64                 `protobuf:"varint,1,opt,name=time_created_ns,json=timeCreatedNs,proto3" json:"time_created_ns,omitempty"`
	ActionName          string                `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	MasterAlias         *topodata.TabletAlias `protobuf:"bytes,3,opt,name=master_alias,json=masterAlias,proto3" json:"master_alias,omitempty"`
	ReplicationPosition string                `protobuf:"bytes,4,opt,name=replication_position,json=replicationPosition,proto3" json:"replication_position,omitempty"`
}

func (m *PopulateReparentJournalRequest) Reset()      { *m = PopulateReparentJournalRequest{} }
func (*PopulateReparentJournalRequest) ProtoMessage() {}
func (*PopulateReparentJournalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{70}
}
func (m *PopulateReparentJournalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PopulateReparentJournalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PopulateReparentJournalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PopulateReparentJournalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopulateReparentJournalRequest.Merge(m, src)
}
func (m *PopulateReparentJournalRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PopulateReparentJournalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PopulateReparentJournalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PopulateReparentJournalRequest proto.InternalMessageInfo

func (m *PopulateReparentJournalRequest) GetTimeCreatedNs() int64 {
	if m != nil {
		return m.TimeCreatedNs
	}
	return 0
}

func (m *PopulateReparentJournalRequest) GetActionName() string {
	if m != nil {
		return m.ActionName
	}
	return ""
}

func (m *PopulateReparentJournalRequest) GetMasterAlias() *topodata.TabletAlias {
	if m != nil {
		return m.MasterAlias
	}
	return nil
}

func (m *PopulateReparentJournalRequest) GetReplicationPosition() string {
	if m != nil {
		return m.ReplicationPosition
	}
	return ""
}

type PopulateReparentJournalResponse struct {
}

func (m *PopulateReparentJournalResponse) Reset()      { *m = PopulateReparentJournalResponse{} }
func (*PopulateReparentJournalResponse) ProtoMessage() {}
func (*PopulateReparentJournalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{71}
}
func (m *PopulateReparentJournalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PopulateReparentJournalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PopulateReparentJournalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PopulateReparentJournalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopulateReparentJournalResponse.Merge(m, src)
}
func (m *PopulateReparentJournalResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PopulateReparentJournalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PopulateReparentJournalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PopulateReparentJournalResponse proto.InternalMessageInfo

type InitSlaveRequest struct {
	Parent              *topodata.TabletAlias `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ReplicationPosition string                `protobuf:"bytes,2,opt,name=replication_position,json=replicationPosition,proto3" json:"replication_position,omitempty"`
	TimeCreatedNs       int64                 `protobuf:"varint,3,opt,name=time_created_ns,json=timeCreatedNs,proto3" json:"time_created_ns,omitempty"`
}

func (m *InitSlaveRequest) Reset()      { *m = InitSlaveRequest{} }
func (*InitSlaveRequest) ProtoMessage() {}
func (*InitSlaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{72}
}
func (m *InitSlaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitSlaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitSlaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitSlaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitSlaveRequest.Merge(m, src)
}
func (m *InitSlaveRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *InitSlaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitSlaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitSlaveRequest proto.InternalMessageInfo

func (m *InitSlaveRequest) GetParent() *topodata.TabletAlias {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *InitSlaveRequest) GetReplicationPosition() string {
	if m != nil {
		return m.ReplicationPosition
	}
	return ""
}

func (m *InitSlaveRequest) GetTimeCreatedNs() int64 {
	if m != nil {
		return m.TimeCreatedNs
	}
	return 0
}

type InitSlaveResponse struct {
}

func (m *InitSlaveResponse) Reset()      { *m = InitSlaveResponse{} }
func (*InitSlaveResponse) ProtoMessage() {}
func (*InitSlaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{73}
}
func (m *InitSlaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitSlaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitSlaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitSlaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitSlaveResponse.Merge(m, src)
}
func (m *InitSlaveResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *InitSlaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitSlaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitSlaveResponse proto.InternalMessageInfo

type DemoteMasterRequest struct {
}

func (m *DemoteMasterRequest) Reset()      { *m = DemoteMasterRequest{} }
func (*DemoteMasterRequest) ProtoMessage() {}
func (*DemoteMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{74}
}
func (m *DemoteMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DemoteMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DemoteMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DemoteMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemoteMasterRequest.Merge(m, src)
}
func (m *DemoteMasterRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DemoteMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DemoteMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DemoteMasterRequest proto.InternalMessageInfo

type DemoteMasterResponse struct {
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *DemoteMasterResponse) Reset()      { *m = DemoteMasterResponse{} }
func (*DemoteMasterResponse) ProtoMessage() {}
func (*DemoteMasterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{75}
}
func (m *DemoteMasterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DemoteMasterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DemoteMasterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DemoteMasterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemoteMasterResponse.Merge(m, src)
}
func (m *DemoteMasterResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DemoteMasterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DemoteMasterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DemoteMasterResponse proto.InternalMessageInfo

func (m *DemoteMasterResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type UndoDemoteMasterRequest struct {
}

func (m *UndoDemoteMasterRequest) Reset()      { *m = UndoDemoteMasterRequest{} }
func (*UndoDemoteMasterRequest) ProtoMessage() {}
func (*UndoDemoteMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{76}
}
func (m *UndoDemoteMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndoDemoteMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndoDemoteMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndoDemoteMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoDemoteMasterRequest.Merge(m, src)
}
func (m *UndoDemoteMasterRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UndoDemoteMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoDemoteMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UndoDemoteMasterRequest proto.InternalMessageInfo

type UndoDemoteMasterResponse struct {
}

func (m *UndoDemoteMasterResponse) Reset()      { *m = UndoDemoteMasterResponse{} }
func (*UndoDemoteMasterResponse) ProtoMessage() {}
func (*UndoDemoteMasterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{77}
}
func (m *UndoDemoteMasterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndoDemoteMasterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndoDemoteMasterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndoDemoteMasterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoDemoteMasterResponse.Merge(m, src)
}
func (m *UndoDemoteMasterResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UndoDemoteMasterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoDemoteMasterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndoDemoteMasterResponse proto.InternalMessageInfo

type PromoteSlaveWhenCaughtUpRequest struct {
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *PromoteSlaveWhenCaughtUpRequest) Reset()      { *m = PromoteSlaveWhenCaughtUpRequest{} }
func (*PromoteSlaveWhenCaughtUpRequest) ProtoMessage() {}
func (*PromoteSlaveWhenCaughtUpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{78}
}
func (m *PromoteSlaveWhenCaughtUpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteSlaveWhenCaughtUpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteSlaveWhenCaughtUpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteSlaveWhenCaughtUpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteSlaveWhenCaughtUpRequest.Merge(m, src)
}
func (m *PromoteSlaveWhenCaughtUpRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PromoteSlaveWhenCaughtUpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteSlaveWhenCaughtUpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteSlaveWhenCaughtUpRequest proto.InternalMessageInfo

func (m *PromoteSlaveWhenCaughtUpRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type PromoteSlaveWhenCaughtUpResponse struct {
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *PromoteSlaveWhenCaughtUpResponse) Reset()      { *m = PromoteSlaveWhenCaughtUpResponse{} }
func (*PromoteSlaveWhenCaughtUpResponse) ProtoMessage() {}
func (*PromoteSlaveWhenCaughtUpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{79}
}
func (m *PromoteSlaveWhenCaughtUpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteSlaveWhenCaughtUpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteSlaveWhenCaughtUpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteSlaveWhenCaughtUpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteSlaveWhenCaughtUpResponse.Merge(m, src)
}
func (m *PromoteSlaveWhenCaughtUpResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PromoteSlaveWhenCaughtUpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteSlaveWhenCaughtUpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteSlaveWhenCaughtUpResponse proto.InternalMessageInfo

func (m *PromoteSlaveWhenCaughtUpResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type SlaveWasPromotedRequest struct {
}

func (m *SlaveWasPromotedRequest) Reset()      { *m = SlaveWasPromotedRequest{} }
func (*SlaveWasPromotedRequest) ProtoMessage() {}
func (*SlaveWasPromotedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{80}
}
func (m *SlaveWasPromotedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveWasPromotedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveWasPromotedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveWasPromotedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveWasPromotedRequest.Merge(m, src)
}
func (m *SlaveWasPromotedRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SlaveWasPromotedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveWasPromotedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveWasPromotedRequest proto.InternalMessageInfo

type SlaveWasPromotedResponse struct {
}

func (m *SlaveWasPromotedResponse) Reset()      { *m = SlaveWasPromotedResponse{} }
func (*SlaveWasPromotedResponse) ProtoMessage() {}
func (*SlaveWasPromotedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{81}
}
func (m *SlaveWasPromotedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveWasPromotedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveWasPromotedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveWasPromotedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveWasPromotedResponse.Merge(m, src)
}
func (m *SlaveWasPromotedResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SlaveWasPromotedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveWasPromotedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveWasPromotedResponse proto.InternalMessageInfo

type SetMasterRequest struct {
	Parent          *topodata.TabletAlias `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	TimeCreatedNs   int64                 `protobuf:"varint,2,opt,name=time_created_ns,json=timeCreatedNs,proto3" json:"time_created_ns,omitempty"`
	ForceStartSlave bool                  `protobuf:"varint,3,opt,name=force_start_slave,json=forceStartSlave,proto3" json:"force_start_slave,omitempty"`
}

func (m *SetMasterRequest) Reset()      { *m = SetMasterRequest{} }
func (*SetMasterRequest) ProtoMessage() {}
func (*SetMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{82}
}
func (m *SetMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMasterRequest.Merge(m, src)
}
func (m *SetMasterRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SetMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetMasterRequest proto.InternalMessageInfo

func (m *SetMasterRequest) GetParent() *topodata.TabletAlias {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SetMasterRequest) GetTimeCreatedNs() int64 {
	if m != nil {
		return m.TimeCreatedNs
	}
	return 0
}

func (m *SetMasterRequest) GetForceStartSlave() bool {
	if m != nil {
		return m.ForceStartSlave
	}
	return false
}

type SetMasterResponse struct {
}

func (m *SetMasterResponse) Reset()      { *m = SetMasterResponse{} }
func (*SetMasterResponse) ProtoMessage() {}
func (*SetMasterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{83}
}
func (m *SetMasterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMasterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMasterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMasterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMasterResponse.Merge(m, src)
}
func (m *SetMasterResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SetMasterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMasterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetMasterResponse proto.InternalMessageInfo

type SlaveWasRestartedRequest struct {
	// the parent alias the tablet should have
	Parent *topodata.TabletAlias `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *SlaveWasRestartedRequest) Reset()      { *m = SlaveWasRestartedRequest{} }
func (*SlaveWasRestartedRequest) ProtoMessage() {}
func (*SlaveWasRestartedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{84}
}
func (m *SlaveWasRestartedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveWasRestartedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveWasRestartedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveWasRestartedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveWasRestartedRequest.Merge(m, src)
}
func (m *SlaveWasRestartedRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SlaveWasRestartedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveWasRestartedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveWasRestartedRequest proto.InternalMessageInfo

func (m *SlaveWasRestartedRequest) GetParent() *topodata.TabletAlias {
	if m != nil {
		return m.Parent
	}
	return nil
}

type SlaveWasRestartedResponse struct {
}

func (m *SlaveWasRestartedResponse) Reset()      { *m = SlaveWasRestartedResponse{} }
func (*SlaveWasRestartedResponse) ProtoMessage() {}
func (*SlaveWasRestartedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{85}
}
func (m *SlaveWasRestartedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveWasRestartedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveWasRestartedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveWasRestartedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveWasRestartedResponse.Merge(m, src)
}
func (m *SlaveWasRestartedResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SlaveWasRestartedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveWasRestartedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveWasRestartedResponse proto.InternalMessageInfo

type StopReplicationAndGetStatusRequest struct {
}

func (m *StopReplicationAndGetStatusRequest) Reset()      { *m = StopReplicationAndGetStatusRequest{} }
func (*StopReplicationAndGetStatusRequest) ProtoMessage() {}
func (*StopReplicationAndGetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{86}
}
func (m *StopReplicationAndGetStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopReplicationAndGetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopReplicationAndGetStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopReplicationAndGetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopReplicationAndGetStatusRequest.Merge(m, src)
}
func (m *StopReplicationAndGetStatusRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopReplicationAndGetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopReplicationAndGetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopReplicationAndGetStatusRequest proto.InternalMessageInfo

type StopReplicationAndGetStatusResponse struct {
	Status *replicationdata.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *StopReplicationAndGetStatusResponse) Reset()      { *m = StopReplicationAndGetStatusResponse{} }
func (*StopReplicationAndGetStatusResponse) ProtoMessage() {}
func (*StopReplicationAndGetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{87}
}
func (m *StopReplicationAndGetStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopReplicationAndGetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopReplicationAndGetStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopReplicationAndGetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopReplicationAndGetStatusResponse.Merge(m, src)
}
func (m *StopReplicationAndGetStatusResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *StopReplicationAndGetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopReplicationAndGetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopReplicationAndGetStatusResponse proto.InternalMessageInfo

func (m *StopReplicationAndGetStatusResponse) GetStatus() *replicationdata.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type PromoteSlaveRequest struct {
}

func (m *PromoteSlaveRequest) Reset()      { *m = PromoteSlaveRequest{} }
func (*PromoteSlaveRequest) ProtoMessage() {}
func (*PromoteSlaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{88}
}
func (m *PromoteSlaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteSlaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteSlaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteSlaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteSlaveRequest.Merge(m, src)
}
func (m *PromoteSlaveRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PromoteSlaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteSlaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteSlaveRequest proto.InternalMessageInfo

type PromoteSlaveResponse struct {
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *PromoteSlaveResponse) Reset()      { *m = PromoteSlaveResponse{} }
func (*PromoteSlaveResponse) ProtoMessage() {}
func (*PromoteSlaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{89}
}
func (m *PromoteSlaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoteSlaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoteSlaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoteSlaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteSlaveResponse.Merge(m, src)
}
func (m *PromoteSlaveResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PromoteSlaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteSlaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteSlaveResponse proto.InternalMessageInfo

func (m *PromoteSlaveResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type BackupRequest struct {
	Concurrency int64 `protobuf:"varint,1,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	AllowMaster bool  `protobuf:"varint,2,opt,name=allowMaster,proto3" json:"allowMaster,omitempty"`
}

func (m *BackupRequest) Reset()      { *m = BackupRequest{} }
func (*BackupRequest) ProtoMessage() {}
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{90}
}
func (m *BackupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupRequest.Merge(m, src)
}
func (m *BackupRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *BackupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupRequest proto.InternalMessageInfo

func (m *BackupRequest) GetConcurrency() int64 {
	if m != nil {
		return m.Concurrency
	}
	return 0
}

func (m *BackupRequest) GetAllowMaster() bool {
	if m != nil {
		return m.AllowMaster
	}
	return false
}

type BackupResponse struct {
	Event *logutil.Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *BackupResponse) Reset()      { *m = BackupResponse{} }
func (*BackupResponse) ProtoMessage() {}
func (*BackupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{91}
}
func (m *BackupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupResponse.Merge(m, src)
}
func (m *BackupResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *BackupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BackupResponse proto.InternalMessageInfo

func (m *BackupResponse) GetEvent() *logutil.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type RestoreFromBackupRequest struct {
}

func (m *RestoreFromBackupRequest) Reset()      { *m = RestoreFromBackupRequest{} }
func (*RestoreFromBackupRequest) ProtoMessage() {}
func (*RestoreFromBackupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{92}
}
func (m *RestoreFromBackupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreFromBackupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreFromBackupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreFromBackupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreFromBackupRequest.Merge(m, src)
}
func (m *RestoreFromBackupRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RestoreFromBackupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreFromBackupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreFromBackupRequest proto.InternalMessageInfo

type RestoreFromBackupResponse struct {
	Event *logutil.Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *RestoreFromBackupResponse) Reset()      { *m = RestoreFromBackupResponse{} }
func (*RestoreFromBackupResponse) ProtoMessage() {}
func (*RestoreFromBackupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9ac4f89e61ffa4, []int{93}
}
func (m *RestoreFromBackupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreFromBackupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestoreFromBackupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestoreFromBackupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreFromBackupResponse.Merge(m, src)
}
func (m *RestoreFromBackupResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RestoreFromBackupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreFromBackupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreFromBackupResponse proto.InternalMessageInfo

func (m *RestoreFromBackupResponse) GetEvent() *logutil.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*TableDefinition)(nil), "tabletmanagerdata.TableDefinition")
	proto.RegisterType((*SchemaDefinition)(nil), "tabletmanagerdata.SchemaDefinition")
	proto.RegisterType((*SchemaChangeResult)(nil), "tabletmanagerdata.SchemaChangeResult")
	proto.RegisterType((*UserPermission)(nil), "tabletmanagerdata.UserPermission")
	proto.RegisterMapType((map[string]string)(nil), "tabletmanagerdata.UserPermission.PrivilegesEntry")
	proto.RegisterType((*DbPermission)(nil), "tabletmanagerdata.DbPermission")
	proto.RegisterMapType((map[string]string)(nil), "tabletmanagerdata.DbPermission.PrivilegesEntry")
	proto.RegisterType((*Permissions)(nil), "tabletmanagerdata.Permissions")
	proto.RegisterType((*PingRequest)(nil), "tabletmanagerdata.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "tabletmanagerdata.PingResponse")
	proto.RegisterType((*SleepRequest)(nil), "tabletmanagerdata.SleepRequest")
	proto.RegisterType((*SleepResponse)(nil), "tabletmanagerdata.SleepResponse")
	proto.RegisterType((*ExecuteHookRequest)(nil), "tabletmanagerdata.ExecuteHookRequest")
	proto.RegisterMapType((map[string]string)(nil), "tabletmanagerdata.ExecuteHookRequest.ExtraEnvEntry")
	proto.RegisterType((*ExecuteHookResponse)(nil), "tabletmanagerdata.ExecuteHookResponse")
	proto.RegisterType((*GetSchemaRequest)(nil), "tabletmanagerdata.GetSchemaRequest")
	proto.RegisterType((*GetSchemaResponse)(nil), "tabletmanagerdata.GetSchemaResponse")
	proto.RegisterType((*GetPermissionsRequest)(nil), "tabletmanagerdata.GetPermissionsRequest")
	proto.RegisterType((*GetPermissionsResponse)(nil), "tabletmanagerdata.GetPermissionsResponse")
	proto.RegisterType((*SetReadOnlyRequest)(nil), "tabletmanagerdata.SetReadOnlyRequest")
	proto.RegisterType((*SetReadOnlyResponse)(nil), "tabletmanagerdata.SetReadOnlyResponse")
	proto.RegisterType((*SetReadWriteRequest)(nil), "tabletmanagerdata.SetReadWriteRequest")
	proto.RegisterType((*SetReadWriteResponse)(nil), "tabletmanagerdata.SetReadWriteResponse")
	proto.RegisterType((*ChangeTypeRequest)(nil), "tabletmanagerdata.ChangeTypeRequest")
	proto.RegisterType((*ChangeTypeResponse)(nil), "tabletmanagerdata.ChangeTypeResponse")
	proto.RegisterType((*RefreshStateRequest)(nil), "tabletmanagerdata.RefreshStateRequest")
	proto.RegisterType((*RefreshStateResponse)(nil), "tabletmanagerdata.RefreshStateResponse")
	proto.RegisterType((*RunHealthCheckRequest)(nil), "tabletmanagerdata.RunHealthCheckRequest")
	proto.RegisterType((*RunHealthCheckResponse)(nil), "tabletmanagerdata.RunHealthCheckResponse")
	proto.RegisterType((*IgnoreHealthErrorRequest)(nil), "tabletmanagerdata.IgnoreHealthErrorRequest")
	proto.RegisterType((*IgnoreHealthErrorResponse)(nil), "tabletmanagerdata.IgnoreHealthErrorResponse")
	proto.RegisterType((*ReloadSchemaRequest)(nil), "tabletmanagerdata.ReloadSchemaRequest")
	proto.RegisterType((*ReloadSchemaResponse)(nil), "tabletmanagerdata.ReloadSchemaResponse")
	proto.RegisterType((*PreflightSchemaRequest)(nil), "tabletmanagerdata.PreflightSchemaRequest")
	proto.RegisterType((*PreflightSchemaResponse)(nil), "tabletmanagerdata.PreflightSchemaResponse")
	proto.RegisterType((*ApplySchemaRequest)(nil), "tabletmanagerdata.ApplySchemaRequest")
	proto.RegisterType((*ApplySchemaResponse)(nil), "tabletmanagerdata.ApplySchemaResponse")
	proto.RegisterType((*LockTablesRequest)(nil), "tabletmanagerdata.LockTablesRequest")
	proto.RegisterType((*LockTablesResponse)(nil), "tabletmanagerdata.LockTablesResponse")
	proto.RegisterType((*UnlockTablesRequest)(nil), "tabletmanagerdata.UnlockTablesRequest")
	proto.RegisterType((*UnlockTablesResponse)(nil), "tabletmanagerdata.UnlockTablesResponse")
	proto.RegisterType((*ExecuteFetchAsDbaRequest)(nil), "tabletmanagerdata.ExecuteFetchAsDbaRequest")
	proto.RegisterType((*ExecuteFetchAsDbaResponse)(nil), "tabletmanagerdata.ExecuteFetchAsDbaResponse")
	proto.RegisterType((*ExecuteFetchAsAllPrivsRequest)(nil), "tabletmanagerdata.ExecuteFetchAsAllPrivsRequest")
	proto.RegisterType((*ExecuteFetchAsAllPrivsResponse)(nil), "tabletmanagerdata.ExecuteFetchAsAllPrivsResponse")
	proto.RegisterType((*ExecuteFetchAsAppRequest)(nil), "tabletmanagerdata.ExecuteFetchAsAppRequest")
	proto.RegisterType((*ExecuteFetchAsAppResponse)(nil), "tabletmanagerdata.ExecuteFetchAsAppResponse")
	proto.RegisterType((*SlaveStatusRequest)(nil), "tabletmanagerdata.SlaveStatusRequest")
	proto.RegisterType((*SlaveStatusResponse)(nil), "tabletmanagerdata.SlaveStatusResponse")
	proto.RegisterType((*MasterPositionRequest)(nil), "tabletmanagerdata.MasterPositionRequest")
	proto.RegisterType((*MasterPositionResponse)(nil), "tabletmanagerdata.MasterPositionResponse")
	proto.RegisterType((*StopSlaveRequest)(nil), "tabletmanagerdata.StopSlaveRequest")
	proto.RegisterType((*StopSlaveResponse)(nil), "tabletmanagerdata.StopSlaveResponse")
	proto.RegisterType((*StopSlaveMinimumRequest)(nil), "tabletmanagerdata.StopSlaveMinimumRequest")
	proto.RegisterType((*StopSlaveMinimumResponse)(nil), "tabletmanagerdata.StopSlaveMinimumResponse")
	proto.RegisterType((*StartSlaveRequest)(nil), "tabletmanagerdata.StartSlaveRequest")
	proto.RegisterType((*StartSlaveResponse)(nil), "tabletmanagerdata.StartSlaveResponse")
	proto.RegisterType((*StartSlaveUntilAfterRequest)(nil), "tabletmanagerdata.StartSlaveUntilAfterRequest")
	proto.RegisterType((*StartSlaveUntilAfterResponse)(nil), "tabletmanagerdata.StartSlaveUntilAfterResponse")
	proto.RegisterType((*TabletExternallyReparentedRequest)(nil), "tabletmanagerdata.TabletExternallyReparentedRequest")
	proto.RegisterType((*TabletExternallyReparentedResponse)(nil), "tabletmanagerdata.TabletExternallyReparentedResponse")
	proto.RegisterType((*TabletExternallyElectedRequest)(nil), "tabletmanagerdata.TabletExternallyElectedRequest")
	proto.RegisterType((*TabletExternallyElectedResponse)(nil), "tabletmanagerdata.TabletExternallyElectedResponse")
	proto.RegisterType((*GetSlavesRequest)(nil), "tabletmanagerdata.GetSlavesRequest")
	proto.RegisterType((*GetSlavesResponse)(nil), "tabletmanagerdata.GetSlavesResponse")
	proto.RegisterType((*ResetReplicationRequest)(nil), "tabletmanagerdata.ResetReplicationRequest")
	proto.RegisterType((*ResetReplicationResponse)(nil), "tabletmanagerdata.ResetReplicationResponse")
	proto.RegisterType((*VReplicationExecRequest)(nil), "tabletmanagerdata.VReplicationExecRequest")
	proto.RegisterType((*VReplicationExecResponse)(nil), "tabletmanagerdata.VReplicationExecResponse")
	proto.RegisterType((*VReplicationWaitForPosRequest)(nil), "tabletmanagerdata.VReplicationWaitForPosRequest")
	proto.RegisterType((*VReplicationWaitForPosResponse)(nil), "tabletmanagerdata.VReplicationWaitForPosResponse")
	proto.RegisterType((*InitMasterRequest)(nil), "tabletmanagerdata.InitMasterRequest")
	proto.RegisterType((*InitMasterResponse)(nil), "tabletmanagerdata.InitMasterResponse")
	proto.RegisterType((*PopulateReparentJournalRequest)(nil), "tabletmanagerdata.PopulateReparentJournalRequest")
	proto.RegisterType((*PopulateReparentJournalResponse)(nil), "tabletmanagerdata.PopulateReparentJournalResponse")
	proto.RegisterType((*InitSlaveRequest)(nil), "tabletmanagerdata.InitSlaveRequest")
	proto.RegisterType((*InitSlaveResponse)(nil), "tabletmanagerdata.InitSlaveResponse")
	proto.RegisterType((*DemoteMasterRequest)(nil), "tabletmanagerdata.DemoteMasterRequest")
	proto.RegisterType((*DemoteMasterResponse)(nil), "tabletmanagerdata.DemoteMasterResponse")
	proto.RegisterType((*UndoDemoteMasterRequest)(nil), "tabletmanagerdata.UndoDemoteMasterRequest")
	proto.RegisterType((*UndoDemoteMasterResponse)(nil), "tabletmanagerdata.UndoDemoteMasterResponse")
	proto.RegisterType((*PromoteSlaveWhenCaughtUpRequest)(nil), "tabletmanagerdata.PromoteSlaveWhenCaughtUpRequest")
	proto.RegisterType((*PromoteSlaveWhenCaughtUpResponse)(nil), "tabletmanagerdata.PromoteSlaveWhenCaughtUpResponse")
	proto.RegisterType((*SlaveWasPromotedRequest)(nil), "tabletmanagerdata.SlaveWasPromotedRequest")
	proto.RegisterType((*SlaveWasPromotedResponse)(nil), "tabletmanagerdata.SlaveWasPromotedResponse")
	proto.RegisterType((*SetMasterRequest)(nil), "tabletmanagerdata.SetMasterRequest")
	proto.RegisterType((*SetMasterResponse)(nil), "tabletmanagerdata.SetMasterResponse")
	proto.RegisterType((*SlaveWasRestartedRequest)(nil), "tabletmanagerdata.SlaveWasRestartedRequest")
	proto.RegisterType((*SlaveWasRestartedResponse)(nil), "tabletmanagerdata.SlaveWasRestartedResponse")
	proto.RegisterType((*StopReplicationAndGetStatusRequest)(nil), "tabletmanagerdata.StopReplicationAndGetStatusRequest")
	proto.RegisterType((*StopReplicationAndGetStatusResponse)(nil), "tabletmanagerdata.StopReplicationAndGetStatusResponse")
	proto.RegisterType((*PromoteSlaveRequest)(nil), "tabletmanagerdata.PromoteSlaveRequest")
	proto.RegisterType((*PromoteSlaveResponse)(nil), "tabletmanagerdata.PromoteSlaveResponse")
	proto.RegisterType((*BackupRequest)(nil), "tabletmanagerdata.BackupRequest")
	proto.RegisterType((*BackupResponse)(nil), "tabletmanagerdata.BackupResponse")
	proto.RegisterType((*RestoreFromBackupRequest)(nil), "tabletmanagerdata.RestoreFromBackupRequest")
	proto.RegisterType((*RestoreFromBackupResponse)(nil), "tabletmanagerdata.RestoreFromBackupResponse")
}

func init() { proto.RegisterFile("tabletmanagerdata.proto", fileDescriptor_ff9ac4f89e61ffa4) }

var fileDescriptor_ff9ac4f89e61ffa4 = []byte{
	// 2138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0x92, 0x92, 0x2c, 0x3d, 0x7e, 0x88, 0x5c, 0x52, 0x22, 0x25, 0x37, 0x94, 0xbc, 0x76,
	0x1a, 0xd7, 0x45, 0xa9, 0x46, 0x49, 0x83, 0x20, 0x45, 0x8a, 0xca, 0xb2, 0x64, 0x3b, 0x71, 0x62,
	0x65, 0x65, 0xd9, 0x45, 0x50, 0x60, 0x3b, 0xe4, 0x8e, 0xc8, 0x85, 0x96, 0x3b, 0xeb, 0x99, 0x59,
	0x4a, 0xbc, 0xf5, 0x2f, 0x28, 0x7a, 0xe9, 0xad, 0x87, 0x02, 0x05, 0xda, 0x9e, 0xfb, 0x57, 0xf4,
	0x98, 0x53, 0x9a, 0x1e, 0x23, 0x5f, 0x7a, 0xcc, 0xad, 0x87, 0x5e, 0x8a, 0xf9, 0x58, 0x72, 0x97,
	0x1f, 0xb6, 0x24, 0xb8, 0x40, 0x2e, 0x02, 0xdf, 0xef, 0xbd, 0x79, 0x5f, 0xf3, 0xde, 0x9b, 0xb7,
	0x10, 0xd4, 0x38, 0x6a, 0xf9, 0x98, 0xf7, 0x50, 0x80, 0x3a, 0x98, 0xba, 0x88, 0xa3, 0x66, 0x48,
	0x09, 0x27, 0x66, 0x79, 0x82, 0xb1, 0x9e, 0x7b, 0x11, 0x61, 0x3a, 0x50, 0xfc, 0xf5, 0x22, 0x27,
	0x21, 0x19, 0xc9, 0xaf, 0xaf, 0x50, 0x1c, 0xfa, 0x5e, 0x1b, 0x71, 0x8f, 0x04, 0x09, 0xb8, 0xe0,
	0x93, 0x4e, 0xc4, 0x3d, 0x5f, 0x91, 0xd6, 0xbf, 0x0c, 0x58, 0x7e, 0x2a, 0x14, 0xdf, 0xc7, 0xc7,
	0x5e, 0xe0, 0x09, 0x61, 0xd3, 0x84, 0xb9, 0x00, 0xf5, 0x70, 0xdd, 0xd8, 0x34, 0xee, 0x2c, 0xd9,
	0xf2, 0xb7, 0xb9, 0x0a, 0x0b, 0xac, 0xdd, 0xc5, 0x3d, 0x54, 0xcf, 0x48, 0x54, 0x53, 0x66, 0x1d,
	0xae, 0xb7, 0x89, 0x1f, 0xf5, 0x02, 0x56, 0xcf, 0x6e, 0x66, 0xef, 0x2c, 0xd9, 0x31, 0x69, 0x36,
	0xa1, 0x12, 0x52, 0xaf, 0x87, 0xe8, 0xc0, 0x39, 0xc1, 0x03, 0x27, 0x96, 0x9a, 0x93, 0x52, 0x65,
	0xcd, 0xfa, 0x14, 0x0f, 0x76, 0xb5, 0xbc, 0x09, 0x73, 0x7c, 0x10, 0xe2, 0xfa, 0xbc, 0xb2, 0x2a,
	0x7e, 0x9b, 0x1b, 0x90, 0x13, 0xae, 0x3b, 0x3e, 0x0e, 0x3a, 0xbc, 0x5b, 0x5f, 0xd8, 0x34, 0xee,
	0xcc, 0xd9, 0x20, 0xa0, 0xc7, 0x12, 0x31, 0x6f, 0xc0, 0x12, 0x25, 0xa7, 0x4e, 0x9b, 0x44, 0x01,
	0xaf, 0x5f, 0x97, 0xec, 0x45, 0x4a, 0x4e, 0x77, 0x05, 0x6d, 0xfd, 0xc5, 0x80, 0xd2, 0xa1, 0x74,
	0x33, 0x11, 0xdc, 0x3b, 0xb0, 0x2c, 0xce, 0xb7, 0x10, 0xc3, 0x8e, 0x8e, 0x48, 0xc5, 0x59, 0x8c,
	0x61, 0x75, 0xc4, 0x7c, 0x02, 0x2a, 0xe3, 0x8e, 0x3b, 0x3c, 0xcc, 0xea, 0x99, 0xcd, 0xec, 0x9d,
	0xdc, 0xb6, 0xd5, 0x9c, 0xbc, 0xa4, 0xb1, 0x24, 0xda, 0x25, 0x9e, 0x06, 0x98, 0x48, 0x55, 0x1f,
	0x53, 0xe6, 0x91, 0xa0, 0x9e, 0x95, 0x16, 0x63, 0x52, 0x38, 0x6a, 0x2a, 0xab, 0xbb, 0x5d, 0x14,
	0x74, 0xb0, 0x8d, 0x59, 0xe4, 0x73, 0xf3, 0x21, 0x14, 0x5a, 0xf8, 0x98, 0xd0, 0x94, 0xa3, 0xb9,
	0xed, 0x5b, 0x53, 0xac, 0x8f, 0x87, 0x69, 0xe7, 0xd5, 0x49, 0x1d, 0xcb, 0x3e, 0xe4, 0xd1, 0x31,
	0xc7, 0xd4, 0x49, 0xdc, 0xe1, 0x05, 0x15, 0xe5, 0xe4, 0x41, 0x05, 0x5b, 0xff, 0x31, 0xa0, 0x78,
	0xc4, 0x30, 0x3d, 0xc0, 0xb4, 0xe7, 0x31, 0xa6, 0x8b, 0xa5, 0x4b, 0x18, 0x8f, 0x8b, 0x45, 0xfc,
	0x16, 0x58, 0xc4, 0x30, 0xd5, 0xa5, 0x22, 0x7f, 0x9b, 0x3f, 0x86, 0x72, 0x88, 0x18, 0x3b, 0x25,
	0xd4, 0x75, 0xda, 0x5d, 0xdc, 0x3e, 0x61, 0x51, 0x4f, 0xe6, 0x61, 0xce, 0x2e, 0xc5, 0x8c, 0x5d,
	0x8d, 0x9b, 0x5f, 0x00, 0x84, 0xd4, 0xeb, 0x7b, 0x3e, 0xee, 0x60, 0x55, 0x32, 0xb9, 0xed, 0x77,
	0xa7, 0x78, 0x9b, 0xf6, 0xa5, 0x79, 0x30, 0x3c, 0xb3, 0x17, 0x70, 0x3a, 0xb0, 0x13, 0x4a, 0xd6,
	0x3f, 0x86, 0xe5, 0x31, 0xb6, 0x59, 0x82, 0xec, 0x09, 0x1e, 0x68, 0xcf, 0xc5, 0x4f, 0xb3, 0x0a,
	0xf3, 0x7d, 0xe4, 0x47, 0x58, 0x7b, 0xae, 0x88, 0x8f, 0x32, 0x1f, 0x1a, 0xd6, 0xd7, 0x06, 0xe4,
	0xef, 0xb7, 0x5e, 0x13, 0x77, 0x11, 0x32, 0x6e, 0x4b, 0x9f, 0xcd, 0xb8, 0xad, 0x61, 0x1e, 0xb2,
	0x89, 0x3c, 0x3c, 0x99, 0x12, 0xda, 0xd6, 0x94, 0xd0, 0x92, 0xc6, 0xfe, 0x9f, 0x81, 0xfd, 0xd9,
	0x80, 0xdc, 0xc8, 0x12, 0x33, 0x1f, 0x43, 0x49, 0xf8, 0xe9, 0x84, 0x23, 0xac, 0x6e, 0x48, 0x2f,
	0x6f, 0xbe, 0xf6, 0x02, 0xec, 0xe5, 0x28, 0x45, 0x33, 0x73, 0x1f, 0x8a, 0x6e, 0x2b, 0xa5, 0x4b,
	0x75, 0xd0, 0xc6, 0x6b, 0x22, 0xb6, 0x0b, 0x6e, 0x82, 0x62, 0xd6, 0x3b, 0x90, 0x3b, 0xf0, 0x82,
	0x8e, 0x8d, 0x5f, 0x44, 0x98, 0x71, 0xd1, 0x4a, 0x21, 0x1a, 0xf8, 0x04, 0xb9, 0x3a, 0xc8, 0x98,
	0xb4, 0xee, 0x40, 0x5e, 0x09, 0xb2, 0x90, 0x04, 0x0c, 0xbf, 0x42, 0xf2, 0x2e, 0xe4, 0x0f, 0x7d,
	0x8c, 0xc3, 0x58, 0xe7, 0x3a, 0x2c, 0xba, 0x11, 0x95, 0xe3, 0x52, 0x8a, 0x66, 0xed, 0x21, 0x6d,
	0x2d, 0x43, 0x41, 0xcb, 0x2a, 0xb5, 0xd6, 0x3f, 0x0d, 0x30, 0xf7, 0xce, 0x70, 0x3b, 0xe2, 0xf8,
	0x21, 0x21, 0x27, 0xb1, 0x8e, 0x69, 0x93, 0xb3, 0x01, 0x10, 0x22, 0x8a, 0x7a, 0x98, 0x63, 0xaa,
	0xc2, 0x5f, 0xb2, 0x13, 0x88, 0x79, 0x00, 0x4b, 0xf8, 0x8c, 0x53, 0xe4, 0xe0, 0xa0, 0x2f, 0x67,
	0x68, 0x6e, 0xfb, 0xbd, 0x29, 0xd9, 0x99, 0xb4, 0xd6, 0xdc, 0x13, 0xc7, 0xf6, 0x82, 0xbe, 0xaa,
	0x89, 0x45, 0xac, 0xc9, 0xf5, 0x9f, 0x43, 0x21, 0xc5, 0xba, 0x54, 0x3d, 0x1c, 0x43, 0x25, 0x65,
	0x4a, 0xe7, 0x71, 0x03, 0x72, 0xf8, 0xcc, 0xe3, 0x0e, 0xe3, 0x88, 0x47, 0x4c, 0x27, 0x08, 0x04,
	0x74, 0x28, 0x11, 0xf9, 0x40, 0x70, 0x97, 0x44, 0x7c, 0xf8, 0x40, 0x48, 0x4a, 0xe3, 0x98, 0xc6,
	0x5d, 0xa0, 0x29, 0xab, 0x0f, 0xa5, 0x07, 0x98, 0xab, 0xb9, 0x12, 0xa7, 0x6f, 0x15, 0x16, 0x64,
	0xe0, 0xaa, 0xe2, 0x96, 0x6c, 0x4d, 0x99, 0xb7, 0xa0, 0xe0, 0x05, 0x6d, 0x3f, 0x72, 0xb1, 0xd3,
	0xf7, 0xf0, 0x29, 0x93, 0x26, 0x16, 0xed, 0xbc, 0x06, 0x9f, 0x09, 0xcc, 0x7c, 0x1b, 0x8a, 0xf8,
	0x4c, 0x09, 0x69, 0x25, 0xea, 0x41, 0x2a, 0x68, 0x54, 0x0e, 0x68, 0x66, 0x61, 0x28, 0x27, 0xec,
	0xea, 0xe8, 0x0e, 0xa0, 0xac, 0x26, 0x63, 0x62, 0xd8, 0x5f, 0x66, 0xda, 0x96, 0xd8, 0x18, 0x62,
	0xd5, 0x60, 0xe5, 0x01, 0xe6, 0x89, 0x12, 0xd6, 0x31, 0x5a, 0x5f, 0xc2, 0xea, 0x38, 0x43, 0x3b,
	0xf1, 0x4b, 0xc8, 0xa5, 0x9b, 0x4e, 0x98, 0x6f, 0x4c, 0x31, 0x9f, 0x3c, 0x9c, 0x3c, 0x62, 0x55,
	0xc1, 0x3c, 0xc4, 0xdc, 0xc6, 0xc8, 0x7d, 0x12, 0xf8, 0x83, 0xd8, 0xe2, 0x0a, 0x54, 0x52, 0xa8,
	0x2e, 0xe1, 0x11, 0xfc, 0x9c, 0x7a, 0x1c, 0xc7, 0xd2, 0xab, 0x50, 0x4d, 0xc3, 0x5a, 0xfc, 0x13,
	0x28, 0xab, 0xc7, 0xe9, 0xe9, 0x20, 0x8c, 0x85, 0xcd, 0x9f, 0x41, 0x4e, 0xb9, 0xe7, 0xc8, 0xa7,
	0x5b, 0xb8, 0x5c, 0xdc, 0xae, 0x36, 0x87, 0x9b, 0x88, 0xcc, 0x39, 0x97, 0x27, 0x80, 0x0f, 0x7f,
	0x0b, 0x3f, 0x93, 0xba, 0x46, 0x0e, 0xd9, 0xf8, 0x98, 0x62, 0xd6, 0x15, 0x25, 0x95, 0x74, 0x28,
	0x0d, 0x6b, 0xf1, 0x1a, 0xac, 0xd8, 0x51, 0xf0, 0x10, 0x23, 0x9f, 0x77, 0xe5, 0xc3, 0x11, 0x1f,
	0xa8, 0xc3, 0xea, 0x38, 0x43, 0x1f, 0x79, 0x1f, 0xea, 0x8f, 0x3a, 0x01, 0xa1, 0x58, 0x31, 0xf7,
	0x28, 0x25, 0x34, 0x35, 0x52, 0x38, 0xc7, 0x34, 0x18, 0x0d, 0x0a, 0x49, 0x5a, 0x37, 0x60, 0x6d,
	0xca, 0x29, 0xad, 0xf2, 0x23, 0xe1, 0xb4, 0x98, 0x27, 0xe9, 0x4a, 0xbe, 0x05, 0x85, 0x53, 0xe4,
	0x71, 0x27, 0x24, 0x6c, 0x54, 0x4c, 0x4b, 0x76, 0x5e, 0x80, 0x07, 0x1a, 0x53, 0x91, 0x25, 0xcf,
	0x6a, 0x9d, 0xdb, 0xb0, 0x7a, 0x40, 0xf1, 0xb1, 0xef, 0x75, 0xba, 0x63, 0x0d, 0x22, 0xb6, 0x2d,
	0x99, 0xb8, 0xb8, 0x43, 0x62, 0xd2, 0xea, 0x40, 0x6d, 0xe2, 0x8c, 0xae, 0xab, 0xc7, 0x50, 0x54,
	0x52, 0x0e, 0x95, 0x7b, 0x45, 0x3c, 0xcf, 0xdf, 0x9e, 0x59, 0xd9, 0xc9, 0x2d, 0xc4, 0x2e, 0xb4,
	0x13, 0x14, 0xb3, 0xfe, 0x6b, 0x80, 0xb9, 0x13, 0x86, 0xfe, 0x20, 0xed, 0x59, 0x09, 0xb2, 0xec,
	0x85, 0x1f, 0x8f, 0x18, 0xf6, 0xc2, 0x17, 0x23, 0xe6, 0x98, 0xd0, 0x36, 0xd6, 0xcd, 0xaa, 0x08,
	0xb1, 0x06, 0x20, 0xdf, 0x27, 0xa7, 0x4e, 0x62, 0x3b, 0x95, 0x93, 0x61, 0xd1, 0x2e, 0x49, 0x86,
	0x3d, 0xc2, 0x27, 0x17, 0xa0, 0xb9, 0x37, 0xb5, 0x00, 0xcd, 0x5f, 0x71, 0x01, 0xfa, 0xab, 0x01,
	0x95, 0x54, 0xf4, 0x3a, 0xc7, 0xdf, 0xbf, 0x55, 0xad, 0x02, 0xe5, 0xc7, 0xa4, 0x7d, 0xa2, 0xa6,
	0x5e, 0xdc, 0x1a, 0x55, 0x30, 0x93, 0xe0, 0xa8, 0xf1, 0x8e, 0x02, 0x7f, 0x42, 0x78, 0x15, 0xaa,
	0x69, 0x58, 0x8b, 0xff, 0xdd, 0x80, 0xba, 0x7e, 0x22, 0xf6, 0x31, 0x6f, 0x77, 0x77, 0xd8, 0xfd,
	0xd6, 0xb0, 0x0e, 0xaa, 0x30, 0x2f, 0x3f, 0x4a, 0x64, 0x02, 0xf2, 0xb6, 0x22, 0xcc, 0x1a, 0x5c,
	0x77, 0x5b, 0x8e, 0x7c, 0x1a, 0xf5, 0xeb, 0xe0, 0xb6, 0x3e, 0x17, 0x8f, 0xe3, 0x1a, 0x2c, 0xf6,
	0xd0, 0x99, 0x43, 0xc9, 0x29, 0xd3, 0xcb, 0xe0, 0xf5, 0x1e, 0x3a, 0xb3, 0xc9, 0x29, 0x93, 0x8b,
	0xba, 0xc7, 0xe4, 0x06, 0xde, 0xf2, 0x02, 0x9f, 0x74, 0x98, 0xbc, 0xfe, 0x45, 0xbb, 0xa8, 0xe1,
	0x7b, 0x0a, 0x15, 0xbd, 0x46, 0x65, 0x1b, 0x25, 0x2f, 0x77, 0xd1, 0xce, 0xd3, 0x44, 0x6f, 0x59,
	0x0f, 0x60, 0x6d, 0x8a, 0xcf, 0xfa, 0xf6, 0xee, 0xc2, 0x82, 0x6a, 0x0d, 0x7d, 0x6d, 0x66, 0x53,
	0x7d, 0x58, 0x7d, 0x21, 0xfe, 0xea, 0x36, 0xd0, 0x12, 0xd6, 0xef, 0x0c, 0x78, 0x2b, 0xad, 0x69,
	0xc7, 0xf7, 0xc5, 0x02, 0xc6, 0xde, 0x7c, 0x0a, 0x26, 0x22, 0x9b, 0x9b, 0x12, 0xd9, 0x63, 0x68,
	0xcc, 0xf2, 0xe7, 0x0a, 0xe1, 0x7d, 0x3a, 0x7e, 0xb7, 0x3b, 0x61, 0xf8, 0xea, 0xc0, 0x92, 0xfe,
	0x67, 0x52, 0xfe, 0x4f, 0x26, 0x5d, 0x2a, 0xbb, 0x82, 0x57, 0xe2, 0x61, 0xf3, 0x51, 0x1f, 0xab,
	0x5d, 0x23, 0x2e, 0xd0, 0x7d, 0xa8, 0xa4, 0x50, 0xad, 0x78, 0x4b, 0x6c, 0x1c, 0xc3, 0x2d, 0x25,
	0xb7, 0x5d, 0x6b, 0x8e, 0x7f, 0x09, 0xeb, 0x03, 0x5a, 0x4c, 0xbc, 0x24, 0x9f, 0x21, 0xc6, 0x31,
	0x8d, 0x27, 0x73, 0x6c, 0xe0, 0x7d, 0x58, 0x1d, 0x67, 0x68, 0x1b, 0xeb, 0xb0, 0x38, 0x36, 0xda,
	0x87, 0xb4, 0x65, 0x42, 0xe9, 0x90, 0x93, 0x50, 0xba, 0x16, 0x6b, 0xaa, 0x40, 0x39, 0x81, 0xe9,
	0x46, 0xfa, 0x15, 0xd4, 0x86, 0xe0, 0x67, 0x5e, 0xe0, 0xf5, 0xa2, 0x5e, 0x62, 0x19, 0x9d, 0xa5,
	0xdf, 0xbc, 0x09, 0xf2, 0x19, 0x71, 0xb8, 0xd7, 0xc3, 0xf1, 0xbe, 0x95, 0xb5, 0x73, 0x02, 0x7b,
	0xaa, 0x20, 0xeb, 0x03, 0xa8, 0x4f, 0x6a, 0xbe, 0x80, 0xeb, 0xd2, 0x4d, 0x44, 0x79, 0xca, 0x77,
	0x91, 0xfc, 0x04, 0xa8, 0x9d, 0xff, 0x35, 0xdc, 0x18, 0xa1, 0x47, 0x01, 0xf7, 0xfc, 0x1d, 0x31,
	0x7d, 0xde, 0x50, 0x00, 0x0d, 0xf8, 0xc1, 0x74, 0xed, 0xda, 0xfa, 0x7d, 0xb8, 0xa9, 0x76, 0x8b,
	0xbd, 0x33, 0xf1, 0x46, 0x23, 0x5f, 0x2c, 0x36, 0x21, 0xa2, 0x38, 0xe0, 0xd8, 0x8d, 0x7d, 0x90,
	0x3b, 0xab, 0x62, 0x3b, 0x5e, 0xbc, 0xff, 0x43, 0x0c, 0x3d, 0x72, 0xad, 0xdb, 0x60, 0xbd, 0x4a,
	0x8b, 0xb6, 0xb5, 0x09, 0x8d, 0x71, 0xa9, 0x3d, 0x1f, 0xb7, 0x47, 0x86, 0xac, 0x9b, 0xb0, 0x31,
	0x53, 0x42, 0x2b, 0x31, 0xd5, 0xba, 0x2b, 0xc2, 0x19, 0xd6, 0xef, 0x8f, 0xd4, 0x2a, 0xaa, 0x31,
	0x7d, 0x3d, 0x55, 0x98, 0x47, 0xae, 0x4b, 0xe3, 0x07, 0x5e, 0x11, 0xd6, 0x1a, 0xd4, 0x6c, 0xcc,
	0xc4, 0x5e, 0x36, 0xac, 0xe4, 0x58, 0xcb, 0x3a, 0xd4, 0x27, 0x59, 0xda, 0xea, 0x16, 0xd4, 0x9e,
	0x25, 0x70, 0xd1, 0x8c, 0x53, 0x9b, 0x79, 0x49, 0x37, 0xb3, 0xb5, 0x0f, 0xf5, 0xc9, 0x03, 0x57,
	0x1a, 0x23, 0x6f, 0x25, 0xf5, 0x3c, 0x47, 0x1e, 0xdf, 0x27, 0xa2, 0x8d, 0x62, 0xf3, 0x45, 0xc8,
	0xe8, 0x2b, 0xc9, 0xda, 0x19, 0xcf, 0x4d, 0xd5, 0x4b, 0x66, 0xac, 0x2a, 0x37, 0xa1, 0x31, 0x4b,
	0x99, 0x8e, 0xb3, 0x02, 0xe5, 0x47, 0x81, 0xc7, 0x55, 0xb3, 0xc6, 0x89, 0xf9, 0x29, 0x98, 0x49,
	0xf0, 0x02, 0xe5, 0xff, 0xb5, 0x01, 0x8d, 0x03, 0x12, 0x46, 0xbe, 0xdc, 0x33, 0x55, 0x21, 0x7c,
	0x42, 0x22, 0x71, 0xa3, 0xb1, 0xdf, 0x3f, 0x84, 0x65, 0x51, 0xb6, 0x4e, 0x9b, 0x62, 0xc4, 0xb1,
	0xeb, 0x04, 0xf1, 0xb7, 0x50, 0x41, 0xc0, 0xbb, 0x0a, 0xfd, 0x9c, 0x89, 0xda, 0x43, 0x6d, 0xa1,
	0x34, 0x39, 0xf2, 0x41, 0x41, 0x72, 0xec, 0x7f, 0x08, 0xf9, 0x9e, 0xf4, 0xcc, 0x41, 0xbe, 0x87,
	0xd4, 0xe8, 0xcf, 0x6d, 0xaf, 0x8c, 0xef, 0xce, 0x3b, 0x82, 0x69, 0xe7, 0x94, 0xa8, 0x24, 0xcc,
	0x77, 0xa1, 0x9a, 0x18, 0x68, 0xa3, 0x15, 0x73, 0x4e, 0xda, 0xa8, 0x24, 0x78, 0xc3, 0x4d, 0xf3,
	0x26, 0x6c, 0xcc, 0x8c, 0x4b, 0xa7, 0xf0, 0x8f, 0x06, 0x94, 0x44, 0xba, 0x92, 0xad, 0x6f, 0xfe,
	0x04, 0x16, 0x94, 0xb4, 0xbe, 0xf2, 0x19, 0xee, 0x69, 0xa1, 0x99, 0x9e, 0x65, 0x66, 0x7a, 0x36,
	0x2d, 0x9f, 0xd9, 0x29, 0xf9, 0x8c, 0x6f, 0x38, 0x3d, 0x83, 0x56, 0xa0, 0x72, 0x1f, 0xf7, 0x08,
	0xc7, 0xe9, 0x8b, 0xdf, 0x86, 0x6a, 0x1a, 0xbe, 0xc0, 0xd5, 0xaf, 0x41, 0xed, 0x28, 0x70, 0xc9,
	0x34, 0x75, 0xeb, 0x50, 0x9f, 0x64, 0x69, 0x0f, 0x3e, 0x86, 0x8d, 0x03, 0x4a, 0x04, 0x43, 0x7a,
	0xf6, 0xbc, 0x8b, 0x83, 0x5d, 0x14, 0x75, 0xba, 0xfc, 0x28, 0xbc, 0xc0, 0x24, 0xb4, 0x7e, 0x01,
	0x9b, 0xb3, 0x8f, 0x5f, 0xcc, 0x6b, 0x75, 0x10, 0x31, 0xad, 0xc7, 0x4d, 0x78, 0x3d, 0xc9, 0xd2,
	0x5e, 0xff, 0xc1, 0x80, 0xd2, 0x21, 0x4e, 0xb7, 0xcb, 0x65, 0xef, 0x7a, 0xca, 0xc5, 0x65, 0xa6,
	0x35, 0xc2, 0x5d, 0x28, 0xcb, 0xcd, 0xdf, 0x61, 0x62, 0x9e, 0x3b, 0x4c, 0xf8, 0xa4, 0x17, 0xfe,
	0x65, 0xc9, 0x18, 0xcd, 0x79, 0xf9, 0xfc, 0xe0, 0xb1, 0x86, 0xb5, 0x1e, 0x8d, 0x02, 0xb1, 0xb1,
	0x54, 0x32, 0x9a, 0xf0, 0x97, 0xf3, 0x59, 0x7c, 0xc9, 0x4d, 0x51, 0xa5, 0xed, 0xdc, 0x06, 0x4b,
	0xbc, 0x99, 0x89, 0x41, 0xb3, 0x13, 0xb8, 0x62, 0x3e, 0xa7, 0x76, 0x8e, 0x67, 0x70, 0xeb, 0x95,
	0x52, 0x57, 0xdd, 0x41, 0x56, 0xa0, 0x92, 0xac, 0x84, 0x44, 0x29, 0xa7, 0xe1, 0x0b, 0x14, 0xc5,
	0x21, 0x14, 0xee, 0xa1, 0xf6, 0x49, 0x34, 0xac, 0xc0, 0x4d, 0xc8, 0xb5, 0x49, 0xd0, 0x8e, 0x28,
	0xc5, 0x41, 0x7b, 0xa0, 0xe7, 0x55, 0x12, 0x12, 0x12, 0xf2, 0xe3, 0x4b, 0xa5, 0x5e, 0x7f, 0xb1,
	0x25, 0x21, 0xeb, 0x03, 0x28, 0xc6, 0x4a, 0xb5, 0x0b, 0xb7, 0x61, 0x1e, 0xf7, 0x47, 0xa9, 0x2f,
	0x36, 0xe3, 0x7f, 0x2c, 0xec, 0x09, 0xd4, 0x56, 0x4c, 0xfd, 0x3a, 0x71, 0x42, 0xf1, 0x3e, 0x25,
	0xbd, 0x94, 0x5f, 0xd6, 0x0e, 0xac, 0x4d, 0xe1, 0x5d, 0x46, 0xfd, 0xbd, 0xdf, 0x7c, 0xf3, 0x6d,
	0xe3, 0xda, 0x77, 0xdf, 0x36, 0x8c, 0xdf, 0x9e, 0x37, 0x8c, 0xbf, 0x9d, 0x37, 0x8c, 0x7f, 0x9c,
	0x37, 0x8c, 0xaf, 0xce, 0x1b, 0xc6, 0xbf, 0xcf, 0x1b, 0xd7, 0xbe, 0x3b, 0x6f, 0x18, 0xbf, 0x7f,
	0xd9, 0xb8, 0xf6, 0xa7, 0x97, 0x0d, 0xe3, 0xab, 0x97, 0x8d, 0x6b, 0xdf, 0xbc, 0x6c, 0x5c, 0xfb,
	0xb2, 0xd9, 0xf7, 0x38, 0x66, 0xac, 0xe9, 0x91, 0x2d, 0xf5, 0x6b, 0xab, 0x43, 0xb6, 0xfa, 0x7c,
	0x4b, 0xfe, 0x3b, 0x64, 0x6b, 0xe2, 0x2b, 0xab, 0xb5, 0x20, 0x19, 0xef, 0xfd, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0x9c, 0xba, 0xcb, 0x98, 0x19, 0x00, 0x00,
}

func (this *TableDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableDefinition)
	if !ok {
		that2, ok := that.(TableDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Schema != that1.Schema {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if this.Columns[i] != that1.Columns[i] {
			return false
		}
	}
	if len(this.PrimaryKeyColumns) != len(that1.PrimaryKeyColumns) {
		return false
	}
	for i := range this.PrimaryKeyColumns {
		if this.PrimaryKeyColumns[i] != that1.PrimaryKeyColumns[i] {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DataLength != that1.DataLength {
		return false
	}
	if this.RowCount != that1.RowCount {
		return false
	}
	return true
}
func (this *SchemaDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaDefinition)
	if !ok {
		that2, ok := that.(SchemaDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DatabaseSchema != that1.DatabaseSchema {
		return false
	}
	if len(this.TableDefinitions) != len(that1.TableDefinitions) {
		return false
	}
	for i := range this.TableDefinitions {
		if !this.TableDefinitions[i].Equal(that1.TableDefinitions[i]) {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *SchemaChangeResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaChangeResult)
	if !ok {
		that2, ok := that.(SchemaChangeResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BeforeSchema.Equal(that1.BeforeSchema) {
		return false
	}
	if !this.AfterSchema.Equal(that1.AfterSchema) {
		return false
	}
	return true
}
func (this *UserPermission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserPermission)
	if !ok {
		that2, ok := that.(UserPermission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.PasswordChecksum != that1.PasswordChecksum {
		return false
	}
	if len(this.Privileges) != len(that1.Privileges) {
		return false
	}
	for i := range this.Privileges {
		if this.Privileges[i] != that1.Privileges[i] {
			return false
		}
	}
	return true
}
func (this *DbPermission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DbPermission)
	if !ok {
		that2, ok := that.(DbPermission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Db != that1.Db {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if len(this.Privileges) != len(that1.Privileges) {
		return false
	}
	for i := range this.Privileges {
		if this.Privileges[i] != that1.Privileges[i] {
			return false
		}
	}
	return true
}
func (this *Permissions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Permissions)
	if !ok {
		that2, ok := that.(Permissions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserPermissions) != len(that1.UserPermissions) {
		return false
	}
	for i := range this.UserPermissions {
		if !this.UserPermissions[i].Equal(that1.UserPermissions[i]) {
			return false
		}
	}
	if len(this.DbPermissions) != len(that1.DbPermissions) {
		return false
	}
	for i := range this.DbPermissions {
		if !this.DbPermissions[i].Equal(that1.DbPermissions[i]) {
			return false
		}
	}
	return true
}
func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	return true
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	return true
}
func (this *SleepRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SleepRequest)
	if !ok {
		that2, ok := that.(SleepRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *SleepResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SleepResponse)
	if !ok {
		that2, ok := that.(SleepResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExecuteHookRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteHookRequest)
	if !ok {
		that2, ok := that.(ExecuteHookRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if this.Parameters[i] != that1.Parameters[i] {
			return false
		}
	}
	if len(this.ExtraEnv) != len(that1.ExtraEnv) {
		return false
	}
	for i := range this.ExtraEnv {
		if this.ExtraEnv[i] != that1.ExtraEnv[i] {
			return false
		}
	}
	return true
}
func (this *ExecuteHookResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteHookResponse)
	if !ok {
		that2, ok := that.(ExecuteHookResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExitStatus != that1.ExitStatus {
		return false
	}
	if this.Stdout != that1.Stdout {
		return false
	}
	if this.Stderr != that1.Stderr {
		return false
	}
	return true
}
func (this *GetSchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSchemaRequest)
	if !ok {
		that2, ok := that.(GetSchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tables) != len(that1.Tables) {
		return false
	}
	for i := range this.Tables {
		if this.Tables[i] != that1.Tables[i] {
			return false
		}
	}
	if this.IncludeViews != that1.IncludeViews {
		return false
	}
	if len(this.ExcludeTables) != len(that1.ExcludeTables) {
		return false
	}
	for i := range this.ExcludeTables {
		if this.ExcludeTables[i] != that1.ExcludeTables[i] {
			return false
		}
	}
	return true
}
func (this *GetSchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSchemaResponse)
	if !ok {
		that2, ok := that.(GetSchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchemaDefinition.Equal(that1.SchemaDefinition) {
		return false
	}
	return true
}
func (this *GetPermissionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPermissionsRequest)
	if !ok {
		that2, ok := that.(GetPermissionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetPermissionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPermissionsResponse)
	if !ok {
		that2, ok := that.(GetPermissionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Permissions.Equal(that1.Permissions) {
		return false
	}
	return true
}
func (this *SetReadOnlyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetReadOnlyRequest)
	if !ok {
		that2, ok := that.(SetReadOnlyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetReadOnlyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetReadOnlyResponse)
	if !ok {
		that2, ok := that.(SetReadOnlyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetReadWriteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetReadWriteRequest)
	if !ok {
		that2, ok := that.(SetReadWriteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetReadWriteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetReadWriteResponse)
	if !ok {
		that2, ok := that.(SetReadWriteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ChangeTypeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeTypeRequest)
	if !ok {
		that2, ok := that.(ChangeTypeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TabletType != that1.TabletType {
		return false
	}
	return true
}
func (this *ChangeTypeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeTypeResponse)
	if !ok {
		that2, ok := that.(ChangeTypeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RefreshStateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshStateRequest)
	if !ok {
		that2, ok := that.(RefreshStateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RefreshStateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshStateResponse)
	if !ok {
		that2, ok := that.(RefreshStateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RunHealthCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RunHealthCheckRequest)
	if !ok {
		that2, ok := that.(RunHealthCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RunHealthCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RunHealthCheckResponse)
	if !ok {
		that2, ok := that.(RunHealthCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *IgnoreHealthErrorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IgnoreHealthErrorRequest)
	if !ok {
		that2, ok := that.(IgnoreHealthErrorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	return true
}
func (this *IgnoreHealthErrorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IgnoreHealthErrorResponse)
	if !ok {
		that2, ok := that.(IgnoreHealthErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReloadSchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReloadSchemaRequest)
	if !ok {
		that2, ok := that.(ReloadSchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WaitPosition != that1.WaitPosition {
		return false
	}
	return true
}
func (this *ReloadSchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReloadSchemaResponse)
	if !ok {
		that2, ok := that.(ReloadSchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PreflightSchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreflightSchemaRequest)
	if !ok {
		that2, ok := that.(PreflightSchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Changes) != len(that1.Changes) {
		return false
	}
	for i := range this.Changes {
		if this.Changes[i] != that1.Changes[i] {
			return false
		}
	}
	return true
}
func (this *PreflightSchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreflightSchemaResponse)
	if !ok {
		that2, ok := that.(PreflightSchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ChangeResults) != len(that1.ChangeResults) {
		return false
	}
	for i := range this.ChangeResults {
		if !this.ChangeResults[i].Equal(that1.ChangeResults[i]) {
			return false
		}
	}
	return true
}
func (this *ApplySchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplySchemaRequest)
	if !ok {
		that2, ok := that.(ApplySchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sql != that1.Sql {
		return false
	}
	if this.Force != that1.Force {
		return false
	}
	if this.AllowReplication != that1.AllowReplication {
		return false
	}
	if !this.BeforeSchema.Equal(that1.BeforeSchema) {
		return false
	}
	if !this.AfterSchema.Equal(that1.AfterSchema) {
		return false
	}
	return true
}
func (this *ApplySchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplySchemaResponse)
	if !ok {
		that2, ok := that.(ApplySchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BeforeSchema.Equal(that1.BeforeSchema) {
		return false
	}
	if !this.AfterSchema.Equal(that1.AfterSchema) {
		return false
	}
	return true
}
func (this *LockTablesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockTablesRequest)
	if !ok {
		that2, ok := that.(LockTablesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LockTablesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockTablesResponse)
	if !ok {
		that2, ok := that.(LockTablesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UnlockTablesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockTablesRequest)
	if !ok {
		that2, ok := that.(UnlockTablesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UnlockTablesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockTablesResponse)
	if !ok {
		that2, ok := that.(UnlockTablesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExecuteFetchAsDbaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteFetchAsDbaRequest)
	if !ok {
		that2, ok := that.(ExecuteFetchAsDbaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Query, that1.Query) {
		return false
	}
	if this.DbName != that1.DbName {
		return false
	}
	if this.MaxRows != that1.MaxRows {
		return false
	}
	if this.DisableBinlogs != that1.DisableBinlogs {
		return false
	}
	if this.ReloadSchema != that1.ReloadSchema {
		return false
	}
	return true
}
func (this *ExecuteFetchAsDbaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteFetchAsDbaResponse)
	if !ok {
		that2, ok := that.(ExecuteFetchAsDbaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ExecuteFetchAsAllPrivsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteFetchAsAllPrivsRequest)
	if !ok {
		that2, ok := that.(ExecuteFetchAsAllPrivsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Query, that1.Query) {
		return false
	}
	if this.DbName != that1.DbName {
		return false
	}
	if this.MaxRows != that1.MaxRows {
		return false
	}
	if this.ReloadSchema != that1.ReloadSchema {
		return false
	}
	return true
}
func (this *ExecuteFetchAsAllPrivsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteFetchAsAllPrivsResponse)
	if !ok {
		that2, ok := that.(ExecuteFetchAsAllPrivsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ExecuteFetchAsAppRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteFetchAsAppRequest)
	if !ok {
		that2, ok := that.(ExecuteFetchAsAppRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Query, that1.Query) {
		return false
	}
	if this.MaxRows != that1.MaxRows {
		return false
	}
	return true
}
func (this *ExecuteFetchAsAppResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteFetchAsAppResponse)
	if !ok {
		that2, ok := that.(ExecuteFetchAsAppResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *SlaveStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlaveStatusRequest)
	if !ok {
		that2, ok := that.(SlaveStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SlaveStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlaveStatusResponse)
	if !ok {
		that2, ok := that.(SlaveStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *MasterPositionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MasterPositionRequest)
	if !ok {
		that2, ok := that.(MasterPositionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MasterPositionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MasterPositionResponse)
	if !ok {
		that2, ok := that.(MasterPositionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *StopSlaveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StopSlaveRequest)
	if !ok {
		that2, ok := that.(StopSlaveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StopSlaveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StopSlaveResponse)
	if !ok {
		that2, ok := that.(StopSlaveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StopSlaveMinimumRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StopSlaveMinimumRequest)
	if !ok {
		that2, ok := that.(StopSlaveMinimumRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.WaitTimeout != that1.WaitTimeout {
		return false
	}
	return true
}
func (this *StopSlaveMinimumResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StopSlaveMinimumResponse)
	if !ok {
		that2, ok := that.(StopSlaveMinimumResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *StartSlaveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartSlaveRequest)
	if !ok {
		that2, ok := that.(StartSlaveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StartSlaveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartSlaveResponse)
	if !ok {
		that2, ok := that.(StartSlaveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StartSlaveUntilAfterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartSlaveUntilAfterRequest)
	if !ok {
		that2, ok := that.(StartSlaveUntilAfterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.WaitTimeout != that1.WaitTimeout {
		return false
	}
	return true
}
func (this *StartSlaveUntilAfterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartSlaveUntilAfterResponse)
	if !ok {
		that2, ok := that.(StartSlaveUntilAfterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TabletExternallyReparentedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TabletExternallyReparentedRequest)
	if !ok {
		that2, ok := that.(TabletExternallyReparentedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalId != that1.ExternalId {
		return false
	}
	return true
}
func (this *TabletExternallyReparentedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TabletExternallyReparentedResponse)
	if !ok {
		that2, ok := that.(TabletExternallyReparentedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TabletExternallyElectedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TabletExternallyElectedRequest)
	if !ok {
		that2, ok := that.(TabletExternallyElectedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TabletExternallyElectedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TabletExternallyElectedResponse)
	if !ok {
		that2, ok := that.(TabletExternallyElectedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSlavesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSlavesRequest)
	if !ok {
		that2, ok := that.(GetSlavesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetSlavesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSlavesResponse)
	if !ok {
		that2, ok := that.(GetSlavesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addrs) != len(that1.Addrs) {
		return false
	}
	for i := range this.Addrs {
		if this.Addrs[i] != that1.Addrs[i] {
			return false
		}
	}
	return true
}
func (this *ResetReplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetReplicationRequest)
	if !ok {
		that2, ok := that.(ResetReplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResetReplicationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResetReplicationResponse)
	if !ok {
		that2, ok := that.(ResetReplicationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VReplicationExecRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VReplicationExecRequest)
	if !ok {
		that2, ok := that.(VReplicationExecRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *VReplicationExecResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VReplicationExecResponse)
	if !ok {
		that2, ok := that.(VReplicationExecResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *VReplicationWaitForPosRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VReplicationWaitForPosRequest)
	if !ok {
		that2, ok := that.(VReplicationWaitForPosRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *VReplicationWaitForPosResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VReplicationWaitForPosResponse)
	if !ok {
		that2, ok := that.(VReplicationWaitForPosResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *InitMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitMasterRequest)
	if !ok {
		that2, ok := that.(InitMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *InitMasterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitMasterResponse)
	if !ok {
		that2, ok := that.(InitMasterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *PopulateReparentJournalRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PopulateReparentJournalRequest)
	if !ok {
		that2, ok := that.(PopulateReparentJournalRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeCreatedNs != that1.TimeCreatedNs {
		return false
	}
	if this.ActionName != that1.ActionName {
		return false
	}
	if !this.MasterAlias.Equal(that1.MasterAlias) {
		return false
	}
	if this.ReplicationPosition != that1.ReplicationPosition {
		return false
	}
	return true
}
func (this *PopulateReparentJournalResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PopulateReparentJournalResponse)
	if !ok {
		that2, ok := that.(PopulateReparentJournalResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *InitSlaveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitSlaveRequest)
	if !ok {
		that2, ok := that.(InitSlaveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Parent.Equal(that1.Parent) {
		return false
	}
	if this.ReplicationPosition != that1.ReplicationPosition {
		return false
	}
	if this.TimeCreatedNs != that1.TimeCreatedNs {
		return false
	}
	return true
}
func (this *InitSlaveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitSlaveResponse)
	if !ok {
		that2, ok := that.(InitSlaveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DemoteMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DemoteMasterRequest)
	if !ok {
		that2, ok := that.(DemoteMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DemoteMasterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DemoteMasterResponse)
	if !ok {
		that2, ok := that.(DemoteMasterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *UndoDemoteMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UndoDemoteMasterRequest)
	if !ok {
		that2, ok := that.(UndoDemoteMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UndoDemoteMasterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UndoDemoteMasterResponse)
	if !ok {
		that2, ok := that.(UndoDemoteMasterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PromoteSlaveWhenCaughtUpRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromoteSlaveWhenCaughtUpRequest)
	if !ok {
		that2, ok := that.(PromoteSlaveWhenCaughtUpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *PromoteSlaveWhenCaughtUpResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromoteSlaveWhenCaughtUpResponse)
	if !ok {
		that2, ok := that.(PromoteSlaveWhenCaughtUpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *SlaveWasPromotedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlaveWasPromotedRequest)
	if !ok {
		that2, ok := that.(SlaveWasPromotedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SlaveWasPromotedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlaveWasPromotedResponse)
	if !ok {
		that2, ok := that.(SlaveWasPromotedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMasterRequest)
	if !ok {
		that2, ok := that.(SetMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Parent.Equal(that1.Parent) {
		return false
	}
	if this.TimeCreatedNs != that1.TimeCreatedNs {
		return false
	}
	if this.ForceStartSlave != that1.ForceStartSlave {
		return false
	}
	return true
}
func (this *SetMasterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetMasterResponse)
	if !ok {
		that2, ok := that.(SetMasterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SlaveWasRestartedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlaveWasRestartedRequest)
	if !ok {
		that2, ok := that.(SlaveWasRestartedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Parent.Equal(that1.Parent) {
		return false
	}
	return true
}
func (this *SlaveWasRestartedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlaveWasRestartedResponse)
	if !ok {
		that2, ok := that.(SlaveWasRestartedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StopReplicationAndGetStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StopReplicationAndGetStatusRequest)
	if !ok {
		that2, ok := that.(StopReplicationAndGetStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StopReplicationAndGetStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StopReplicationAndGetStatusResponse)
	if !ok {
		that2, ok := that.(StopReplicationAndGetStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *PromoteSlaveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromoteSlaveRequest)
	if !ok {
		that2, ok := that.(PromoteSlaveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PromoteSlaveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromoteSlaveResponse)
	if !ok {
		that2, ok := that.(PromoteSlaveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *BackupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupRequest)
	if !ok {
		that2, ok := that.(BackupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Concurrency != that1.Concurrency {
		return false
	}
	if this.AllowMaster != that1.AllowMaster {
		return false
	}
	return true
}
func (this *BackupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BackupResponse)
	if !ok {
		that2, ok := that.(BackupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *RestoreFromBackupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreFromBackupRequest)
	if !ok {
		that2, ok := that.(RestoreFromBackupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RestoreFromBackupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RestoreFromBackupResponse)
	if !ok {
		that2, ok := that.(RestoreFromBackupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *TableDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tabletmanagerdata.TableDefinition{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	s = append(s, "PrimaryKeyColumns: "+fmt.Sprintf("%#v", this.PrimaryKeyColumns)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DataLength: "+fmt.Sprintf("%#v", this.DataLength)+",\n")
	s = append(s, "RowCount: "+fmt.Sprintf("%#v", this.RowCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tabletmanagerdata.SchemaDefinition{")
	s = append(s, "DatabaseSchema: "+fmt.Sprintf("%#v", this.DatabaseSchema)+",\n")
	if this.TableDefinitions != nil {
		s = append(s, "TableDefinitions: "+fmt.Sprintf("%#v", this.TableDefinitions)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaChangeResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.SchemaChangeResult{")
	if this.BeforeSchema != nil {
		s = append(s, "BeforeSchema: "+fmt.Sprintf("%#v", this.BeforeSchema)+",\n")
	}
	if this.AfterSchema != nil {
		s = append(s, "AfterSchema: "+fmt.Sprintf("%#v", this.AfterSchema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserPermission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tabletmanagerdata.UserPermission{")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "PasswordChecksum: "+fmt.Sprintf("%#v", this.PasswordChecksum)+",\n")
	keysForPrivileges := make([]string, 0, len(this.Privileges))
	for k := range this.Privileges {
		keysForPrivileges = append(keysForPrivileges, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPrivileges)
	mapStringForPrivileges := "map[string]string{"
	for _, k := range keysForPrivileges {
		mapStringForPrivileges += fmt.Sprintf("%#v: %#v,", k, this.Privileges[k])
	}
	mapStringForPrivileges += "}"
	if this.Privileges != nil {
		s = append(s, "Privileges: "+mapStringForPrivileges+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DbPermission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tabletmanagerdata.DbPermission{")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "Db: "+fmt.Sprintf("%#v", this.Db)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	keysForPrivileges := make([]string, 0, len(this.Privileges))
	for k := range this.Privileges {
		keysForPrivileges = append(keysForPrivileges, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPrivileges)
	mapStringForPrivileges := "map[string]string{"
	for _, k := range keysForPrivileges {
		mapStringForPrivileges += fmt.Sprintf("%#v: %#v,", k, this.Privileges[k])
	}
	mapStringForPrivileges += "}"
	if this.Privileges != nil {
		s = append(s, "Privileges: "+mapStringForPrivileges+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Permissions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.Permissions{")
	if this.UserPermissions != nil {
		s = append(s, "UserPermissions: "+fmt.Sprintf("%#v", this.UserPermissions)+",\n")
	}
	if this.DbPermissions != nil {
		s = append(s, "DbPermissions: "+fmt.Sprintf("%#v", this.DbPermissions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.PingRequest{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.PingResponse{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SleepRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.SleepRequest{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SleepResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SleepResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteHookRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tabletmanagerdata.ExecuteHookRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	keysForExtraEnv := make([]string, 0, len(this.ExtraEnv))
	for k := range this.ExtraEnv {
		keysForExtraEnv = append(keysForExtraEnv, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExtraEnv)
	mapStringForExtraEnv := "map[string]string{"
	for _, k := range keysForExtraEnv {
		mapStringForExtraEnv += fmt.Sprintf("%#v: %#v,", k, this.ExtraEnv[k])
	}
	mapStringForExtraEnv += "}"
	if this.ExtraEnv != nil {
		s = append(s, "ExtraEnv: "+mapStringForExtraEnv+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteHookResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tabletmanagerdata.ExecuteHookResponse{")
	s = append(s, "ExitStatus: "+fmt.Sprintf("%#v", this.ExitStatus)+",\n")
	s = append(s, "Stdout: "+fmt.Sprintf("%#v", this.Stdout)+",\n")
	s = append(s, "Stderr: "+fmt.Sprintf("%#v", this.Stderr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tabletmanagerdata.GetSchemaRequest{")
	s = append(s, "Tables: "+fmt.Sprintf("%#v", this.Tables)+",\n")
	s = append(s, "IncludeViews: "+fmt.Sprintf("%#v", this.IncludeViews)+",\n")
	s = append(s, "ExcludeTables: "+fmt.Sprintf("%#v", this.ExcludeTables)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.GetSchemaResponse{")
	if this.SchemaDefinition != nil {
		s = append(s, "SchemaDefinition: "+fmt.Sprintf("%#v", this.SchemaDefinition)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPermissionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.GetPermissionsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPermissionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.GetPermissionsResponse{")
	if this.Permissions != nil {
		s = append(s, "Permissions: "+fmt.Sprintf("%#v", this.Permissions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReadOnlyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SetReadOnlyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReadOnlyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SetReadOnlyResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReadWriteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SetReadWriteRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReadWriteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SetReadWriteResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeTypeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.ChangeTypeRequest{")
	s = append(s, "TabletType: "+fmt.Sprintf("%#v", this.TabletType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangeTypeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.ChangeTypeResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshStateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.RefreshStateRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshStateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.RefreshStateResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RunHealthCheckRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.RunHealthCheckRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RunHealthCheckResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.RunHealthCheckResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IgnoreHealthErrorRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.IgnoreHealthErrorRequest{")
	s = append(s, "Pattern: "+fmt.Sprintf("%#v", this.Pattern)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IgnoreHealthErrorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.IgnoreHealthErrorResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReloadSchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.ReloadSchemaRequest{")
	s = append(s, "WaitPosition: "+fmt.Sprintf("%#v", this.WaitPosition)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReloadSchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.ReloadSchemaResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PreflightSchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.PreflightSchemaRequest{")
	s = append(s, "Changes: "+fmt.Sprintf("%#v", this.Changes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PreflightSchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.PreflightSchemaResponse{")
	if this.ChangeResults != nil {
		s = append(s, "ChangeResults: "+fmt.Sprintf("%#v", this.ChangeResults)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplySchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tabletmanagerdata.ApplySchemaRequest{")
	s = append(s, "Sql: "+fmt.Sprintf("%#v", this.Sql)+",\n")
	s = append(s, "Force: "+fmt.Sprintf("%#v", this.Force)+",\n")
	s = append(s, "AllowReplication: "+fmt.Sprintf("%#v", this.AllowReplication)+",\n")
	if this.BeforeSchema != nil {
		s = append(s, "BeforeSchema: "+fmt.Sprintf("%#v", this.BeforeSchema)+",\n")
	}
	if this.AfterSchema != nil {
		s = append(s, "AfterSchema: "+fmt.Sprintf("%#v", this.AfterSchema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplySchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.ApplySchemaResponse{")
	if this.BeforeSchema != nil {
		s = append(s, "BeforeSchema: "+fmt.Sprintf("%#v", this.BeforeSchema)+",\n")
	}
	if this.AfterSchema != nil {
		s = append(s, "AfterSchema: "+fmt.Sprintf("%#v", this.AfterSchema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockTablesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.LockTablesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockTablesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.LockTablesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlockTablesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.UnlockTablesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlockTablesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.UnlockTablesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteFetchAsDbaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tabletmanagerdata.ExecuteFetchAsDbaRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "DbName: "+fmt.Sprintf("%#v", this.DbName)+",\n")
	s = append(s, "MaxRows: "+fmt.Sprintf("%#v", this.MaxRows)+",\n")
	s = append(s, "DisableBinlogs: "+fmt.Sprintf("%#v", this.DisableBinlogs)+",\n")
	s = append(s, "ReloadSchema: "+fmt.Sprintf("%#v", this.ReloadSchema)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteFetchAsDbaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.ExecuteFetchAsDbaResponse{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteFetchAsAllPrivsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tabletmanagerdata.ExecuteFetchAsAllPrivsRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "DbName: "+fmt.Sprintf("%#v", this.DbName)+",\n")
	s = append(s, "MaxRows: "+fmt.Sprintf("%#v", this.MaxRows)+",\n")
	s = append(s, "ReloadSchema: "+fmt.Sprintf("%#v", this.ReloadSchema)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteFetchAsAllPrivsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.ExecuteFetchAsAllPrivsResponse{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteFetchAsAppRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.ExecuteFetchAsAppRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "MaxRows: "+fmt.Sprintf("%#v", this.MaxRows)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteFetchAsAppResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.ExecuteFetchAsAppResponse{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlaveStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SlaveStatusRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlaveStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.SlaveStatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MasterPositionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.MasterPositionRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MasterPositionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.MasterPositionResponse{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StopSlaveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.StopSlaveRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StopSlaveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.StopSlaveResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StopSlaveMinimumRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.StopSlaveMinimumRequest{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "WaitTimeout: "+fmt.Sprintf("%#v", this.WaitTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StopSlaveMinimumResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.StopSlaveMinimumResponse{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartSlaveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.StartSlaveRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartSlaveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.StartSlaveResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartSlaveUntilAfterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.StartSlaveUntilAfterRequest{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "WaitTimeout: "+fmt.Sprintf("%#v", this.WaitTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartSlaveUntilAfterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.StartSlaveUntilAfterResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TabletExternallyReparentedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.TabletExternallyReparentedRequest{")
	s = append(s, "ExternalId: "+fmt.Sprintf("%#v", this.ExternalId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TabletExternallyReparentedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.TabletExternallyReparentedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TabletExternallyElectedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.TabletExternallyElectedRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TabletExternallyElectedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.TabletExternallyElectedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSlavesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.GetSlavesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSlavesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.GetSlavesResponse{")
	s = append(s, "Addrs: "+fmt.Sprintf("%#v", this.Addrs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetReplicationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.ResetReplicationRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetReplicationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.ResetReplicationResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VReplicationExecRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.VReplicationExecRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VReplicationExecResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.VReplicationExecResponse{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VReplicationWaitForPosRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.VReplicationWaitForPosRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VReplicationWaitForPosResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.VReplicationWaitForPosResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.InitMasterRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitMasterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.InitMasterResponse{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PopulateReparentJournalRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tabletmanagerdata.PopulateReparentJournalRequest{")
	s = append(s, "TimeCreatedNs: "+fmt.Sprintf("%#v", this.TimeCreatedNs)+",\n")
	s = append(s, "ActionName: "+fmt.Sprintf("%#v", this.ActionName)+",\n")
	if this.MasterAlias != nil {
		s = append(s, "MasterAlias: "+fmt.Sprintf("%#v", this.MasterAlias)+",\n")
	}
	s = append(s, "ReplicationPosition: "+fmt.Sprintf("%#v", this.ReplicationPosition)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PopulateReparentJournalResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.PopulateReparentJournalResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitSlaveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tabletmanagerdata.InitSlaveRequest{")
	if this.Parent != nil {
		s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	}
	s = append(s, "ReplicationPosition: "+fmt.Sprintf("%#v", this.ReplicationPosition)+",\n")
	s = append(s, "TimeCreatedNs: "+fmt.Sprintf("%#v", this.TimeCreatedNs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitSlaveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.InitSlaveResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DemoteMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.DemoteMasterRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DemoteMasterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.DemoteMasterResponse{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UndoDemoteMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.UndoDemoteMasterRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UndoDemoteMasterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.UndoDemoteMasterResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteSlaveWhenCaughtUpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.PromoteSlaveWhenCaughtUpRequest{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteSlaveWhenCaughtUpResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.PromoteSlaveWhenCaughtUpResponse{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlaveWasPromotedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SlaveWasPromotedRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlaveWasPromotedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SlaveWasPromotedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tabletmanagerdata.SetMasterRequest{")
	if this.Parent != nil {
		s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	}
	s = append(s, "TimeCreatedNs: "+fmt.Sprintf("%#v", this.TimeCreatedNs)+",\n")
	s = append(s, "ForceStartSlave: "+fmt.Sprintf("%#v", this.ForceStartSlave)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetMasterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SetMasterResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlaveWasRestartedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.SlaveWasRestartedRequest{")
	if this.Parent != nil {
		s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlaveWasRestartedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.SlaveWasRestartedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StopReplicationAndGetStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.StopReplicationAndGetStatusRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StopReplicationAndGetStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.StopReplicationAndGetStatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteSlaveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.PromoteSlaveRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteSlaveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.PromoteSlaveResponse{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BackupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tabletmanagerdata.BackupRequest{")
	s = append(s, "Concurrency: "+fmt.Sprintf("%#v", this.Concurrency)+",\n")
	s = append(s, "AllowMaster: "+fmt.Sprintf("%#v", this.AllowMaster)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BackupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.BackupResponse{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RestoreFromBackupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tabletmanagerdata.RestoreFromBackupRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RestoreFromBackupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tabletmanagerdata.RestoreFromBackupResponse{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTabletmanagerdata(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TableDefinition) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableDefinition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Schema) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Schema)))
		i += copy(dAtA[i:], m.Schema)
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PrimaryKeyColumns) > 0 {
		for _, s := range m.PrimaryKeyColumns {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.DataLength != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.DataLength))
	}
	if m.RowCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.RowCount))
	}
	return i, nil
}

func (m *SchemaDefinition) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaDefinition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DatabaseSchema) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.DatabaseSchema)))
		i += copy(dAtA[i:], m.DatabaseSchema)
	}
	if len(m.TableDefinitions) > 0 {
		for _, msg := range m.TableDefinitions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *SchemaChangeResult) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaChangeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeforeSchema != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.BeforeSchema.ProtoSize()))
		n1, err1 := m.BeforeSchema.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.AfterSchema != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.AfterSchema.ProtoSize()))
		n2, err2 := m.AfterSchema.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *UserPermission) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPermission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.PasswordChecksum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.PasswordChecksum))
	}
	if len(m.Privileges) > 0 {
		for k := range m.Privileges {
			dAtA[i] = 0x22
			i++
			v := m.Privileges[k]
			mapSize := 1 + len(k) + sovTabletmanagerdata(uint64(len(k))) + 1 + len(v) + sovTabletmanagerdata(uint64(len(v)))
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *DbPermission) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DbPermission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Db) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.Privileges) > 0 {
		for k := range m.Privileges {
			dAtA[i] = 0x22
			i++
			v := m.Privileges[k]
			mapSize := 1 + len(k) + sovTabletmanagerdata(uint64(len(k))) + 1 + len(v) + sovTabletmanagerdata(uint64(len(v)))
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Permissions) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permissions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserPermissions) > 0 {
		for _, msg := range m.UserPermissions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DbPermissions) > 0 {
		for _, msg := range m.DbPermissions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *SleepRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SleepRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *SleepResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SleepResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExecuteHookRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteHookRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Parameters) > 0 {
		for _, s := range m.Parameters {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ExtraEnv) > 0 {
		for k := range m.ExtraEnv {
			dAtA[i] = 0x1a
			i++
			v := m.ExtraEnv[k]
			mapSize := 1 + len(k) + sovTabletmanagerdata(uint64(len(k))) + 1 + len(v) + sovTabletmanagerdata(uint64(len(v)))
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *ExecuteHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteHookResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExitStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.ExitStatus))
	}
	if len(m.Stdout) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Stdout)))
		i += copy(dAtA[i:], m.Stdout)
	}
	if len(m.Stderr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Stderr)))
		i += copy(dAtA[i:], m.Stderr)
	}
	return i, nil
}

func (m *GetSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for _, s := range m.Tables {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IncludeViews {
		dAtA[i] = 0x10
		i++
		if m.IncludeViews {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExcludeTables) > 0 {
		for _, s := range m.ExcludeTables {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SchemaDefinition != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.SchemaDefinition.ProtoSize()))
		n3, err3 := m.SchemaDefinition.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *GetPermissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetPermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Permissions.ProtoSize()))
		n4, err4 := m.Permissions.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}

func (m *SetReadOnlyRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReadOnlyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetReadOnlyResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReadOnlyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetReadWriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReadWriteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetReadWriteResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReadWriteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChangeTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TabletType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.TabletType))
	}
	return i, nil
}

func (m *ChangeTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RefreshStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshStateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RefreshStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshStateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RunHealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunHealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RunHealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunHealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *IgnoreHealthErrorRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IgnoreHealthErrorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pattern) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	return i, nil
}

func (m *IgnoreHealthErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IgnoreHealthErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReloadSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReloadSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WaitPosition) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.WaitPosition)))
		i += copy(dAtA[i:], m.WaitPosition)
	}
	return i, nil
}

func (m *ReloadSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReloadSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PreflightSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreflightSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, s := range m.Changes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *PreflightSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreflightSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChangeResults) > 0 {
		for _, msg := range m.ChangeResults {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTabletmanagerdata(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ApplySchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplySchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sql) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Sql)))
		i += copy(dAtA[i:], m.Sql)
	}
	if m.Force {
		dAtA[i] = 0x10
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AllowReplication {
		dAtA[i] = 0x18
		i++
		if m.AllowReplication {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BeforeSchema != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.BeforeSchema.ProtoSize()))
		n5, err5 := m.BeforeSchema.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.AfterSchema != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.AfterSchema.ProtoSize()))
		n6, err6 := m.AfterSchema.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	return i, nil
}

func (m *ApplySchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplySchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeforeSchema != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.BeforeSchema.ProtoSize()))
		n7, err7 := m.BeforeSchema.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.AfterSchema != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.AfterSchema.ProtoSize()))
		n8, err8 := m.AfterSchema.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}

func (m *LockTablesRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockTablesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LockTablesResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockTablesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UnlockTablesRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockTablesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UnlockTablesResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockTablesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExecuteFetchAsDbaRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteFetchAsDbaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if len(m.DbName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if m.MaxRows != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.MaxRows))
	}
	if m.DisableBinlogs {
		dAtA[i] = 0x20
		i++
		if m.DisableBinlogs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReloadSchema {
		dAtA[i] = 0x28
		i++
		if m.ReloadSchema {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ExecuteFetchAsDbaResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteFetchAsDbaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Result.ProtoSize()))
		n9, err9 := m.Result.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	return i, nil
}

func (m *ExecuteFetchAsAllPrivsRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteFetchAsAllPrivsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if len(m.DbName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if m.MaxRows != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.MaxRows))
	}
	if m.ReloadSchema {
		dAtA[i] = 0x20
		i++
		if m.ReloadSchema {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ExecuteFetchAsAllPrivsResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteFetchAsAllPrivsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Result.ProtoSize()))
		n10, err10 := m.Result.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	return i, nil
}

func (m *ExecuteFetchAsAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteFetchAsAppRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.MaxRows != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.MaxRows))
	}
	return i, nil
}

func (m *ExecuteFetchAsAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteFetchAsAppResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Result.ProtoSize()))
		n11, err11 := m.Result.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	return i, nil
}

func (m *SlaveStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SlaveStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Status.ProtoSize()))
		n12, err12 := m.Status.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	return i, nil
}

func (m *MasterPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MasterPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *StopSlaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopSlaveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StopSlaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopSlaveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StopSlaveMinimumRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopSlaveMinimumRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	if m.WaitTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.WaitTimeout))
	}
	return i, nil
}

func (m *StopSlaveMinimumResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopSlaveMinimumResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *StartSlaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartSlaveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StartSlaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartSlaveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StartSlaveUntilAfterRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartSlaveUntilAfterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	if m.WaitTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.WaitTimeout))
	}
	return i, nil
}

func (m *StartSlaveUntilAfterResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartSlaveUntilAfterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TabletExternallyReparentedRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletExternallyReparentedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.ExternalId)))
		i += copy(dAtA[i:], m.ExternalId)
	}
	return i, nil
}

func (m *TabletExternallyReparentedResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletExternallyReparentedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TabletExternallyElectedRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletExternallyElectedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TabletExternallyElectedResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletExternallyElectedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetSlavesRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSlavesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetSlavesResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSlavesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResetReplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetReplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResetReplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetReplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VReplicationExecRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VReplicationExecRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	return i, nil
}

func (m *VReplicationExecResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VReplicationExecResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Result.ProtoSize()))
		n13, err13 := m.Result.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	return i, nil
}

func (m *VReplicationWaitForPosRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VReplicationWaitForPosRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Id))
	}
	if len(m.Position) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *VReplicationWaitForPosResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VReplicationWaitForPosResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InitMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InitMasterResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitMasterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *PopulateReparentJournalRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopulateReparentJournalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeCreatedNs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.TimeCreatedNs))
	}
	if len(m.ActionName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.ActionName)))
		i += copy(dAtA[i:], m.ActionName)
	}
	if m.MasterAlias != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.MasterAlias.ProtoSize()))
		n14, err14 := m.MasterAlias.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	if len(m.ReplicationPosition) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.ReplicationPosition)))
		i += copy(dAtA[i:], m.ReplicationPosition)
	}
	return i, nil
}

func (m *PopulateReparentJournalResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopulateReparentJournalResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InitSlaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitSlaveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Parent.ProtoSize()))
		n15, err15 := m.Parent.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	if len(m.ReplicationPosition) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.ReplicationPosition)))
		i += copy(dAtA[i:], m.ReplicationPosition)
	}
	if m.TimeCreatedNs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.TimeCreatedNs))
	}
	return i, nil
}

func (m *InitSlaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitSlaveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DemoteMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemoteMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DemoteMasterResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemoteMasterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *UndoDemoteMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndoDemoteMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UndoDemoteMasterResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndoDemoteMasterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PromoteSlaveWhenCaughtUpRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteSlaveWhenCaughtUpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *PromoteSlaveWhenCaughtUpResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteSlaveWhenCaughtUpResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *SlaveWasPromotedRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveWasPromotedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SlaveWasPromotedResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveWasPromotedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Parent.ProtoSize()))
		n16, err16 := m.Parent.MarshalTo(dAtA[i:])
		if err16 != nil {
			return 0, err16
		}
		i += n16
	}
	if m.TimeCreatedNs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.TimeCreatedNs))
	}
	if m.ForceStartSlave {
		dAtA[i] = 0x18
		i++
		if m.ForceStartSlave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetMasterResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMasterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SlaveWasRestartedRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveWasRestartedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Parent.ProtoSize()))
		n17, err17 := m.Parent.MarshalTo(dAtA[i:])
		if err17 != nil {
			return 0, err17
		}
		i += n17
	}
	return i, nil
}

func (m *SlaveWasRestartedResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveWasRestartedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StopReplicationAndGetStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopReplicationAndGetStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StopReplicationAndGetStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopReplicationAndGetStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Status.ProtoSize()))
		n18, err18 := m.Status.MarshalTo(dAtA[i:])
		if err18 != nil {
			return 0, err18
		}
		i += n18
	}
	return i, nil
}

func (m *PromoteSlaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteSlaveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PromoteSlaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoteSlaveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	return i, nil
}

func (m *BackupRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Concurrency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Concurrency))
	}
	if m.AllowMaster {
		dAtA[i] = 0x10
		i++
		if m.AllowMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BackupResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Event.ProtoSize()))
		n19, err19 := m.Event.MarshalTo(dAtA[i:])
		if err19 != nil {
			return 0, err19
		}
		i += n19
	}
	return i, nil
}

func (m *RestoreFromBackupRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreFromBackupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RestoreFromBackupResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreFromBackupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTabletmanagerdata(dAtA, i, uint64(m.Event.ProtoSize()))
		n20, err20 := m.Event.MarshalTo(dAtA[i:])
		if err20 != nil {
			return 0, err20
		}
		i += n20
	}
	return i, nil
}

func encodeVarintTabletmanagerdata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableDefinition) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	if len(m.PrimaryKeyColumns) > 0 {
		for _, s := range m.PrimaryKeyColumns {
			l = len(s)
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.DataLength != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.DataLength))
	}
	if m.RowCount != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.RowCount))
	}
	return n
}

func (m *SchemaDefinition) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatabaseSchema)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if len(m.TableDefinitions) > 0 {
		for _, e := range m.TableDefinitions {
			l = e.ProtoSize()
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *SchemaChangeResult) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeforeSchema != nil {
		l = m.BeforeSchema.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.AfterSchema != nil {
		l = m.AfterSchema.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *UserPermission) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.PasswordChecksum != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.PasswordChecksum))
	}
	if len(m.Privileges) > 0 {
		for k, v := range m.Privileges {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTabletmanagerdata(uint64(len(k))) + 1 + len(v) + sovTabletmanagerdata(uint64(len(v)))
			n += mapEntrySize + 1 + sovTabletmanagerdata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DbPermission) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if len(m.Privileges) > 0 {
		for k, v := range m.Privileges {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTabletmanagerdata(uint64(len(k))) + 1 + len(v) + sovTabletmanagerdata(uint64(len(v)))
			n += mapEntrySize + 1 + sovTabletmanagerdata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Permissions) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserPermissions) > 0 {
		for _, e := range m.UserPermissions {
			l = e.ProtoSize()
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	if len(m.DbPermissions) > 0 {
		for _, e := range m.DbPermissions {
			l = e.ProtoSize()
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	return n
}

func (m *PingRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *PingResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *SleepRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.Duration))
	}
	return n
}

func (m *SleepResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExecuteHookRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, s := range m.Parameters {
			l = len(s)
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	if len(m.ExtraEnv) > 0 {
		for k, v := range m.ExtraEnv {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTabletmanagerdata(uint64(len(k))) + 1 + len(v) + sovTabletmanagerdata(uint64(len(v)))
			n += mapEntrySize + 1 + sovTabletmanagerdata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ExecuteHookResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExitStatus != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.ExitStatus))
	}
	l = len(m.Stdout)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.Stderr)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *GetSchemaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for _, s := range m.Tables {
			l = len(s)
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	if m.IncludeViews {
		n += 2
	}
	if len(m.ExcludeTables) > 0 {
		for _, s := range m.ExcludeTables {
			l = len(s)
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	return n
}

func (m *GetSchemaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemaDefinition != nil {
		l = m.SchemaDefinition.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *GetPermissionsRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPermissionsResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != nil {
		l = m.Permissions.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *SetReadOnlyRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetReadOnlyResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetReadWriteRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetReadWriteResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChangeTypeRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabletType != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.TabletType))
	}
	return n
}

func (m *ChangeTypeResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RefreshStateRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RefreshStateResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RunHealthCheckRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RunHealthCheckResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IgnoreHealthErrorRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *IgnoreHealthErrorResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReloadSchemaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WaitPosition)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *ReloadSchemaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PreflightSchemaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, s := range m.Changes {
			l = len(s)
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	return n
}

func (m *PreflightSchemaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChangeResults) > 0 {
		for _, e := range m.ChangeResults {
			l = e.ProtoSize()
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	return n
}

func (m *ApplySchemaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.Force {
		n += 2
	}
	if m.AllowReplication {
		n += 2
	}
	if m.BeforeSchema != nil {
		l = m.BeforeSchema.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.AfterSchema != nil {
		l = m.AfterSchema.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *ApplySchemaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeforeSchema != nil {
		l = m.BeforeSchema.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.AfterSchema != nil {
		l = m.AfterSchema.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *LockTablesRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LockTablesResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnlockTablesRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnlockTablesResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExecuteFetchAsDbaRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.MaxRows != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.MaxRows))
	}
	if m.DisableBinlogs {
		n += 2
	}
	if m.ReloadSchema {
		n += 2
	}
	return n
}

func (m *ExecuteFetchAsDbaResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *ExecuteFetchAsAllPrivsRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.MaxRows != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.MaxRows))
	}
	if m.ReloadSchema {
		n += 2
	}
	return n
}

func (m *ExecuteFetchAsAllPrivsResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *ExecuteFetchAsAppRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.MaxRows != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.MaxRows))
	}
	return n
}

func (m *ExecuteFetchAsAppResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *SlaveStatusRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SlaveStatusResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *MasterPositionRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MasterPositionResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *StopSlaveRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopSlaveResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopSlaveMinimumRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.WaitTimeout != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.WaitTimeout))
	}
	return n
}

func (m *StopSlaveMinimumResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *StartSlaveRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StartSlaveResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StartSlaveUntilAfterRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.WaitTimeout != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.WaitTimeout))
	}
	return n
}

func (m *StartSlaveUntilAfterResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TabletExternallyReparentedRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *TabletExternallyReparentedResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TabletExternallyElectedRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TabletExternallyElectedResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSlavesRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetSlavesResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovTabletmanagerdata(uint64(l))
		}
	}
	return n
}

func (m *ResetReplicationRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResetReplicationResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VReplicationExecRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *VReplicationExecResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *VReplicationWaitForPosRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.Id))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *VReplicationWaitForPosResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitMasterRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitMasterResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *PopulateReparentJournalRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeCreatedNs != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.TimeCreatedNs))
	}
	l = len(m.ActionName)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.MasterAlias != nil {
		l = m.MasterAlias.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.ReplicationPosition)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *PopulateReparentJournalResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitSlaveRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parent != nil {
		l = m.Parent.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	l = len(m.ReplicationPosition)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.TimeCreatedNs != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.TimeCreatedNs))
	}
	return n
}

func (m *InitSlaveResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DemoteMasterRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DemoteMasterResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *UndoDemoteMasterRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UndoDemoteMasterResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PromoteSlaveWhenCaughtUpRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *PromoteSlaveWhenCaughtUpResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *SlaveWasPromotedRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SlaveWasPromotedResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetMasterRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parent != nil {
		l = m.Parent.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	if m.TimeCreatedNs != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.TimeCreatedNs))
	}
	if m.ForceStartSlave {
		n += 2
	}
	return n
}

func (m *SetMasterResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SlaveWasRestartedRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parent != nil {
		l = m.Parent.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *SlaveWasRestartedResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopReplicationAndGetStatusRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopReplicationAndGetStatusResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *PromoteSlaveRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PromoteSlaveResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *BackupRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Concurrency != 0 {
		n += 1 + sovTabletmanagerdata(uint64(m.Concurrency))
	}
	if m.AllowMaster {
		n += 2
	}
	return n
}

func (m *BackupResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func (m *RestoreFromBackupRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RestoreFromBackupResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.ProtoSize()
		n += 1 + l + sovTabletmanagerdata(uint64(l))
	}
	return n
}

func sovTabletmanagerdata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTabletmanagerdata(x uint64) (n int) {
	return sovTabletmanagerdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TableDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableDefinition{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Schema:` + fmt.Sprintf("%v", this.Schema) + `,`,
		`Columns:` + fmt.Sprintf("%v", this.Columns) + `,`,
		`PrimaryKeyColumns:` + fmt.Sprintf("%v", this.PrimaryKeyColumns) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DataLength:` + fmt.Sprintf("%v", this.DataLength) + `,`,
		`RowCount:` + fmt.Sprintf("%v", this.RowCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaDefinition) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTableDefinitions := "[]*TableDefinition{"
	for _, f := range this.TableDefinitions {
		repeatedStringForTableDefinitions += strings.Replace(f.String(), "TableDefinition", "TableDefinition", 1) + ","
	}
	repeatedStringForTableDefinitions += "}"
	s := strings.Join([]string{`&SchemaDefinition{`,
		`DatabaseSchema:` + fmt.Sprintf("%v", this.DatabaseSchema) + `,`,
		`TableDefinitions:` + repeatedStringForTableDefinitions + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaChangeResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaChangeResult{`,
		`BeforeSchema:` + strings.Replace(this.BeforeSchema.String(), "SchemaDefinition", "SchemaDefinition", 1) + `,`,
		`AfterSchema:` + strings.Replace(this.AfterSchema.String(), "SchemaDefinition", "SchemaDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserPermission) String() string {
	if this == nil {
		return "nil"
	}
	keysForPrivileges := make([]string, 0, len(this.Privileges))
	for k := range this.Privileges {
		keysForPrivileges = append(keysForPrivileges, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPrivileges)
	mapStringForPrivileges := "map[string]string{"
	for _, k := range keysForPrivileges {
		mapStringForPrivileges += fmt.Sprintf("%v: %v,", k, this.Privileges[k])
	}
	mapStringForPrivileges += "}"
	s := strings.Join([]string{`&UserPermission{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`PasswordChecksum:` + fmt.Sprintf("%v", this.PasswordChecksum) + `,`,
		`Privileges:` + mapStringForPrivileges + `,`,
		`}`,
	}, "")
	return s
}
func (this *DbPermission) String() string {
	if this == nil {
		return "nil"
	}
	keysForPrivileges := make([]string, 0, len(this.Privileges))
	for k := range this.Privileges {
		keysForPrivileges = append(keysForPrivileges, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPrivileges)
	mapStringForPrivileges := "map[string]string{"
	for _, k := range keysForPrivileges {
		mapStringForPrivileges += fmt.Sprintf("%v: %v,", k, this.Privileges[k])
	}
	mapStringForPrivileges += "}"
	s := strings.Join([]string{`&DbPermission{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Db:` + fmt.Sprintf("%v", this.Db) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Privileges:` + mapStringForPrivileges + `,`,
		`}`,
	}, "")
	return s
}
func (this *Permissions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserPermissions := "[]*UserPermission{"
	for _, f := range this.UserPermissions {
		repeatedStringForUserPermissions += strings.Replace(f.String(), "UserPermission", "UserPermission", 1) + ","
	}
	repeatedStringForUserPermissions += "}"
	repeatedStringForDbPermissions := "[]*DbPermission{"
	for _, f := range this.DbPermissions {
		repeatedStringForDbPermissions += strings.Replace(f.String(), "DbPermission", "DbPermission", 1) + ","
	}
	repeatedStringForDbPermissions += "}"
	s := strings.Join([]string{`&Permissions{`,
		`UserPermissions:` + repeatedStringForUserPermissions + `,`,
		`DbPermissions:` + repeatedStringForDbPermissions + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SleepRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SleepRequest{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SleepResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SleepResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteHookRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForExtraEnv := make([]string, 0, len(this.ExtraEnv))
	for k := range this.ExtraEnv {
		keysForExtraEnv = append(keysForExtraEnv, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExtraEnv)
	mapStringForExtraEnv := "map[string]string{"
	for _, k := range keysForExtraEnv {
		mapStringForExtraEnv += fmt.Sprintf("%v: %v,", k, this.ExtraEnv[k])
	}
	mapStringForExtraEnv += "}"
	s := strings.Join([]string{`&ExecuteHookRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Parameters:` + fmt.Sprintf("%v", this.Parameters) + `,`,
		`ExtraEnv:` + mapStringForExtraEnv + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteHookResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteHookResponse{`,
		`ExitStatus:` + fmt.Sprintf("%v", this.ExitStatus) + `,`,
		`Stdout:` + fmt.Sprintf("%v", this.Stdout) + `,`,
		`Stderr:` + fmt.Sprintf("%v", this.Stderr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSchemaRequest{`,
		`Tables:` + fmt.Sprintf("%v", this.Tables) + `,`,
		`IncludeViews:` + fmt.Sprintf("%v", this.IncludeViews) + `,`,
		`ExcludeTables:` + fmt.Sprintf("%v", this.ExcludeTables) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSchemaResponse{`,
		`SchemaDefinition:` + strings.Replace(this.SchemaDefinition.String(), "SchemaDefinition", "SchemaDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPermissionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPermissionsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetPermissionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPermissionsResponse{`,
		`Permissions:` + strings.Replace(this.Permissions.String(), "Permissions", "Permissions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetReadOnlyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReadOnlyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SetReadOnlyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReadOnlyResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetReadWriteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReadWriteRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SetReadWriteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReadWriteResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ChangeTypeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeTypeRequest{`,
		`TabletType:` + fmt.Sprintf("%v", this.TabletType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeTypeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeTypeResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RefreshStateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshStateRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RefreshStateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshStateResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RunHealthCheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunHealthCheckRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RunHealthCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunHealthCheckResponse{`,
		`}`,
	}, "")
	return s
}
func (this *IgnoreHealthErrorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IgnoreHealthErrorRequest{`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IgnoreHealthErrorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IgnoreHealthErrorResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ReloadSchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReloadSchemaRequest{`,
		`WaitPosition:` + fmt.Sprintf("%v", this.WaitPosition) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReloadSchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReloadSchemaResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PreflightSchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PreflightSchemaRequest{`,
		`Changes:` + fmt.Sprintf("%v", this.Changes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PreflightSchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChangeResults := "[]*SchemaChangeResult{"
	for _, f := range this.ChangeResults {
		repeatedStringForChangeResults += strings.Replace(f.String(), "SchemaChangeResult", "SchemaChangeResult", 1) + ","
	}
	repeatedStringForChangeResults += "}"
	s := strings.Join([]string{`&PreflightSchemaResponse{`,
		`ChangeResults:` + repeatedStringForChangeResults + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplySchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplySchemaRequest{`,
		`Sql:` + fmt.Sprintf("%v", this.Sql) + `,`,
		`Force:` + fmt.Sprintf("%v", this.Force) + `,`,
		`AllowReplication:` + fmt.Sprintf("%v", this.AllowReplication) + `,`,
		`BeforeSchema:` + strings.Replace(this.BeforeSchema.String(), "SchemaDefinition", "SchemaDefinition", 1) + `,`,
		`AfterSchema:` + strings.Replace(this.AfterSchema.String(), "SchemaDefinition", "SchemaDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplySchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplySchemaResponse{`,
		`BeforeSchema:` + strings.Replace(this.BeforeSchema.String(), "SchemaDefinition", "SchemaDefinition", 1) + `,`,
		`AfterSchema:` + strings.Replace(this.AfterSchema.String(), "SchemaDefinition", "SchemaDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LockTablesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockTablesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *LockTablesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockTablesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UnlockTablesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlockTablesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *UnlockTablesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlockTablesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteFetchAsDbaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteFetchAsDbaRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`DbName:` + fmt.Sprintf("%v", this.DbName) + `,`,
		`MaxRows:` + fmt.Sprintf("%v", this.MaxRows) + `,`,
		`DisableBinlogs:` + fmt.Sprintf("%v", this.DisableBinlogs) + `,`,
		`ReloadSchema:` + fmt.Sprintf("%v", this.ReloadSchema) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteFetchAsDbaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteFetchAsDbaResponse{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "QueryResult", "query.QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteFetchAsAllPrivsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteFetchAsAllPrivsRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`DbName:` + fmt.Sprintf("%v", this.DbName) + `,`,
		`MaxRows:` + fmt.Sprintf("%v", this.MaxRows) + `,`,
		`ReloadSchema:` + fmt.Sprintf("%v", this.ReloadSchema) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteFetchAsAllPrivsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteFetchAsAllPrivsResponse{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "QueryResult", "query.QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteFetchAsAppRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteFetchAsAppRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`MaxRows:` + fmt.Sprintf("%v", this.MaxRows) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteFetchAsAppResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteFetchAsAppResponse{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "QueryResult", "query.QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlaveStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlaveStatusRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SlaveStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlaveStatusResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "replicationdata.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MasterPositionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MasterPositionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *MasterPositionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MasterPositionResponse{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StopSlaveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopSlaveRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StopSlaveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopSlaveResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StopSlaveMinimumRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopSlaveMinimumRequest{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`WaitTimeout:` + fmt.Sprintf("%v", this.WaitTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StopSlaveMinimumResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopSlaveMinimumResponse{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartSlaveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartSlaveRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StartSlaveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartSlaveResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StartSlaveUntilAfterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartSlaveUntilAfterRequest{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`WaitTimeout:` + fmt.Sprintf("%v", this.WaitTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartSlaveUntilAfterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartSlaveUntilAfterResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TabletExternallyReparentedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TabletExternallyReparentedRequest{`,
		`ExternalId:` + fmt.Sprintf("%v", this.ExternalId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TabletExternallyReparentedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TabletExternallyReparentedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TabletExternallyElectedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TabletExternallyElectedRequest{`,
		`}`,
	}, "")
	return s
}
func (this *TabletExternallyElectedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TabletExternallyElectedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetSlavesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSlavesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetSlavesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSlavesResponse{`,
		`Addrs:` + fmt.Sprintf("%v", this.Addrs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetReplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetReplicationRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ResetReplicationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetReplicationResponse{`,
		`}`,
	}, "")
	return s
}
func (this *VReplicationExecRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VReplicationExecRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VReplicationExecResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VReplicationExecResponse{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "QueryResult", "query.QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VReplicationWaitForPosRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VReplicationWaitForPosRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VReplicationWaitForPosResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VReplicationWaitForPosResponse{`,
		`}`,
	}, "")
	return s
}
func (this *InitMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitMasterRequest{`,
		`}`,
	}, "")
	return s
}
func (this *InitMasterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitMasterResponse{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PopulateReparentJournalRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PopulateReparentJournalRequest{`,
		`TimeCreatedNs:` + fmt.Sprintf("%v", this.TimeCreatedNs) + `,`,
		`ActionName:` + fmt.Sprintf("%v", this.ActionName) + `,`,
		`MasterAlias:` + strings.Replace(fmt.Sprintf("%v", this.MasterAlias), "TabletAlias", "topodata.TabletAlias", 1) + `,`,
		`ReplicationPosition:` + fmt.Sprintf("%v", this.ReplicationPosition) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PopulateReparentJournalResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PopulateReparentJournalResponse{`,
		`}`,
	}, "")
	return s
}
func (this *InitSlaveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitSlaveRequest{`,
		`Parent:` + strings.Replace(fmt.Sprintf("%v", this.Parent), "TabletAlias", "topodata.TabletAlias", 1) + `,`,
		`ReplicationPosition:` + fmt.Sprintf("%v", this.ReplicationPosition) + `,`,
		`TimeCreatedNs:` + fmt.Sprintf("%v", this.TimeCreatedNs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitSlaveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitSlaveResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DemoteMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DemoteMasterRequest{`,
		`}`,
	}, "")
	return s
}
func (this *DemoteMasterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DemoteMasterResponse{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UndoDemoteMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UndoDemoteMasterRequest{`,
		`}`,
	}, "")
	return s
}
func (this *UndoDemoteMasterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UndoDemoteMasterResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PromoteSlaveWhenCaughtUpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteSlaveWhenCaughtUpRequest{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoteSlaveWhenCaughtUpResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteSlaveWhenCaughtUpResponse{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlaveWasPromotedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlaveWasPromotedRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SlaveWasPromotedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlaveWasPromotedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMasterRequest{`,
		`Parent:` + strings.Replace(fmt.Sprintf("%v", this.Parent), "TabletAlias", "topodata.TabletAlias", 1) + `,`,
		`TimeCreatedNs:` + fmt.Sprintf("%v", this.TimeCreatedNs) + `,`,
		`ForceStartSlave:` + fmt.Sprintf("%v", this.ForceStartSlave) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetMasterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetMasterResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SlaveWasRestartedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlaveWasRestartedRequest{`,
		`Parent:` + strings.Replace(fmt.Sprintf("%v", this.Parent), "TabletAlias", "topodata.TabletAlias", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlaveWasRestartedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlaveWasRestartedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StopReplicationAndGetStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopReplicationAndGetStatusRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StopReplicationAndGetStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopReplicationAndGetStatusResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "replicationdata.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoteSlaveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteSlaveRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PromoteSlaveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteSlaveResponse{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BackupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BackupRequest{`,
		`Concurrency:` + fmt.Sprintf("%v", this.Concurrency) + `,`,
		`AllowMaster:` + fmt.Sprintf("%v", this.AllowMaster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BackupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BackupResponse{`,
		`Event:` + strings.Replace(fmt.Sprintf("%v", this.Event), "Event", "logutil.Event", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RestoreFromBackupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RestoreFromBackupRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RestoreFromBackupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RestoreFromBackupResponse{`,
		`Event:` + strings.Replace(fmt.Sprintf("%v", this.Event), "Event", "logutil.Event", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTabletmanagerdata(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TableDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKeyColumns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKeyColumns = append(m.PrimaryKeyColumns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLength", wireType)
			}
			m.DataLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowCount", wireType)
			}
			m.RowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseSchema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableDefinitions = append(m.TableDefinitions, &TableDefinition{})
			if err := m.TableDefinitions[len(m.TableDefinitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaChangeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaChangeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaChangeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeforeSchema == nil {
				m.BeforeSchema = &SchemaDefinition{}
			}
			if err := m.BeforeSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AfterSchema == nil {
				m.AfterSchema = &SchemaDefinition{}
			}
			if err := m.AfterSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordChecksum", wireType)
			}
			m.PasswordChecksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PasswordChecksum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileges == nil {
				m.Privileges = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTabletmanagerdata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTabletmanagerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTabletmanagerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Privileges[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DbPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DbPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DbPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Privileges == nil {
				m.Privileges = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTabletmanagerdata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTabletmanagerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTabletmanagerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Privileges[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPermissions = append(m.UserPermissions, &UserPermission{})
			if err := m.UserPermissions[len(m.UserPermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbPermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbPermissions = append(m.DbPermissions, &DbPermission{})
			if err := m.DbPermissions[len(m.DbPermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SleepRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SleepRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SleepRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SleepResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SleepResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SleepResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteHookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteHookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteHookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraEnv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraEnv == nil {
				m.ExtraEnv = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTabletmanagerdata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTabletmanagerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTabletmanagerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTabletmanagerdata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraEnv[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitStatus", wireType)
			}
			m.ExitStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stderr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeViews", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeViews = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeTables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeTables = append(m.ExcludeTables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchemaDefinition == nil {
				m.SchemaDefinition = &SchemaDefinition{}
			}
			if err := m.SchemaDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPermissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPermissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &Permissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReadOnlyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReadOnlyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReadOnlyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReadOnlyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReadOnlyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReadOnlyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReadWriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReadWriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReadWriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReadWriteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReadWriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReadWriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletType", wireType)
			}
			m.TabletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabletType |= topodata.TabletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunHealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunHealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunHealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunHealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunHealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunHealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IgnoreHealthErrorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IgnoreHealthErrorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IgnoreHealthErrorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IgnoreHealthErrorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IgnoreHealthErrorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IgnoreHealthErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReloadSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReloadSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReloadSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitPosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitPosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReloadSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReloadSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReloadSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreflightSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreflightSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreflightSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreflightSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreflightSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreflightSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeResults = append(m.ChangeResults, &SchemaChangeResult{})
			if err := m.ChangeResults[len(m.ChangeResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplySchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplySchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplySchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowReplication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowReplication = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeforeSchema == nil {
				m.BeforeSchema = &SchemaDefinition{}
			}
			if err := m.BeforeSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AfterSchema == nil {
				m.AfterSchema = &SchemaDefinition{}
			}
			if err := m.AfterSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplySchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplySchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplySchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeforeSchema == nil {
				m.BeforeSchema = &SchemaDefinition{}
			}
			if err := m.BeforeSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AfterSchema == nil {
				m.AfterSchema = &SchemaDefinition{}
			}
			if err := m.AfterSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockTablesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockTablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockTablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockTablesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockTablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockTablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockTablesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockTablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockTablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockTablesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockTablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockTablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteFetchAsDbaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteFetchAsDbaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteFetchAsDbaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRows", wireType)
			}
			m.MaxRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRows |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBinlogs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableBinlogs = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadSchema", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReloadSchema = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteFetchAsDbaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteFetchAsDbaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteFetchAsDbaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &query.QueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteFetchAsAllPrivsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteFetchAsAllPrivsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteFetchAsAllPrivsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRows", wireType)
			}
			m.MaxRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRows |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadSchema", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReloadSchema = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteFetchAsAllPrivsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteFetchAsAllPrivsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteFetchAsAllPrivsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &query.QueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteFetchAsAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteFetchAsAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteFetchAsAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRows", wireType)
			}
			m.MaxRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRows |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteFetchAsAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteFetchAsAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteFetchAsAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &query.QueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &replicationdata.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopSlaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopSlaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopSlaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopSlaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopSlaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopSlaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopSlaveMinimumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopSlaveMinimumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopSlaveMinimumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTimeout", wireType)
			}
			m.WaitTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopSlaveMinimumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopSlaveMinimumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopSlaveMinimumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSlaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSlaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSlaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSlaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSlaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSlaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSlaveUntilAfterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSlaveUntilAfterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSlaveUntilAfterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTimeout", wireType)
			}
			m.WaitTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartSlaveUntilAfterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartSlaveUntilAfterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartSlaveUntilAfterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletExternallyReparentedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletExternallyReparentedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletExternallyReparentedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletExternallyReparentedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletExternallyReparentedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletExternallyReparentedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletExternallyElectedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletExternallyElectedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletExternallyElectedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletExternallyElectedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletExternallyElectedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletExternallyElectedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSlavesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSlavesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSlavesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSlavesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSlavesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSlavesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetReplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetReplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetReplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetReplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetReplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetReplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VReplicationExecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VReplicationExecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VReplicationExecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VReplicationExecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VReplicationExecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VReplicationExecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &query.QueryResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VReplicationWaitForPosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VReplicationWaitForPosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VReplicationWaitForPosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VReplicationWaitForPosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VReplicationWaitForPosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VReplicationWaitForPosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitMasterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitMasterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitMasterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopulateReparentJournalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopulateReparentJournalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopulateReparentJournalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreatedNs", wireType)
			}
			m.TimeCreatedNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeCreatedNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterAlias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MasterAlias == nil {
				m.MasterAlias = &topodata.TabletAlias{}
			}
			if err := m.MasterAlias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationPosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationPosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopulateReparentJournalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopulateReparentJournalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopulateReparentJournalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitSlaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitSlaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitSlaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &topodata.TabletAlias{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationPosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationPosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreatedNs", wireType)
			}
			m.TimeCreatedNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeCreatedNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitSlaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitSlaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitSlaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemoteMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemoteMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemoteMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemoteMasterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemoteMasterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemoteMasterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndoDemoteMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndoDemoteMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndoDemoteMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndoDemoteMasterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndoDemoteMasterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndoDemoteMasterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteSlaveWhenCaughtUpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteSlaveWhenCaughtUpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteSlaveWhenCaughtUpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteSlaveWhenCaughtUpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteSlaveWhenCaughtUpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteSlaveWhenCaughtUpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveWasPromotedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveWasPromotedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveWasPromotedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveWasPromotedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveWasPromotedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveWasPromotedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &topodata.TabletAlias{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreatedNs", wireType)
			}
			m.TimeCreatedNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeCreatedNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceStartSlave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceStartSlave = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMasterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMasterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMasterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveWasRestartedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveWasRestartedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveWasRestartedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &topodata.TabletAlias{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveWasRestartedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveWasRestartedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveWasRestartedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopReplicationAndGetStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopReplicationAndGetStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopReplicationAndGetStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopReplicationAndGetStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopReplicationAndGetStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopReplicationAndGetStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &replicationdata.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteSlaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteSlaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteSlaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteSlaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteSlaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteSlaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Concurrency", wireType)
			}
			m.Concurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Concurrency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMaster = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &logutil.Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreFromBackupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreFromBackupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreFromBackupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreFromBackupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreFromBackupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreFromBackupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &logutil.Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTabletmanagerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTabletmanagerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTabletmanagerdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTabletmanagerdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTabletmanagerdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTabletmanagerdata
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTabletmanagerdata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTabletmanagerdata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTabletmanagerdata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTabletmanagerdata
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTabletmanagerdata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTabletmanagerdata   = fmt.Errorf("proto: integer overflow")
)
