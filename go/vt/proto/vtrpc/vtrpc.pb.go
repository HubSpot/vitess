// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vtrpc.proto

package vtrpc

import (
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Code represents canonical error codes. The names, numbers and comments
// must match the ones defined by grpc:
// https://godoc.org/google.golang.org/grpc/codes.
type Code int32

const (
	// OK is returned on success.
	Code_OK Code = 0
	// CANCELED indicates the operation was cancelled (typically by the caller).
	Code_CANCELED Code = 1
	// UNKNOWN error. An example of where this error may be returned is
	// if a Status value received from another address space belongs to
	// an error-space that is not known in this address space. Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	Code_UNKNOWN Code = 2
	// INVALID_ARGUMENT indicates client specified an invalid argument.
	// Note that this differs from FAILED_PRECONDITION. It indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	Code_INVALID_ARGUMENT Code = 3
	// DEADLINE_EXCEEDED means operation expired before completion.
	// For operations that change the state of the system, this error may be
	// returned even if the operation has completed successfully. For
	// example, a successful response from a server could have been delayed
	// long enough for the deadline to expire.
	Code_DEADLINE_EXCEEDED Code = 4
	// NOT_FOUND means some requested entity (e.g., file or directory) was
	// not found.
	Code_NOT_FOUND Code = 5
	// ALREADY_EXISTS means an attempt to create an entity failed because one
	// already exists.
	Code_ALREADY_EXISTS Code = 6
	// PERMISSION_DENIED indicates the caller does not have permission to
	// execute the specified operation. It must not be used for rejections
	// caused by exhausting some resource (use RESOURCE_EXHAUSTED
	// instead for those errors).  It must not be
	// used if the caller cannot be identified (use Unauthenticated
	// instead for those errors).
	Code_PERMISSION_DENIED Code = 7
	// UNAUTHENTICATED indicates the request does not have valid
	// authentication credentials for the operation.
	Code_UNAUTHENTICATED Code = 16
	// RESOURCE_EXHAUSTED indicates some resource has been exhausted, perhaps
	// a per-user quota, or perhaps the entire file system is out of space.
	Code_RESOURCE_EXHAUSTED Code = 8
	// FAILED_PRECONDITION indicates operation was rejected because the
	// system is not in a state required for the operation's execution.
	// For example, directory to be deleted may be non-empty, an rmdir
	// operation is applied to a non-directory, etc.
	//
	// A litmus test that may help a service implementor in deciding
	// between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
	//  (a) Use UNAVAILABLE if the client can retry just the failing call.
	//  (b) Use ABORTED if the client should retry at a higher-level
	//      (e.g., restarting a read-modify-write sequence).
	//  (c) Use FAILED_PRECONDITION if the client should not retry until
	//      the system state has been explicitly fixed.  E.g., if an "rmdir"
	//      fails because the directory is non-empty, FAILED_PRECONDITION
	//      should be returned since the client should not retry unless
	//      they have first fixed up the directory by deleting files from it.
	//  (d) Use FAILED_PRECONDITION if the client performs conditional
	//      REST Get/Update/Delete on a resource and the resource on the
	//      server does not match the condition. E.g., conflicting
	//      read-modify-write on the same resource.
	Code_FAILED_PRECONDITION Code = 9
	// ABORTED indicates the operation was aborted, typically due to a
	// concurrency issue like sequencer check failures, transaction aborts,
	// etc.
	//
	// See litmus test above for deciding between FAILED_PRECONDITION,
	// ABORTED, and UNAVAILABLE.
	Code_ABORTED Code = 10
	// OUT_OF_RANGE means operation was attempted past the valid range.
	// E.g., seeking or reading past end of file.
	//
	// Unlike INVALID_ARGUMENT, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate INVALID_ARGUMENT if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// OUT_OF_RANGE if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between FAILED_PRECONDITION and
	// OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an OUT_OF_RANGE error to detect when
	// they are done.
	Code_OUT_OF_RANGE Code = 11
	// UNIMPLEMENTED indicates operation is not implemented or not
	// supported/enabled in this service.
	Code_UNIMPLEMENTED Code = 12
	// INTERNAL errors. Means some invariants expected by underlying
	// system has been broken.  If you see one of these errors,
	// something is very broken.
	Code_INTERNAL Code = 13
	// UNAVAILABLE indicates the service is currently unavailable.
	// This is a most likely a transient condition and may be corrected
	// by retrying with a backoff.
	//
	// See litmus test above for deciding between FAILED_PRECONDITION,
	// ABORTED, and UNAVAILABLE.
	Code_UNAVAILABLE Code = 14
	// DATA_LOSS indicates unrecoverable data loss or corruption.
	Code_DATA_LOSS Code = 15
)

var Code_name = map[int32]string{
	0:  "OK",
	1:  "CANCELED",
	2:  "UNKNOWN",
	3:  "INVALID_ARGUMENT",
	4:  "DEADLINE_EXCEEDED",
	5:  "NOT_FOUND",
	6:  "ALREADY_EXISTS",
	7:  "PERMISSION_DENIED",
	16: "UNAUTHENTICATED",
	8:  "RESOURCE_EXHAUSTED",
	9:  "FAILED_PRECONDITION",
	10: "ABORTED",
	11: "OUT_OF_RANGE",
	12: "UNIMPLEMENTED",
	13: "INTERNAL",
	14: "UNAVAILABLE",
	15: "DATA_LOSS",
}

var Code_value = map[string]int32{
	"OK":                  0,
	"CANCELED":            1,
	"UNKNOWN":             2,
	"INVALID_ARGUMENT":    3,
	"DEADLINE_EXCEEDED":   4,
	"NOT_FOUND":           5,
	"ALREADY_EXISTS":      6,
	"PERMISSION_DENIED":   7,
	"UNAUTHENTICATED":     16,
	"RESOURCE_EXHAUSTED":  8,
	"FAILED_PRECONDITION": 9,
	"ABORTED":             10,
	"OUT_OF_RANGE":        11,
	"UNIMPLEMENTED":       12,
	"INTERNAL":            13,
	"UNAVAILABLE":         14,
	"DATA_LOSS":           15,
}

func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_750b4cf641561858, []int{0}
}

// LegacyErrorCode is the enum values for Errors. This type is deprecated.
// Use Code instead. Background: In the initial design, we thought
// that we may end up with a different list of canonical error codes
// than the ones defined by grpc. In hindisght, we realize that
// the grpc error codes are fairly generic and mostly sufficient.
// In order to avoid confusion, this type will be deprecated in
// favor of the new Code that matches exactly what grpc defines.
// Some names below have a _LEGACY suffix. This is to prevent
// name collisions with Code.
type LegacyErrorCode int32

const (
	// SUCCESS_LEGACY is returned from a successful call.
	LegacyErrorCode_SUCCESS_LEGACY LegacyErrorCode = 0
	// CANCELLED_LEGACY means that the context was cancelled (and noticed in the app layer,
	// as opposed to the RPC layer).
	LegacyErrorCode_CANCELLED_LEGACY LegacyErrorCode = 1
	// UNKNOWN_ERROR_LEGACY includes:
	// 1. MySQL error codes that we don't explicitly handle.
	// 2. MySQL response that wasn't as expected. For example, we might expect a MySQL
	//  timestamp to be returned in a particular way, but it wasn't.
	// 3. Anything else that doesn't fall into a different bucket.
	LegacyErrorCode_UNKNOWN_ERROR_LEGACY LegacyErrorCode = 2
	// BAD_INPUT_LEGACY is returned when an end-user either sends SQL that couldn't be parsed correctly,
	// or tries a query that isn't supported by Vitess.
	LegacyErrorCode_BAD_INPUT_LEGACY LegacyErrorCode = 3
	// DEADLINE_EXCEEDED_LEGACY is returned when an action is taking longer than a given timeout.
	LegacyErrorCode_DEADLINE_EXCEEDED_LEGACY LegacyErrorCode = 4
	// INTEGRITY_ERROR_LEGACY is returned on integrity error from MySQL, usually due to
	// duplicate primary keys.
	LegacyErrorCode_INTEGRITY_ERROR_LEGACY LegacyErrorCode = 5
	// PERMISSION_DENIED_LEGACY errors are returned when a user requests access to something
	// that they don't have permissions for.
	LegacyErrorCode_PERMISSION_DENIED_LEGACY LegacyErrorCode = 6
	// RESOURCE_EXHAUSTED_LEGACY is returned when a query exceeds its quota in some dimension
	// and can't be completed due to that. Queries that return RESOURCE_EXHAUSTED
	// should not be retried, as it could be detrimental to the server's health.
	// Examples of errors that will cause the RESOURCE_EXHAUSTED code:
	// 1. TxPoolFull: this is retried server-side, and is only returned as an error
	//  if the server-side retries failed.
	// 2. Query is killed due to it taking too long.
	LegacyErrorCode_RESOURCE_EXHAUSTED_LEGACY LegacyErrorCode = 7
	// QUERY_NOT_SERVED_LEGACY means that a query could not be served right now.
	// Client can interpret it as: "the tablet that you sent this query to cannot
	// serve the query right now, try a different tablet or try again later."
	// This could be due to various reasons: QueryService is not serving, should
	// not be serving, wrong shard, wrong tablet type, blacklisted table, etc.
	// Clients that receive this error should usually retry the query, but after taking
	// the appropriate steps to make sure that the query will get sent to the correct
	// tablet.
	LegacyErrorCode_QUERY_NOT_SERVED_LEGACY LegacyErrorCode = 8
	// NOT_IN_TX_LEGACY means that we're not currently in a transaction, but we should be.
	LegacyErrorCode_NOT_IN_TX_LEGACY LegacyErrorCode = 9
	// INTERNAL_ERROR_LEGACY means some invariants expected by underlying
	// system has been broken.  If you see one of these errors,
	// something is very broken.
	LegacyErrorCode_INTERNAL_ERROR_LEGACY LegacyErrorCode = 10
	// TRANSIENT_ERROR_LEGACY is used for when there is some error that we expect we can
	// recover from automatically - often due to a resource limit temporarily being
	// reached. Retrying this error, with an exponential backoff, should succeed.
	// Clients should be able to successfully retry the query on the same backends.
	// Examples of things that can trigger this error:
	// 1. Query has been throttled
	// 2. VtGate could have request backlog
	LegacyErrorCode_TRANSIENT_ERROR_LEGACY LegacyErrorCode = 11
	// UNAUTHENTICATED_LEGACY errors are returned when a user requests access to something,
	// and we're unable to verify the user's authentication.
	LegacyErrorCode_UNAUTHENTICATED_LEGACY LegacyErrorCode = 12
)

var LegacyErrorCode_name = map[int32]string{
	0:  "SUCCESS_LEGACY",
	1:  "CANCELLED_LEGACY",
	2:  "UNKNOWN_ERROR_LEGACY",
	3:  "BAD_INPUT_LEGACY",
	4:  "DEADLINE_EXCEEDED_LEGACY",
	5:  "INTEGRITY_ERROR_LEGACY",
	6:  "PERMISSION_DENIED_LEGACY",
	7:  "RESOURCE_EXHAUSTED_LEGACY",
	8:  "QUERY_NOT_SERVED_LEGACY",
	9:  "NOT_IN_TX_LEGACY",
	10: "INTERNAL_ERROR_LEGACY",
	11: "TRANSIENT_ERROR_LEGACY",
	12: "UNAUTHENTICATED_LEGACY",
}

var LegacyErrorCode_value = map[string]int32{
	"SUCCESS_LEGACY":            0,
	"CANCELLED_LEGACY":          1,
	"UNKNOWN_ERROR_LEGACY":      2,
	"BAD_INPUT_LEGACY":          3,
	"DEADLINE_EXCEEDED_LEGACY":  4,
	"INTEGRITY_ERROR_LEGACY":    5,
	"PERMISSION_DENIED_LEGACY":  6,
	"RESOURCE_EXHAUSTED_LEGACY": 7,
	"QUERY_NOT_SERVED_LEGACY":   8,
	"NOT_IN_TX_LEGACY":          9,
	"INTERNAL_ERROR_LEGACY":     10,
	"TRANSIENT_ERROR_LEGACY":    11,
	"UNAUTHENTICATED_LEGACY":    12,
}

func (LegacyErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_750b4cf641561858, []int{1}
}

// CallerID is passed along RPCs to identify the originating client
// for a request. It is not meant to be secure, but only
// informational.  The client can put whatever info they want in these
// fields, and they will be trusted by the servers. The fields will
// just be used for logging purposes, and to easily find a client.
// VtGate propagates it to VtTablet, and VtTablet may use this
// information for monitoring purposes, to display on dashboards, or
// for blacklisting purposes.
type CallerID struct {
	// principal is the effective user identifier. It is usually filled in
	// with whoever made the request to the appserver, if the request
	// came from an automated job or another system component.
	// If the request comes directly from the Internet, or if the Vitess client
	// takes action on its own accord, it is okay for this field to be absent.
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// component describes the running process of the effective caller.
	// It can for instance be the hostname:port of the servlet initiating the
	// database call, or the container engine ID used by the servlet.
	Component string `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
	// subcomponent describes a component inisde the immediate caller which
	// is responsible for generating is request. Suggested values are a
	// servlet name or an API endpoint name.
	Subcomponent string `protobuf:"bytes,3,opt,name=subcomponent,proto3" json:"subcomponent,omitempty"`
}

func (m *CallerID) Reset()      { *m = CallerID{} }
func (*CallerID) ProtoMessage() {}
func (*CallerID) Descriptor() ([]byte, []int) {
	return fileDescriptor_750b4cf641561858, []int{0}
}
func (m *CallerID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallerID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallerID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallerID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallerID.Merge(m, src)
}
func (m *CallerID) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CallerID) XXX_DiscardUnknown() {
	xxx_messageInfo_CallerID.DiscardUnknown(m)
}

var xxx_messageInfo_CallerID proto.InternalMessageInfo

func (m *CallerID) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

func (m *CallerID) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *CallerID) GetSubcomponent() string {
	if m != nil {
		return m.Subcomponent
	}
	return ""
}

// RPCError is an application-level error structure returned by
// VtTablet (and passed along by VtGate if appropriate).
// We use this so the clients don't have to parse the error messages,
// but instead can depend on the value of the code.
type RPCError struct {
	LegacyCode LegacyErrorCode `protobuf:"varint,1,opt,name=legacy_code,json=legacyCode,proto3,enum=vtrpc.LegacyErrorCode" json:"legacy_code,omitempty"`
	Message    string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code       Code            `protobuf:"varint,3,opt,name=code,proto3,enum=vtrpc.Code" json:"code,omitempty"`
}

func (m *RPCError) Reset()      { *m = RPCError{} }
func (*RPCError) ProtoMessage() {}
func (*RPCError) Descriptor() ([]byte, []int) {
	return fileDescriptor_750b4cf641561858, []int{1}
}
func (m *RPCError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCError.Merge(m, src)
}
func (m *RPCError) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RPCError) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCError.DiscardUnknown(m)
}

var xxx_messageInfo_RPCError proto.InternalMessageInfo

func (m *RPCError) GetLegacyCode() LegacyErrorCode {
	if m != nil {
		return m.LegacyCode
	}
	return LegacyErrorCode_SUCCESS_LEGACY
}

func (m *RPCError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RPCError) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_OK
}

func init() {
	proto.RegisterEnum("vtrpc.Code", Code_name, Code_value)
	proto.RegisterEnum("vtrpc.LegacyErrorCode", LegacyErrorCode_name, LegacyErrorCode_value)
	proto.RegisterType((*CallerID)(nil), "vtrpc.CallerID")
	proto.RegisterType((*RPCError)(nil), "vtrpc.RPCError")
}

func init() { proto.RegisterFile("vtrpc.proto", fileDescriptor_750b4cf641561858) }

var fileDescriptor_750b4cf641561858 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcf, 0x4e, 0xe3, 0x48,
	0x10, 0xc6, 0xe3, 0x24, 0xe4, 0x4f, 0x25, 0x90, 0xa6, 0xf9, 0x17, 0x76, 0x59, 0xef, 0x2a, 0xa7,
	0x15, 0x07, 0x22, 0xed, 0x1e, 0xf6, 0xdc, 0x71, 0x17, 0xa1, 0x85, 0x69, 0x67, 0xdb, 0x36, 0x4b,
	0xf6, 0xd2, 0x0a, 0xc1, 0x42, 0x19, 0x05, 0x1c, 0x25, 0x19, 0xa4, 0xb9, 0x8c, 0xe6, 0x11, 0xe6,
	0x11, 0xe6, 0x38, 0x4f, 0x30, 0xcf, 0x30, 0x47, 0x8e, 0x5c, 0x49, 0x2e, 0x1c, 0x79, 0x84, 0x51,
	0x3b, 0xf1, 0xa0, 0xc0, 0xcd, 0xf5, 0xfd, 0xca, 0xd5, 0x5f, 0x7d, 0xad, 0x86, 0xca, 0xdd, 0x74,
	0x3c, 0xea, 0x1f, 0x8d, 0xc6, 0xf1, 0x34, 0xa6, 0x6b, 0x49, 0xd1, 0x78, 0x07, 0x25, 0xa7, 0x37,
	0x1c, 0x46, 0x63, 0xc1, 0xe9, 0x01, 0x94, 0x47, 0xe3, 0xc1, 0x6d, 0x7f, 0x30, 0xea, 0x0d, 0xeb,
	0xd6, 0x1f, 0xd6, 0x9f, 0x65, 0xf5, 0x22, 0x18, 0xda, 0x8f, 0x6f, 0x46, 0xf1, 0x6d, 0x74, 0x3b,
	0xad, 0x67, 0x17, 0xf4, 0xa7, 0x40, 0x1b, 0x50, 0x9d, 0xbc, 0xbf, 0x7c, 0x69, 0xc8, 0x25, 0x0d,
	0x2b, 0x5a, 0xe3, 0x23, 0x94, 0x54, 0xc7, 0xc1, 0xf1, 0x38, 0x1e, 0xd3, 0x7f, 0xa0, 0x32, 0x8c,
	0xae, 0x7b, 0xfd, 0x0f, 0xba, 0x1f, 0x5f, 0x45, 0xc9, 0x69, 0x1b, 0x7f, 0xed, 0x1e, 0x2d, 0x1c,
	0xba, 0x09, 0x49, 0x1a, 0x9d, 0xf8, 0x2a, 0x52, 0xb0, 0x68, 0x35, 0xdf, 0xb4, 0x0e, 0xc5, 0x9b,
	0x68, 0x32, 0xe9, 0x5d, 0x47, 0x4b, 0x13, 0x69, 0x49, 0x7f, 0x87, 0x7c, 0x32, 0x2b, 0x97, 0xcc,
	0xaa, 0x2c, 0x67, 0x25, 0x03, 0x12, 0x70, 0xf8, 0x2d, 0x0b, 0xf9, 0x64, 0x46, 0x01, 0xb2, 0xde,
	0x29, 0xc9, 0xd0, 0x2a, 0x94, 0x1c, 0x26, 0x1d, 0x74, 0x91, 0x13, 0x8b, 0x56, 0xa0, 0x18, 0xca,
	0x53, 0xe9, 0xfd, 0x27, 0x49, 0x96, 0x6e, 0x03, 0x11, 0xf2, 0x9c, 0xb9, 0x82, 0x6b, 0xa6, 0xda,
	0xe1, 0x19, 0xca, 0x80, 0xe4, 0xe8, 0x0e, 0x6c, 0x72, 0x64, 0xdc, 0x15, 0x12, 0x35, 0x5e, 0x38,
	0x88, 0x1c, 0x39, 0xc9, 0xd3, 0x75, 0x28, 0x4b, 0x2f, 0xd0, 0xc7, 0x5e, 0x28, 0x39, 0x59, 0xa3,
	0x14, 0x36, 0x98, 0xab, 0x90, 0xf1, 0xae, 0xc6, 0x0b, 0xe1, 0x07, 0x3e, 0x29, 0x98, 0x3f, 0x3b,
	0xa8, 0xce, 0x84, 0xef, 0x0b, 0x4f, 0x6a, 0x8e, 0x52, 0x20, 0x27, 0x45, 0xba, 0x05, 0xb5, 0x50,
	0xb2, 0x30, 0x38, 0x41, 0x19, 0x08, 0x87, 0x05, 0xc8, 0x09, 0xa1, 0xbb, 0x40, 0x15, 0xfa, 0x5e,
	0xa8, 0x1c, 0x73, 0xca, 0x09, 0x0b, 0x7d, 0xa3, 0x97, 0xe8, 0x1e, 0x6c, 0x1d, 0x33, 0xe1, 0x22,
	0xd7, 0x1d, 0x85, 0x8e, 0x27, 0xb9, 0x08, 0x84, 0x27, 0x49, 0xd9, 0x38, 0x67, 0x2d, 0x4f, 0x99,
	0x2e, 0xa0, 0x04, 0xaa, 0x5e, 0x18, 0x68, 0xef, 0x58, 0x2b, 0x26, 0xdb, 0x48, 0x2a, 0x74, 0x13,
	0xd6, 0x43, 0x29, 0xce, 0x3a, 0x2e, 0x9a, 0x35, 0x90, 0x93, 0xaa, 0xd9, 0x5c, 0xc8, 0x00, 0x95,
	0x64, 0x2e, 0x59, 0xa7, 0x35, 0xa8, 0x84, 0x92, 0x9d, 0x33, 0xe1, 0xb2, 0x96, 0x8b, 0x64, 0xc3,
	0x2c, 0xc4, 0x59, 0xc0, 0xb4, 0xeb, 0xf9, 0x3e, 0xa9, 0x1d, 0x3e, 0x65, 0xa1, 0xf6, 0xea, 0x4e,
	0xcc, 0x92, 0x7e, 0xe8, 0x38, 0xe8, 0xfb, 0xda, 0xc5, 0x36, 0x73, 0xba, 0x24, 0x63, 0x42, 0x5b,
	0xe4, 0x69, 0x3c, 0x2e, 0x55, 0x8b, 0xd6, 0x61, 0x7b, 0x99, 0xab, 0x46, 0xa5, 0x3c, 0x95, 0x92,
	0x24, 0xe4, 0x16, 0xe3, 0x5a, 0xc8, 0x4e, 0x18, 0xa4, 0x6a, 0x8e, 0x1e, 0x40, 0xfd, 0x4d, 0xc8,
	0x29, 0xcd, 0xd3, 0x5f, 0x60, 0xd7, 0x38, 0x6f, 0x2b, 0x11, 0x74, 0x57, 0xe7, 0xad, 0x99, 0x3f,
	0xdf, 0x84, 0x9c, 0xd2, 0x02, 0xfd, 0x0d, 0xf6, 0xdf, 0xc6, 0x9a, 0xe2, 0x22, 0xfd, 0x15, 0xf6,
	0xfe, 0x0d, 0x51, 0x75, 0xb5, 0xb9, 0x4a, 0x1f, 0xd5, 0xf9, 0x0b, 0x2c, 0x19, 0xa7, 0x46, 0x16,
	0x52, 0x07, 0x17, 0xa9, 0x5a, 0xa6, 0xfb, 0xb0, 0x93, 0xa6, 0xb8, 0x6a, 0x05, 0x8c, 0xcd, 0x40,
	0x31, 0xe9, 0x0b, 0x94, 0xc1, 0x2a, 0xab, 0x18, 0xf6, 0xea, 0xd2, 0x53, 0x56, 0x6d, 0x45, 0x0f,
	0x8f, 0x76, 0xe6, 0xf9, 0xd1, 0xb6, 0x3e, 0xcd, 0x6c, 0xeb, 0xeb, 0xcc, 0xb6, 0xbe, 0xcf, 0x6c,
	0xeb, 0x7e, 0x66, 0x5b, 0x4f, 0x33, 0x3b, 0xf3, 0x3c, 0xb3, 0xad, 0xcf, 0x73, 0x3b, 0xf3, 0x65,
	0x6e, 0x5b, 0xf7, 0x73, 0x3b, 0xf3, 0x30, 0xb7, 0x33, 0x50, 0x1b, 0xc4, 0x47, 0x77, 0x83, 0x69,
	0x34, 0x99, 0x2c, 0x5e, 0xf6, 0xff, 0x8d, 0x65, 0x35, 0x88, 0x9b, 0x8b, 0xaf, 0xe6, 0x75, 0xdc,
	0xbc, 0x9b, 0x36, 0x13, 0xda, 0x4c, 0x5e, 0xc5, 0x65, 0x21, 0x29, 0xfe, 0xfe, 0x11, 0x00, 0x00,
	0xff, 0xff, 0x96, 0x29, 0xab, 0xfe, 0x13, 0x04, 0x00, 0x00,
}

func (x Code) String() string {
	s, ok := Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LegacyErrorCode) String() string {
	s, ok := LegacyErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CallerID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallerID)
	if !ok {
		that2, ok := that.(CallerID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Principal != that1.Principal {
		return false
	}
	if this.Component != that1.Component {
		return false
	}
	if this.Subcomponent != that1.Subcomponent {
		return false
	}
	return true
}
func (this *RPCError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCError)
	if !ok {
		that2, ok := that.(RPCError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyCode != that1.LegacyCode {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *CallerID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vtrpc.CallerID{")
	s = append(s, "Principal: "+fmt.Sprintf("%#v", this.Principal)+",\n")
	s = append(s, "Component: "+fmt.Sprintf("%#v", this.Component)+",\n")
	s = append(s, "Subcomponent: "+fmt.Sprintf("%#v", this.Subcomponent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RPCError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vtrpc.RPCError{")
	s = append(s, "LegacyCode: "+fmt.Sprintf("%#v", this.LegacyCode)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVtrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CallerID) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallerID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Principal) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVtrpc(dAtA, i, uint64(len(m.Principal)))
		i += copy(dAtA[i:], m.Principal)
	}
	if len(m.Component) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVtrpc(dAtA, i, uint64(len(m.Component)))
		i += copy(dAtA[i:], m.Component)
	}
	if len(m.Subcomponent) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVtrpc(dAtA, i, uint64(len(m.Subcomponent)))
		i += copy(dAtA[i:], m.Subcomponent)
	}
	return i, nil
}

func (m *RPCError) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LegacyCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVtrpc(dAtA, i, uint64(m.LegacyCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVtrpc(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVtrpc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintVtrpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CallerID) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Principal)
	if l > 0 {
		n += 1 + l + sovVtrpc(uint64(l))
	}
	l = len(m.Component)
	if l > 0 {
		n += 1 + l + sovVtrpc(uint64(l))
	}
	l = len(m.Subcomponent)
	if l > 0 {
		n += 1 + l + sovVtrpc(uint64(l))
	}
	return n
}

func (m *RPCError) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LegacyCode != 0 {
		n += 1 + sovVtrpc(uint64(m.LegacyCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVtrpc(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovVtrpc(uint64(m.Code))
	}
	return n
}

func sovVtrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVtrpc(x uint64) (n int) {
	return sovVtrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CallerID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallerID{`,
		`Principal:` + fmt.Sprintf("%v", this.Principal) + `,`,
		`Component:` + fmt.Sprintf("%v", this.Component) + `,`,
		`Subcomponent:` + fmt.Sprintf("%v", this.Subcomponent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RPCError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCError{`,
		`LegacyCode:` + fmt.Sprintf("%v", this.LegacyCode) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVtrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CallerID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVtrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallerID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallerID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVtrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVtrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVtrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVtrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcomponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVtrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVtrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subcomponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVtrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVtrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVtrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVtrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyCode", wireType)
			}
			m.LegacyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LegacyCode |= LegacyErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVtrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVtrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVtrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVtrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVtrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVtrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVtrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVtrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVtrpc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVtrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVtrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVtrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVtrpc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVtrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVtrpc   = fmt.Errorf("proto: integer overflow")
)
