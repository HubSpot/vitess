// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: replicationdata.proto

package replicationdata

import (
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Status is the replication status for MySQL (returned by 'show slave status'
// and parsed into a Position and fields).
type Status struct {
	Position            string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SlaveIoRunning      bool   `protobuf:"varint,2,opt,name=slave_io_running,json=slaveIoRunning,proto3" json:"slave_io_running,omitempty"`
	SlaveSqlRunning     bool   `protobuf:"varint,3,opt,name=slave_sql_running,json=slaveSqlRunning,proto3" json:"slave_sql_running,omitempty"`
	SecondsBehindMaster uint32 `protobuf:"varint,4,opt,name=seconds_behind_master,json=secondsBehindMaster,proto3" json:"seconds_behind_master,omitempty"`
	MasterHost          string `protobuf:"bytes,5,opt,name=master_host,json=masterHost,proto3" json:"master_host,omitempty"`
	MasterPort          int32  `protobuf:"varint,6,opt,name=master_port,json=masterPort,proto3" json:"master_port,omitempty"`
	MasterConnectRetry  int32  `protobuf:"varint,7,opt,name=master_connect_retry,json=masterConnectRetry,proto3" json:"master_connect_retry,omitempty"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee8ee22b8c4b9d06, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Status) GetSlaveIoRunning() bool {
	if m != nil {
		return m.SlaveIoRunning
	}
	return false
}

func (m *Status) GetSlaveSqlRunning() bool {
	if m != nil {
		return m.SlaveSqlRunning
	}
	return false
}

func (m *Status) GetSecondsBehindMaster() uint32 {
	if m != nil {
		return m.SecondsBehindMaster
	}
	return 0
}

func (m *Status) GetMasterHost() string {
	if m != nil {
		return m.MasterHost
	}
	return ""
}

func (m *Status) GetMasterPort() int32 {
	if m != nil {
		return m.MasterPort
	}
	return 0
}

func (m *Status) GetMasterConnectRetry() int32 {
	if m != nil {
		return m.MasterConnectRetry
	}
	return 0
}

func init() {
	proto.RegisterType((*Status)(nil), "replicationdata.Status")
}

func init() { proto.RegisterFile("replicationdata.proto", fileDescriptor_ee8ee22b8c4b9d06) }

var fileDescriptor_ee8ee22b8c4b9d06 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xe3, 0xde, 0xdb, 0xde, 0x5e, 0x23, 0x28, 0x18, 0x2a, 0x45, 0x0c, 0x26, 0x62, 0x8a,
	0x10, 0x6a, 0x10, 0xbc, 0x41, 0x59, 0x60, 0x40, 0x42, 0xe9, 0xc6, 0x12, 0xa5, 0xa9, 0xd5, 0x5a,
	0x0a, 0x3e, 0xa9, 0x7d, 0x5a, 0x89, 0x8d, 0x47, 0xe0, 0x11, 0x10, 0x13, 0x8f, 0xc2, 0xd8, 0xb1,
	0x6b, 0x93, 0x85, 0xb1, 0x8f, 0x80, 0x6a, 0xb7, 0x15, 0xea, 0x66, 0x7f, 0xdf, 0x37, 0x1c, 0xe9,
	0xa7, 0x6d, 0x2d, 0x8a, 0x5c, 0x66, 0x29, 0x4a, 0x50, 0x83, 0x14, 0xd3, 0x4e, 0xa1, 0x01, 0x81,
	0xb5, 0x76, 0xf0, 0xf9, 0x47, 0x8d, 0x36, 0x7a, 0x98, 0xe2, 0xc4, 0xb0, 0x53, 0xda, 0x2c, 0xc0,
	0xc8, 0x95, 0xf2, 0x49, 0x40, 0xc2, 0xff, 0xf1, 0xf6, 0xcf, 0x42, 0x7a, 0x68, 0xf2, 0x74, 0x2a,
	0x12, 0x09, 0x89, 0x9e, 0x28, 0x25, 0xd5, 0xd0, 0xaf, 0x05, 0x24, 0x6c, 0xc6, 0x07, 0x96, 0xdf,
	0x43, 0xec, 0x28, 0xbb, 0xa0, 0x47, 0xae, 0x34, 0xe3, 0x7c, 0x9b, 0xfe, 0xb1, 0x69, 0xcb, 0x8a,
	0xde, 0x38, 0xdf, 0xb4, 0xd7, 0xb4, 0x6d, 0x44, 0x06, 0x6a, 0x60, 0x92, 0xbe, 0x18, 0x49, 0x35,
	0x48, 0x9e, 0x53, 0x83, 0x42, 0xfb, 0x7f, 0x03, 0x12, 0xee, 0xc7, 0xc7, 0x6b, 0xd9, 0xb5, 0xee,
	0xc1, 0x2a, 0x76, 0x46, 0xf7, 0x5c, 0x94, 0x8c, 0xc0, 0xa0, 0x5f, 0xb7, 0x87, 0x52, 0x87, 0xee,
	0xc0, 0xe0, 0xaf, 0xa0, 0x00, 0x8d, 0x7e, 0x23, 0x20, 0x61, 0x7d, 0x13, 0x3c, 0x82, 0x46, 0x76,
	0x45, 0x4f, 0xd6, 0x41, 0x06, 0x4a, 0x89, 0x0c, 0x13, 0x2d, 0x50, 0xbf, 0xf8, 0xff, 0x6c, 0xc9,
	0x9c, 0xbb, 0x75, 0x2a, 0x5e, 0x99, 0x6e, 0x7f, 0xb6, 0xe0, 0xde, 0x7c, 0xc1, 0xbd, 0xe5, 0x82,
	0x93, 0xd7, 0x92, 0x93, 0xcf, 0x92, 0x93, 0xaf, 0x92, 0x93, 0x59, 0xc9, 0xc9, 0x77, 0xc9, 0xbd,
	0x65, 0xc9, 0xc9, 0x5b, 0xc5, 0xbd, 0xf7, 0x8a, 0x93, 0x59, 0xc5, 0xbd, 0x79, 0xc5, 0xbd, 0xa7,
	0xcb, 0xa9, 0x44, 0x61, 0x4c, 0x47, 0x42, 0xe4, 0x5e, 0xd1, 0x10, 0xa2, 0x29, 0x46, 0x76, 0x89,
	0x68, 0x67, 0x88, 0x7e, 0xc3, 0xe2, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xec, 0x11,
	0x04, 0xb9, 0x01, 0x00, 0x00,
}

func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.SlaveIoRunning != that1.SlaveIoRunning {
		return false
	}
	if this.SlaveSqlRunning != that1.SlaveSqlRunning {
		return false
	}
	if this.SecondsBehindMaster != that1.SecondsBehindMaster {
		return false
	}
	if this.MasterHost != that1.MasterHost {
		return false
	}
	if this.MasterPort != that1.MasterPort {
		return false
	}
	if this.MasterConnectRetry != that1.MasterConnectRetry {
		return false
	}
	return true
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&replicationdata.Status{")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "SlaveIoRunning: "+fmt.Sprintf("%#v", this.SlaveIoRunning)+",\n")
	s = append(s, "SlaveSqlRunning: "+fmt.Sprintf("%#v", this.SlaveSqlRunning)+",\n")
	s = append(s, "SecondsBehindMaster: "+fmt.Sprintf("%#v", this.SecondsBehindMaster)+",\n")
	s = append(s, "MasterHost: "+fmt.Sprintf("%#v", this.MasterHost)+",\n")
	s = append(s, "MasterPort: "+fmt.Sprintf("%#v", this.MasterPort)+",\n")
	s = append(s, "MasterConnectRetry: "+fmt.Sprintf("%#v", this.MasterConnectRetry)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReplicationdata(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	if m.SlaveIoRunning {
		dAtA[i] = 0x10
		i++
		if m.SlaveIoRunning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SlaveSqlRunning {
		dAtA[i] = 0x18
		i++
		if m.SlaveSqlRunning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SecondsBehindMaster != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintReplicationdata(dAtA, i, uint64(m.SecondsBehindMaster))
	}
	if len(m.MasterHost) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReplicationdata(dAtA, i, uint64(len(m.MasterHost)))
		i += copy(dAtA[i:], m.MasterHost)
	}
	if m.MasterPort != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintReplicationdata(dAtA, i, uint64(m.MasterPort))
	}
	if m.MasterConnectRetry != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintReplicationdata(dAtA, i, uint64(m.MasterConnectRetry))
	}
	return i, nil
}

func encodeVarintReplicationdata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Status) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.SlaveIoRunning {
		n += 2
	}
	if m.SlaveSqlRunning {
		n += 2
	}
	if m.SecondsBehindMaster != 0 {
		n += 1 + sovReplicationdata(uint64(m.SecondsBehindMaster))
	}
	l = len(m.MasterHost)
	if l > 0 {
		n += 1 + l + sovReplicationdata(uint64(l))
	}
	if m.MasterPort != 0 {
		n += 1 + sovReplicationdata(uint64(m.MasterPort))
	}
	if m.MasterConnectRetry != 0 {
		n += 1 + sovReplicationdata(uint64(m.MasterConnectRetry))
	}
	return n
}

func sovReplicationdata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReplicationdata(x uint64) (n int) {
	return sovReplicationdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`SlaveIoRunning:` + fmt.Sprintf("%v", this.SlaveIoRunning) + `,`,
		`SlaveSqlRunning:` + fmt.Sprintf("%v", this.SlaveSqlRunning) + `,`,
		`SecondsBehindMaster:` + fmt.Sprintf("%v", this.SecondsBehindMaster) + `,`,
		`MasterHost:` + fmt.Sprintf("%v", this.MasterHost) + `,`,
		`MasterPort:` + fmt.Sprintf("%v", this.MasterPort) + `,`,
		`MasterConnectRetry:` + fmt.Sprintf("%v", this.MasterConnectRetry) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReplicationdata(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicationdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveIoRunning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveIoRunning = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveSqlRunning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveSqlRunning = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsBehindMaster", wireType)
			}
			m.SecondsBehindMaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsBehindMaster |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicationdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterPort", wireType)
			}
			m.MasterPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterConnectRetry", wireType)
			}
			m.MasterConnectRetry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterConnectRetry |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicationdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReplicationdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplicationdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplicationdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicationdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplicationdata
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthReplicationdata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReplicationdata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReplicationdata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthReplicationdata
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReplicationdata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplicationdata   = fmt.Errorf("proto: integer overflow")
)
