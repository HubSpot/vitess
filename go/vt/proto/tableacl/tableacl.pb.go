// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tableacl.proto

package tableacl

import (
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TableGroupSpec defines ACLs for a group of tables.
type TableGroupSpec struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// either tables or a table name prefixes (if it ends in a %)
	TableNamesOrPrefixes []string `protobuf:"bytes,2,rep,name=table_names_or_prefixes,json=tableNamesOrPrefixes,proto3" json:"table_names_or_prefixes,omitempty"`
	Readers              []string `protobuf:"bytes,3,rep,name=readers,proto3" json:"readers,omitempty"`
	Writers              []string `protobuf:"bytes,4,rep,name=writers,proto3" json:"writers,omitempty"`
	Admins               []string `protobuf:"bytes,5,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (m *TableGroupSpec) Reset()      { *m = TableGroupSpec{} }
func (*TableGroupSpec) ProtoMessage() {}
func (*TableGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d0bedb248a1632e, []int{0}
}
func (m *TableGroupSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableGroupSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableGroupSpec.Merge(m, src)
}
func (m *TableGroupSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TableGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TableGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TableGroupSpec proto.InternalMessageInfo

func (m *TableGroupSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableGroupSpec) GetTableNamesOrPrefixes() []string {
	if m != nil {
		return m.TableNamesOrPrefixes
	}
	return nil
}

func (m *TableGroupSpec) GetReaders() []string {
	if m != nil {
		return m.Readers
	}
	return nil
}

func (m *TableGroupSpec) GetWriters() []string {
	if m != nil {
		return m.Writers
	}
	return nil
}

func (m *TableGroupSpec) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

type Config struct {
	TableGroups []*TableGroupSpec `protobuf:"bytes,1,rep,name=table_groups,json=tableGroups,proto3" json:"table_groups,omitempty"`
}

func (m *Config) Reset()      { *m = Config{} }
func (*Config) ProtoMessage() {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d0bedb248a1632e, []int{1}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetTableGroups() []*TableGroupSpec {
	if m != nil {
		return m.TableGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*TableGroupSpec)(nil), "tableacl.TableGroupSpec")
	proto.RegisterType((*Config)(nil), "tableacl.Config")
}

func init() { proto.RegisterFile("tableacl.proto", fileDescriptor_7d0bedb248a1632e) }

var fileDescriptor_7d0bedb248a1632e = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4a, 0x03, 0x31,
	0x1c, 0xc6, 0x13, 0x5b, 0xab, 0x4d, 0xa5, 0x43, 0x10, 0xcd, 0xf4, 0xa7, 0x14, 0x84, 0x4e, 0x3d,
	0x50, 0x9c, 0xdc, 0x14, 0x71, 0x53, 0x39, 0x9d, 0x74, 0x38, 0xae, 0x6d, 0x7a, 0x04, 0xda, 0xcb,
	0x91, 0xc4, 0xea, 0xe8, 0x23, 0xf8, 0x08, 0x6e, 0xfa, 0x28, 0x8e, 0x37, 0x76, 0xbd, 0xdc, 0xe2,
	0xd8, 0x47, 0x90, 0xe4, 0xee, 0x0a, 0x6e, 0xdf, 0x8f, 0x5f, 0x42, 0xbe, 0x2f, 0xa4, 0x6f, 0xe2,
	0xc9, 0x82, 0xc7, 0xd3, 0xc5, 0x38, 0x53, 0xd2, 0x48, 0xba, 0xdf, 0xf0, 0xf0, 0x0b, 0x93, 0xfe,
	0xa3, 0x83, 0x1b, 0x25, 0x5f, 0xb2, 0x87, 0x8c, 0x4f, 0x29, 0x25, 0xed, 0x34, 0x5e, 0x72, 0x86,
	0x07, 0x78, 0xd4, 0x0d, 0x7d, 0xa6, 0xe7, 0xe4, 0xd8, 0x5f, 0x89, 0x1c, 0xe9, 0x48, 0xaa, 0x28,
	0x53, 0x7c, 0x2e, 0xde, 0xb8, 0x66, 0x3b, 0x83, 0xd6, 0xa8, 0x1b, 0x1e, 0x7a, 0x7d, 0xeb, 0xec,
	0x9d, 0xba, 0xaf, 0x1d, 0x65, 0x64, 0x4f, 0xf1, 0x78, 0xc6, 0x95, 0x66, 0x2d, 0x7f, 0xac, 0x41,
	0x67, 0x5e, 0x95, 0x30, 0xce, 0xb4, 0x2b, 0x53, 0x23, 0x3d, 0x22, 0x9d, 0x78, 0xb6, 0x14, 0xa9,
	0x66, 0xbb, 0x5e, 0xd4, 0x34, 0xbc, 0x26, 0x9d, 0x2b, 0x99, 0xce, 0x45, 0x42, 0x2f, 0xc8, 0x41,
	0x55, 0x26, 0x71, 0x9d, 0x35, 0xc3, 0x83, 0xd6, 0xa8, 0x77, 0xca, 0xc6, 0xdb, 0x91, 0xff, 0x07,
	0x85, 0x3d, 0xb3, 0x65, 0x7d, 0xf9, 0x9c, 0x17, 0x80, 0xd6, 0x05, 0xa0, 0x4d, 0x01, 0xf8, 0xdd,
	0x02, 0xfe, 0xb6, 0x80, 0x7f, 0x2c, 0xe0, 0xdc, 0x02, 0xfe, 0xb5, 0x80, 0x36, 0x16, 0xf0, 0x47,
	0x09, 0xe8, 0xb3, 0x04, 0x9c, 0x97, 0x80, 0xd6, 0x25, 0xa0, 0xa7, 0x93, 0x95, 0x30, 0x5c, 0xeb,
	0xb1, 0x90, 0x41, 0x95, 0x82, 0x44, 0x06, 0x2b, 0x13, 0xf8, 0xef, 0x0c, 0x9a, 0x87, 0x27, 0x1d,
	0xcf, 0x67, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x51, 0x21, 0x85, 0x4a, 0x70, 0x01, 0x00, 0x00,
}

func (this *TableGroupSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableGroupSpec)
	if !ok {
		that2, ok := that.(TableGroupSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.TableNamesOrPrefixes) != len(that1.TableNamesOrPrefixes) {
		return false
	}
	for i := range this.TableNamesOrPrefixes {
		if this.TableNamesOrPrefixes[i] != that1.TableNamesOrPrefixes[i] {
			return false
		}
	}
	if len(this.Readers) != len(that1.Readers) {
		return false
	}
	for i := range this.Readers {
		if this.Readers[i] != that1.Readers[i] {
			return false
		}
	}
	if len(this.Writers) != len(that1.Writers) {
		return false
	}
	for i := range this.Writers {
		if this.Writers[i] != that1.Writers[i] {
			return false
		}
	}
	if len(this.Admins) != len(that1.Admins) {
		return false
	}
	for i := range this.Admins {
		if this.Admins[i] != that1.Admins[i] {
			return false
		}
	}
	return true
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TableGroups) != len(that1.TableGroups) {
		return false
	}
	for i := range this.TableGroups {
		if !this.TableGroups[i].Equal(that1.TableGroups[i]) {
			return false
		}
	}
	return true
}
func (this *TableGroupSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tableacl.TableGroupSpec{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "TableNamesOrPrefixes: "+fmt.Sprintf("%#v", this.TableNamesOrPrefixes)+",\n")
	s = append(s, "Readers: "+fmt.Sprintf("%#v", this.Readers)+",\n")
	s = append(s, "Writers: "+fmt.Sprintf("%#v", this.Writers)+",\n")
	s = append(s, "Admins: "+fmt.Sprintf("%#v", this.Admins)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tableacl.Config{")
	if this.TableGroups != nil {
		s = append(s, "TableGroups: "+fmt.Sprintf("%#v", this.TableGroups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTableacl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TableGroupSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableGroupSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTableacl(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.TableNamesOrPrefixes) > 0 {
		for _, s := range m.TableNamesOrPrefixes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Readers) > 0 {
		for _, s := range m.Readers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Writers) > 0 {
		for _, s := range m.Writers {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TableGroups) > 0 {
		for _, msg := range m.TableGroups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTableacl(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTableacl(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableGroupSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTableacl(uint64(l))
	}
	if len(m.TableNamesOrPrefixes) > 0 {
		for _, s := range m.TableNamesOrPrefixes {
			l = len(s)
			n += 1 + l + sovTableacl(uint64(l))
		}
	}
	if len(m.Readers) > 0 {
		for _, s := range m.Readers {
			l = len(s)
			n += 1 + l + sovTableacl(uint64(l))
		}
	}
	if len(m.Writers) > 0 {
		for _, s := range m.Writers {
			l = len(s)
			n += 1 + l + sovTableacl(uint64(l))
		}
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovTableacl(uint64(l))
		}
	}
	return n
}

func (m *Config) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TableGroups) > 0 {
		for _, e := range m.TableGroups {
			l = e.ProtoSize()
			n += 1 + l + sovTableacl(uint64(l))
		}
	}
	return n
}

func sovTableacl(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTableacl(x uint64) (n int) {
	return sovTableacl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TableGroupSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TableGroupSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TableNamesOrPrefixes:` + fmt.Sprintf("%v", this.TableNamesOrPrefixes) + `,`,
		`Readers:` + fmt.Sprintf("%v", this.Readers) + `,`,
		`Writers:` + fmt.Sprintf("%v", this.Writers) + `,`,
		`Admins:` + fmt.Sprintf("%v", this.Admins) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTableGroups := "[]*TableGroupSpec{"
	for _, f := range this.TableGroups {
		repeatedStringForTableGroups += strings.Replace(f.String(), "TableGroupSpec", "TableGroupSpec", 1) + ","
	}
	repeatedStringForTableGroups += "}"
	s := strings.Join([]string{`&Config{`,
		`TableGroups:` + repeatedStringForTableGroups + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTableacl(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TableGroupSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableacl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableGroupSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableGroupSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableacl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableacl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableNamesOrPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableacl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableacl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableNamesOrPrefixes = append(m.TableNamesOrPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableacl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableacl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readers = append(m.Readers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Writers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableacl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableacl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Writers = append(m.Writers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTableacl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTableacl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableacl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableacl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableacl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTableacl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTableacl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTableacl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableGroups = append(m.TableGroups, &TableGroupSpec{})
			if err := m.TableGroups[len(m.TableGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTableacl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTableacl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTableacl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTableacl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTableacl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTableacl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTableacl
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTableacl
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTableacl
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTableacl(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTableacl
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTableacl = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTableacl   = fmt.Errorf("proto: integer overflow")
)
