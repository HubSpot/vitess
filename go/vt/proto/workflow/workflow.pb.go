// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workflow.proto

package workflow

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// WorkflowState describes the state of a workflow.
// This constant should match the Node object described in
// web/vtctld2/src/app/workflows/node.ts as it is exposed as JSON to
// the Angular 2 web app.
type WorkflowState int32

const (
	WorkflowState_NotStarted WorkflowState = 0
	WorkflowState_Running    WorkflowState = 1
	WorkflowState_Done       WorkflowState = 2
)

var WorkflowState_name = map[int32]string{
	0: "NotStarted",
	1: "Running",
	2: "Done",
}

var WorkflowState_value = map[string]int32{
	"NotStarted": 0,
	"Running":    1,
	"Done":       2,
}

func (WorkflowState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0}
}

type TaskState int32

const (
	TaskState_TaskNotStarted TaskState = 0
	TaskState_TaskRunning    TaskState = 1
	TaskState_TaskDone       TaskState = 2
)

var TaskState_name = map[int32]string{
	0: "TaskNotStarted",
	1: "TaskRunning",
	2: "TaskDone",
}

var TaskState_value = map[string]int32{
	"TaskNotStarted": 0,
	"TaskRunning":    1,
	"TaskDone":       2,
}

func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{1}
}

// Workflow is the persisted state of a long-running workflow.
type Workflow struct {
	// uuid is set when the workflow is created, and immutable after
	// that.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// factory_name is set with the name of the factory that created the
	// job (and can also restart it). It is set at creation time, and
	// immutable after that.
	FactoryName string `protobuf:"bytes,2,opt,name=factory_name,json=factoryName,proto3" json:"factory_name,omitempty"`
	// name is the display name of the workflow.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// state describes the state of the job. A job is created as
	// NotStarted, then the Workflow Manager picks it up and starts it,
	// switching it to Running (and populating 'start_time').  The
	// workflow can then fail over to a new Workflow Manager is
	// necessary, and still be in Running state.  When done, it goes to
	// Done, 'end_time' is populated, and 'error' is set if there was an
	// error.
	State WorkflowState `protobuf:"varint,4,opt,name=state,proto3,enum=workflow.WorkflowState" json:"state,omitempty"`
	// data is workflow-specific stored data. It is usually a binary
	// proto-encoded data structure. It can vary throughout the
	// execution of the workflow.  It will not change after the workflow
	// is Done.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// error is set if the job finished with an error. This field only
	// makes sense if 'state' is Done.
	Error string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// start_time is set when the workflow manager starts a workflow for
	// the first time. This field only makes sense if 'state' is Running
	// or Done.
	StartTime int64 `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time is set when the workflow is finished.
	// This field only makes sense if 'state' is Done.
	EndTime int64 `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// create_time is set when the workflow is created.
	CreateTime int64 `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (m *Workflow) Reset()      { *m = Workflow{} }
func (*Workflow) ProtoMessage() {}
func (*Workflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0}
}
func (m *Workflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow.Merge(m, src)
}
func (m *Workflow) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Workflow) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow proto.InternalMessageInfo

func (m *Workflow) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Workflow) GetFactoryName() string {
	if m != nil {
		return m.FactoryName
	}
	return ""
}

func (m *Workflow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Workflow) GetState() WorkflowState {
	if m != nil {
		return m.State
	}
	return WorkflowState_NotStarted
}

func (m *Workflow) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Workflow) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Workflow) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Workflow) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Workflow) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type WorkflowCheckpoint struct {
	// code_version is used to detect incompabilities between the version of the
	// running workflow and the one which wrote the checkpoint. If they don't
	// match, the workflow must not continue. The author of workflow must update
	// this variable in their implementation when incompabilities are introduced.
	CodeVersion int32 `protobuf:"varint,1,opt,name=code_version,json=codeVersion,proto3" json:"code_version,omitempty"`
	// Task is the data structure that stores the execution status and the
	// attributes of a task.
	Tasks map[string]*Task `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// settings includes workflow specific data, e.g. the resharding workflow
	// would store the source shards and destination shards.
	Settings map[string]string `protobuf:"bytes,3,rep,name=settings,proto3" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *WorkflowCheckpoint) Reset()      { *m = WorkflowCheckpoint{} }
func (*WorkflowCheckpoint) ProtoMessage() {}
func (*WorkflowCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{1}
}
func (m *WorkflowCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowCheckpoint.Merge(m, src)
}
func (m *WorkflowCheckpoint) XXX_Size() int {
	return m.ProtoSize()
}
func (m *WorkflowCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowCheckpoint proto.InternalMessageInfo

func (m *WorkflowCheckpoint) GetCodeVersion() int32 {
	if m != nil {
		return m.CodeVersion
	}
	return 0
}

func (m *WorkflowCheckpoint) GetTasks() map[string]*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *WorkflowCheckpoint) GetSettings() map[string]string {
	if m != nil {
		return m.Settings
	}
	return nil
}

type Task struct {
	Id    string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State TaskState `protobuf:"varint,2,opt,name=state,proto3,enum=workflow.TaskState" json:"state,omitempty"`
	// attributes includes the parameters the task needs.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error      string            `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Task) Reset()      { *m = Task{} }
func (*Task) ProtoMessage() {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{2}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_TaskNotStarted
}

func (m *Task) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Task) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("workflow.WorkflowState", WorkflowState_name, WorkflowState_value)
	proto.RegisterEnum("workflow.TaskState", TaskState_name, TaskState_value)
	proto.RegisterType((*Workflow)(nil), "workflow.Workflow")
	proto.RegisterType((*WorkflowCheckpoint)(nil), "workflow.WorkflowCheckpoint")
	proto.RegisterMapType((map[string]string)(nil), "workflow.WorkflowCheckpoint.SettingsEntry")
	proto.RegisterMapType((map[string]*Task)(nil), "workflow.WorkflowCheckpoint.TasksEntry")
	proto.RegisterType((*Task)(nil), "workflow.Task")
	proto.RegisterMapType((map[string]string)(nil), "workflow.Task.AttributesEntry")
}

func init() { proto.RegisterFile("workflow.proto", fileDescriptor_892c7f566756b0be) }

var fileDescriptor_892c7f566756b0be = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xf5, 0x3a, 0x71, 0xe3, 0x8c, 0x53, 0x37, 0xda, 0x5f, 0xa5, 0x9f, 0x89, 0xc4, 0x12, 0x22,
	0x10, 0x21, 0x12, 0x89, 0x14, 0x24, 0x84, 0x40, 0xad, 0xc4, 0x5f, 0x71, 0xea, 0xc1, 0xa9, 0xa8,
	0xc4, 0x25, 0x72, 0xe3, 0x6d, 0xb0, 0xd2, 0x78, 0xab, 0xf5, 0x26, 0x55, 0x6e, 0x5c, 0xb9, 0xf1,
	0x11, 0x38, 0xf2, 0x45, 0x90, 0x38, 0xf6, 0x84, 0x7a, 0xad, 0x73, 0xe1, 0xd8, 0x8f, 0x80, 0x76,
	0x37, 0x76, 0x62, 0x40, 0x48, 0xdc, 0x66, 0xe6, 0xcd, 0x7b, 0xe3, 0x9d, 0x79, 0x06, 0xf7, 0x9c,
	0xf1, 0xc9, 0xc9, 0x29, 0x3b, 0xef, 0x9e, 0x71, 0x26, 0x18, 0xb6, 0xb3, 0xbc, 0xf5, 0xd1, 0x04,
	0xfb, 0x68, 0x95, 0x60, 0x0c, 0xe5, 0xd9, 0x2c, 0x0a, 0x3d, 0xd4, 0x44, 0xed, 0xaa, 0xaf, 0x62,
	0x7c, 0x1b, 0x6a, 0x27, 0xc1, 0x48, 0x30, 0xbe, 0x18, 0xc6, 0xc1, 0x94, 0x7a, 0xa6, 0xc2, 0x9c,
	0x55, 0xed, 0x20, 0x98, 0x52, 0x49, 0x53, 0x50, 0x49, 0xd3, 0x64, 0x8c, 0x1f, 0x80, 0x95, 0x88,
	0x40, 0x50, 0xaf, 0xdc, 0x44, 0x6d, 0xb7, 0xff, 0x7f, 0x37, 0xff, 0x82, 0x6c, 0xda, 0x40, 0xc2,
	0xbe, 0xee, 0x92, 0x12, 0x61, 0x20, 0x02, 0xcf, 0x6a, 0xa2, 0x76, 0xcd, 0x57, 0x31, 0xde, 0x05,
	0x8b, 0x72, 0xce, 0xb8, 0xb7, 0xa5, 0x74, 0x75, 0x82, 0x6f, 0x02, 0x24, 0x22, 0xe0, 0x62, 0x28,
	0xa2, 0x29, 0xf5, 0x2a, 0x4d, 0xd4, 0x2e, 0xf9, 0x55, 0x55, 0x39, 0x8c, 0xa6, 0x14, 0xdf, 0x00,
	0x9b, 0xc6, 0xa1, 0x06, 0x6d, 0x05, 0x56, 0x68, 0x1c, 0x2a, 0xe8, 0x16, 0x38, 0x23, 0x4e, 0x03,
	0x41, 0x35, 0x5a, 0x55, 0x28, 0xe8, 0x92, 0x6c, 0x68, 0x7d, 0x35, 0x01, 0x67, 0x5f, 0xf7, 0xe2,
	0x3d, 0x1d, 0x4d, 0xce, 0x58, 0x14, 0x0b, 0xb9, 0x81, 0x11, 0x0b, 0xe9, 0x70, 0x4e, 0x79, 0x12,
	0xb1, 0x58, 0x6d, 0xc7, 0xf2, 0x1d, 0x59, 0x7b, 0xab, 0x4b, 0x78, 0x0f, 0x2c, 0x11, 0x24, 0x93,
	0xc4, 0x33, 0x9b, 0xa5, 0xb6, 0xd3, 0xbf, 0xf7, 0xfb, 0x6b, 0xd7, 0x7a, 0xdd, 0x43, 0xd9, 0xf9,
	0x2a, 0x16, 0x7c, 0xe1, 0x6b, 0x16, 0x7e, 0x0d, 0x76, 0x42, 0x85, 0x88, 0xe2, 0x71, 0xe2, 0x95,
	0x94, 0x42, 0xe7, 0xaf, 0x0a, 0x83, 0x55, 0xb3, 0x16, 0xc9, 0xb9, 0x8d, 0x37, 0x00, 0x6b, 0x71,
	0x5c, 0x87, 0xd2, 0x84, 0x2e, 0x56, 0xc7, 0x94, 0x21, 0xbe, 0x03, 0xd6, 0x3c, 0x38, 0x9d, 0xe9,
	0x23, 0x3a, 0x7d, 0x77, 0x3d, 0x44, 0xd2, 0x7c, 0x0d, 0x3e, 0x31, 0x1f, 0xa3, 0xc6, 0x53, 0xd8,
	0x2e, 0x0c, 0xf9, 0x83, 0xd8, 0xee, 0xa6, 0x58, 0x75, 0x83, 0xdc, 0xfa, 0x8e, 0xa0, 0x2c, 0x05,
	0xb1, 0x0b, 0x66, 0xee, 0x26, 0x33, 0x0a, 0xf1, 0xfd, 0xcc, 0x14, 0xa6, 0x32, 0xc5, 0x7f, 0xc5,
	0xf9, 0x05, 0x43, 0xec, 0x03, 0x04, 0x42, 0xf0, 0xe8, 0x78, 0x26, 0x68, 0xb6, 0x14, 0x52, 0xec,
	0xef, 0x3e, 0xcb, 0x1b, 0xf4, 0x22, 0x36, 0x18, 0x6b, 0xf3, 0x94, 0x37, 0xcc, 0xd3, 0xd8, 0x83,
	0x9d, 0x5f, 0x48, 0xff, 0xf2, 0xb0, 0xce, 0x23, 0xd8, 0x2e, 0xb8, 0x17, 0xbb, 0x00, 0x07, 0x4c,
	0x0c, 0xa4, 0xfb, 0x68, 0x58, 0x37, 0xb0, 0x03, 0x15, 0x7f, 0x16, 0xc7, 0x51, 0x3c, 0xae, 0x23,
	0x6c, 0x43, 0xf9, 0x25, 0x8b, 0x69, 0xdd, 0xec, 0xec, 0x43, 0x35, 0x7f, 0x20, 0xc6, 0xe0, 0xca,
	0xa4, 0xc0, 0xdb, 0x01, 0x47, 0x5d, 0x20, 0xe7, 0xd6, 0xc0, 0x96, 0x05, 0xcd, 0x7f, 0x7e, 0x74,
	0x79, 0x45, 0x8c, 0xeb, 0x2b, 0x82, 0x3e, 0xa4, 0x04, 0x7d, 0x49, 0x09, 0xfa, 0x96, 0x12, 0x74,
	0x91, 0x12, 0xf4, 0x23, 0x25, 0xc6, 0x75, 0x4a, 0xd0, 0xa7, 0x25, 0x31, 0x3e, 0x2f, 0x09, 0xba,
	0x58, 0x12, 0xe3, 0x72, 0x49, 0x8c, 0x77, 0x77, 0xe7, 0x91, 0xa0, 0x49, 0xd2, 0x8d, 0x58, 0x4f,
	0x47, 0xbd, 0x31, 0xeb, 0xcd, 0x45, 0x4f, 0xfd, 0xfe, 0xbd, 0x6c, 0x8d, 0xc7, 0x5b, 0x2a, 0x7f,
	0xf8, 0x33, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xe9, 0x5b, 0x36, 0x20, 0x04, 0x00, 0x00,
}

func (x WorkflowState) String() string {
	s, ok := WorkflowState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskState) String() string {
	s, ok := TaskState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Workflow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Workflow)
	if !ok {
		that2, ok := that.(Workflow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.FactoryName != that1.FactoryName {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	return true
}
func (this *WorkflowCheckpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowCheckpoint)
	if !ok {
		that2, ok := that.(WorkflowCheckpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CodeVersion != that1.CodeVersion {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if len(this.Settings) != len(that1.Settings) {
		return false
	}
	for i := range this.Settings {
		if this.Settings[i] != that1.Settings[i] {
			return false
		}
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Workflow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&workflow.Workflow{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "FactoryName: "+fmt.Sprintf("%#v", this.FactoryName)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "CreateTime: "+fmt.Sprintf("%#v", this.CreateTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowCheckpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&workflow.WorkflowCheckpoint{")
	s = append(s, "CodeVersion: "+fmt.Sprintf("%#v", this.CodeVersion)+",\n")
	keysForTasks := make([]string, 0, len(this.Tasks))
	for k := range this.Tasks {
		keysForTasks = append(keysForTasks, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTasks)
	mapStringForTasks := "map[string]*Task{"
	for _, k := range keysForTasks {
		mapStringForTasks += fmt.Sprintf("%#v: %#v,", k, this.Tasks[k])
	}
	mapStringForTasks += "}"
	if this.Tasks != nil {
		s = append(s, "Tasks: "+mapStringForTasks+",\n")
	}
	keysForSettings := make([]string, 0, len(this.Settings))
	for k := range this.Settings {
		keysForSettings = append(keysForSettings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSettings)
	mapStringForSettings := "map[string]string{"
	for _, k := range keysForSettings {
		mapStringForSettings += fmt.Sprintf("%#v: %#v,", k, this.Settings[k])
	}
	mapStringForSettings += "}"
	if this.Settings != nil {
		s = append(s, "Settings: "+mapStringForSettings+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&workflow.Task{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWorkflow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Workflow) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.FactoryName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.FactoryName)))
		i += copy(dAtA[i:], m.FactoryName)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.State))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.EndTime))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.CreateTime))
	}
	return i, nil
}

func (m *WorkflowCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CodeVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.CodeVersion))
	}
	if len(m.Tasks) > 0 {
		for k := range m.Tasks {
			dAtA[i] = 0x12
			i++
			v := m.Tasks[k]
			msgSize := 0
			if v != nil {
				msgSize = v.ProtoSize()
				msgSize += 1 + sovWorkflow(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovWorkflow(uint64(len(k))) + msgSize
			i = encodeVarintWorkflow(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintWorkflow(dAtA, i, uint64(v.ProtoSize()))
				n1, err1 := v.MarshalTo(dAtA[i:])
				if err1 != nil {
					return 0, err1
				}
				i += n1
			}
		}
	}
	if len(m.Settings) > 0 {
		for k := range m.Settings {
			dAtA[i] = 0x1a
			i++
			v := m.Settings[k]
			mapSize := 1 + len(k) + sovWorkflow(uint64(len(k))) + 1 + len(v) + sovWorkflow(uint64(len(v)))
			i = encodeVarintWorkflow(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.State))
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x1a
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovWorkflow(uint64(len(k))) + 1 + len(v) + sovWorkflow(uint64(len(v)))
			i = encodeVarintWorkflow(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintWorkflow(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Workflow) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.FactoryName)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovWorkflow(uint64(m.State))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovWorkflow(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovWorkflow(uint64(m.EndTime))
	}
	if m.CreateTime != 0 {
		n += 1 + sovWorkflow(uint64(m.CreateTime))
	}
	return n
}

func (m *WorkflowCheckpoint) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeVersion != 0 {
		n += 1 + sovWorkflow(uint64(m.CodeVersion))
	}
	if len(m.Tasks) > 0 {
		for k, v := range m.Tasks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.ProtoSize()
				l += 1 + sovWorkflow(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkflow(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkflow(uint64(mapEntrySize))
		}
	}
	if len(m.Settings) > 0 {
		for k, v := range m.Settings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWorkflow(uint64(len(k))) + 1 + len(v) + sovWorkflow(uint64(len(v)))
			n += mapEntrySize + 1 + sovWorkflow(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Task) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovWorkflow(uint64(m.State))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWorkflow(uint64(len(k))) + 1 + len(v) + sovWorkflow(uint64(len(v)))
			n += mapEntrySize + 1 + sovWorkflow(uint64(mapEntrySize))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	return n
}

func sovWorkflow(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkflow(x uint64) (n int) {
	return sovWorkflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Workflow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Workflow{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`FactoryName:` + fmt.Sprintf("%v", this.FactoryName) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`CreateTime:` + fmt.Sprintf("%v", this.CreateTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowCheckpoint) String() string {
	if this == nil {
		return "nil"
	}
	keysForTasks := make([]string, 0, len(this.Tasks))
	for k := range this.Tasks {
		keysForTasks = append(keysForTasks, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTasks)
	mapStringForTasks := "map[string]*Task{"
	for _, k := range keysForTasks {
		mapStringForTasks += fmt.Sprintf("%v: %v,", k, this.Tasks[k])
	}
	mapStringForTasks += "}"
	keysForSettings := make([]string, 0, len(this.Settings))
	for k := range this.Settings {
		keysForSettings = append(keysForSettings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSettings)
	mapStringForSettings := "map[string]string{"
	for _, k := range keysForSettings {
		mapStringForSettings += fmt.Sprintf("%v: %v,", k, this.Settings[k])
	}
	mapStringForSettings += "}"
	s := strings.Join([]string{`&WorkflowCheckpoint{`,
		`CodeVersion:` + fmt.Sprintf("%v", this.CodeVersion) + `,`,
		`Tasks:` + mapStringForTasks + `,`,
		`Settings:` + mapStringForSettings + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Task{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWorkflow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Workflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= WorkflowState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeVersion", wireType)
			}
			m.CodeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tasks == nil {
				m.Tasks = make(map[string]*Task)
			}
			var mapkey string
			var mapvalue *Task
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflow
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflow
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkflow
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkflow
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Task{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflow(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWorkflow
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tasks[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflow
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflow
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWorkflow
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWorkflow
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflow(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWorkflow
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Settings[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkflow
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkflow
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWorkflow
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWorkflow
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkflow(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWorkflow
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkflow
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkflow(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWorkflow
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkflow = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflow   = fmt.Errorf("proto: integer overflow")
)
