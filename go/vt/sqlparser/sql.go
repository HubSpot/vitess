//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	insRows          InsertRows
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const INTEGER = 57449
const CHARACTER = 57450
const CURRENT_TIMESTAMP = 57451
const DATABASE = 57452
const CURRENT_DATE = 57453
const CURRENT_TIME = 57454
const LOCALTIME = 57455
const LOCALTIMESTAMP = 57456
const UTC_DATE = 57457
const UTC_TIME = 57458
const UTC_TIMESTAMP = 57459
const REPLACE = 57460
const CONVERT = 57461
const CAST = 57462
const GROUP_CONCAT = 57463
const SEPARATOR = 57464
const MATCH = 57465
const AGAINST = 57466
const BOOLEAN = 57467
const LANGUAGE = 57468
const WITH = 57469
const QUERY = 57470
const EXPANSION = 57471
const UNUSED = 57472

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 84,
	103, 306,
	-2, 302,
	-1, 85,
	103, 307,
	-2, 303,
	-1, 292,
	103, 309,
	-2, 305,
}

const yyNprod = 410
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3000

var yyAct = [...]int{

	421, 429, 561, 243, 594, 79, 292, 523, 475, 532,
	472, 593, 417, 328, 374, 267, 503, 487, 311, 501,
	441, 233, 290, 309, 242, 502, 517, 408, 49, 100,
	240, 414, 28, 685, 302, 385, 474, 678, 684, 671,
	81, 683, 677, 670, 597, 266, 638, 296, 300, 373,
	3, 96, 87, 43, 50, 51, 660, 342, 341, 351,
	352, 344, 345, 346, 347, 348, 349, 350, 343, 403,
	37, 353, 39, 304, 124, 42, 40, 43, 327, 52,
	62, 80, 83, 576, 326, 61, 14, 15, 16, 17,
	62, 325, 142, 144, 62, 88, 465, 138, 466, 92,
	465, 48, 466, 44, 109, 62, 573, 111, 424, 18,
	465, 81, 466, 140, 412, 661, 363, 364, 121, 81,
	148, 398, 123, 245, 62, 372, 289, 299, 301, 298,
	94, 117, 118, 113, 99, 236, 146, 353, 62, 669,
	81, 62, 321, 343, 467, 106, 353, 293, 467, 673,
	333, 62, 116, 83, 488, 600, 111, 307, 467, 147,
	143, 83, 324, 147, 114, 468, 308, 303, 666, 468,
	62, 630, 633, 62, 119, 312, 332, 331, 122, 468,
	541, 125, 83, 602, 103, 320, 19, 20, 22, 21,
	23, 139, 667, 333, 332, 331, 648, 235, 331, 24,
	25, 26, 448, 72, 652, 265, 45, 46, 47, 120,
	305, 333, 67, 306, 333, 145, 446, 447, 445, 332,
	331, 74, 71, 342, 341, 351, 352, 344, 345, 346,
	347, 348, 349, 350, 343, 97, 333, 353, 138, 90,
	543, 488, 82, 549, 423, 89, 115, 542, 93, 435,
	437, 438, 477, 330, 436, 657, 423, 334, 559, 423,
	533, 344, 345, 346, 347, 348, 349, 350, 343, 585,
	586, 353, 342, 341, 351, 352, 344, 345, 346, 347,
	348, 349, 350, 343, 332, 331, 353, 375, 346, 347,
	348, 349, 350, 343, 383, 138, 353, 329, 415, 76,
	115, 333, 405, 423, 128, 444, 582, 132, 66, 30,
	69, 332, 331, 82, 387, 388, 389, 390, 391, 392,
	393, 82, 406, 291, 578, 423, 401, 65, 333, 70,
	77, 73, 68, 75, 405, 418, 545, 423, 425, 583,
	581, 559, 82, 323, 525, 526, 527, 477, 423, 405,
	432, 433, 442, 420, 332, 331, 423, 512, 464, 62,
	422, 423, 239, 405, 234, 361, 439, 643, 415, 136,
	399, 333, 127, 95, 476, 478, 259, 258, 260, 261,
	262, 263, 130, 646, 264, 645, 614, 490, 469, 470,
	138, 615, 679, 611, 610, 612, 682, 481, 482, 413,
	613, 56, 57, 681, 115, 496, 492, 495, 676, 317,
	316, 485, 102, 479, 480, 674, 663, 312, 147, 41,
	513, 98, 312, 312, 505, 101, 499, 516, 664, 500,
	649, 491, 14, 493, 494, 510, 107, 508, 375, 574,
	312, 312, 312, 312, 616, 497, 567, 568, 62, 521,
	524, 312, 62, 59, 519, 520, 511, 319, 147, 60,
	443, 442, 294, 126, 571, 102, 528, 430, 563, 566,
	567, 568, 564, 535, 565, 569, 53, 54, 644, 605,
	539, 540, 31, 315, 544, 431, 329, 268, 498, 604,
	551, 314, 552, 553, 554, 555, 538, 558, 33, 34,
	35, 36, 400, 234, 548, 78, 672, 550, 621, 14,
	536, 30, 32, 27, 1, 570, 108, 410, 577, 312,
	579, 580, 546, 407, 295, 575, 556, 572, 418, 38,
	506, 312, 402, 297, 86, 313, 135, 591, 322, 587,
	563, 566, 567, 568, 564, 483, 565, 569, 592, 662,
	584, 522, 603, 62, 595, 596, 557, 547, 382, 486,
	599, 244, 416, 434, 255, 252, 254, 253, 601, 443,
	131, 318, 617, 619, 335, 237, 471, 607, 291, 609,
	496, 141, 495, 312, 104, 606, 484, 608, 562, 560,
	489, 626, 137, 628, 629, 504, 634, 635, 404, 632,
	624, 625, 524, 637, 291, 62, 62, 62, 62, 365,
	366, 367, 368, 369, 370, 410, 618, 640, 291, 659,
	642, 639, 55, 641, 375, 81, 129, 647, 514, 29,
	515, 506, 518, 518, 518, 58, 13, 12, 651, 11,
	10, 9, 653, 8, 7, 6, 5, 4, 2, 656,
	0, 0, 0, 0, 658, 0, 0, 0, 0, 0,
	668, 665, 654, 655, 0, 0, 0, 83, 675, 351,
	352, 344, 345, 346, 347, 348, 349, 350, 343, 680,
	0, 353, 0, 506, 506, 506, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 0, 440, 0,
	0, 449, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 463, 342, 341, 351, 352,
	344, 345, 346, 347, 348, 349, 350, 343, 0, 362,
	353, 342, 341, 351, 352, 344, 345, 346, 347, 348,
	349, 350, 343, 85, 0, 353, 0, 0, 0, 0,
	0, 598, 0, 371, 0, 0, 0, 376, 377, 378,
	379, 380, 381, 0, 384, 386, 386, 386, 386, 386,
	386, 386, 386, 394, 395, 396, 397, 0, 64, 291,
	0, 0, 622, 91, 623, 0, 91, 0, 64, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 64, 0, 419, 0, 529,
	530, 531, 0, 426, 427, 428, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 82, 0, 0,
	64, 0, 0, 0, 0, 0, 64, 0, 0, 64,
	0, 0, 91, 0, 0, 91, 0, 0, 0, 64,
	0, 0, 0, 0, 64, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 341, 351, 352, 344, 345, 346, 347, 348,
	349, 350, 343, 0, 507, 353, 589, 590, 0, 0,
	0, 0, 72, 0, 0, 473, 0, 241, 0, 0,
	0, 67, 0, 0, 0, 0, 276, 0, 0, 0,
	74, 71, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 84, 259,
	258, 260, 261, 262, 263, 0, 0, 264, 256, 257,
	0, 627, 238, 250, 0, 275, 0, 0, 0, 14,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 247, 248, 310, 0, 67,
	0, 287, 0, 249, 0, 0, 246, 251, 74, 71,
	0, 0, 0, 0, 0, 507, 0, 0, 76, 650,
	419, 285, 0, 138, 0, 0, 63, 66, 0, 69,
	0, 277, 286, 283, 284, 281, 282, 280, 279, 278,
	288, 271, 272, 274, 0, 273, 65, 0, 70, 77,
	73, 68, 75, 72, 0, 0, 0, 110, 0, 0,
	91, 0, 67, 0, 0, 0, 0, 507, 507, 507,
	507, 74, 71, 0, 0, 91, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 63,
	0, 112, 0, 0, 0, 66, 0, 69, 0, 0,
	0, 534, 631, 0, 0, 636, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 70, 77, 73, 68,
	75, 342, 341, 351, 352, 344, 345, 346, 347, 348,
	349, 350, 343, 0, 91, 353, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 91, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	69, 0, 91, 64, 0, 0, 64, 0, 0, 0,
	64, 0, 0, 91, 0, 0, 0, 65, 0, 70,
	77, 73, 68, 75, 72, 0, 91, 0, 91, 241,
	91, 91, 91, 67, 0, 0, 0, 0, 276, 0,
	0, 0, 74, 71, 0, 0, 0, 0, 269, 270,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	84, 259, 258, 260, 261, 262, 263, 0, 0, 264,
	256, 257, 0, 0, 238, 250, 0, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 310,
	0, 0, 0, 287, 0, 249, 0, 0, 246, 251,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 285, 0, 0, 0, 0, 0, 66,
	0, 69, 0, 277, 286, 283, 284, 281, 282, 280,
	279, 278, 288, 271, 272, 274, 0, 273, 65, 91,
	70, 77, 73, 68, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 64, 64, 64, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 91, 0, 0,
	91, 0, 91, 222, 213, 187, 224, 165, 179, 232,
	180, 181, 207, 154, 195, 72, 177, 0, 168, 150,
	174, 151, 166, 189, 67, 192, 164, 215, 198, 230,
	0, 202, 0, 74, 71, 0, 0, 191, 217, 193,
	212, 186, 208, 159, 201, 225, 178, 205, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 221, 176, 206, 149, 203, 0, 152, 155, 231,
	219, 171, 172, 0, 0, 0, 0, 0, 0, 0,
	190, 194, 209, 184, 0, 0, 0, 0, 0, 0,
	620, 0, 169, 0, 200, 0, 0, 0, 156, 153,
	188, 0, 0, 0, 158, 0, 170, 210, 0, 218,
	185, 76, 220, 183, 182, 223, 226, 216, 167, 175,
	66, 173, 69, 0, 162, 163, 160, 161, 196, 197,
	227, 228, 229, 211, 157, 0, 0, 214, 199, 65,
	0, 70, 77, 73, 68, 75, 222, 213, 187, 224,
	165, 179, 232, 180, 181, 207, 154, 195, 72, 177,
	0, 168, 150, 174, 151, 166, 189, 67, 192, 164,
	215, 198, 230, 0, 202, 0, 74, 71, 0, 0,
	191, 217, 193, 212, 186, 208, 159, 201, 225, 178,
	205, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 221, 176, 206, 149, 203, 0,
	152, 155, 231, 219, 171, 172, 0, 0, 0, 0,
	0, 0, 0, 190, 194, 209, 184, 0, 0, 0,
	0, 0, 0, 509, 0, 169, 0, 200, 0, 0,
	0, 156, 153, 188, 0, 0, 0, 158, 0, 170,
	210, 0, 218, 185, 76, 220, 183, 182, 223, 226,
	216, 167, 175, 66, 173, 69, 0, 162, 163, 160,
	161, 196, 197, 227, 228, 229, 211, 157, 0, 0,
	214, 199, 65, 0, 70, 77, 73, 68, 75, 222,
	213, 187, 224, 165, 179, 232, 180, 181, 207, 154,
	195, 72, 177, 0, 168, 150, 174, 151, 166, 189,
	67, 192, 164, 215, 198, 230, 0, 202, 0, 74,
	71, 0, 0, 191, 217, 193, 212, 186, 208, 159,
	201, 225, 178, 205, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 221, 176, 206,
	149, 203, 0, 152, 155, 231, 219, 171, 172, 0,
	0, 0, 0, 0, 0, 0, 190, 194, 209, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	200, 0, 0, 0, 156, 153, 188, 0, 0, 0,
	158, 0, 170, 210, 0, 218, 185, 76, 220, 183,
	182, 223, 226, 216, 167, 175, 66, 173, 69, 0,
	162, 163, 160, 161, 196, 197, 227, 228, 229, 211,
	157, 0, 0, 214, 199, 65, 0, 70, 77, 73,
	68, 75, 222, 213, 187, 224, 165, 179, 232, 180,
	181, 207, 154, 195, 72, 177, 0, 168, 150, 174,
	151, 166, 189, 67, 192, 164, 215, 198, 230, 0,
	202, 0, 74, 71, 0, 0, 191, 217, 193, 212,
	186, 208, 159, 201, 225, 178, 205, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	221, 176, 206, 149, 203, 0, 152, 155, 231, 219,
	171, 172, 0, 0, 0, 0, 0, 0, 0, 190,
	194, 209, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 200, 0, 0, 0, 156, 153, 188,
	0, 0, 0, 158, 0, 170, 210, 0, 218, 185,
	76, 220, 183, 182, 223, 226, 216, 167, 175, 66,
	173, 69, 0, 162, 163, 160, 161, 196, 197, 227,
	228, 229, 211, 157, 0, 0, 214, 199, 65, 0,
	70, 77, 73, 68, 75, 222, 213, 187, 224, 165,
	179, 232, 180, 181, 207, 154, 195, 72, 177, 0,
	168, 150, 174, 151, 166, 189, 67, 192, 164, 215,
	198, 230, 0, 202, 0, 74, 71, 0, 0, 191,
	217, 193, 212, 186, 208, 159, 201, 225, 178, 205,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 221, 176, 206, 149, 203, 0, 152,
	155, 231, 219, 171, 172, 0, 0, 0, 0, 0,
	0, 0, 190, 194, 209, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 200, 0, 0, 0,
	156, 153, 188, 0, 0, 0, 158, 0, 170, 210,
	0, 218, 185, 76, 220, 183, 182, 223, 226, 216,
	167, 175, 66, 173, 69, 0, 162, 163, 160, 161,
	196, 197, 227, 228, 229, 211, 157, 0, 0, 214,
	199, 65, 0, 70, 77, 73, 68, 75, 72, 0,
	0, 0, 0, 241, 0, 0, 0, 67, 0, 0,
	0, 0, 276, 0, 0, 0, 74, 71, 0, 0,
	0, 0, 269, 270, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 423, 84, 259, 258, 260, 261, 262,
	263, 0, 0, 264, 256, 257, 0, 0, 238, 250,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 0, 0, 0, 0, 287, 0, 249,
	0, 0, 246, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 285, 0, 0,
	0, 0, 0, 66, 0, 69, 0, 277, 286, 283,
	284, 281, 282, 280, 279, 278, 288, 271, 272, 274,
	14, 273, 65, 0, 70, 77, 73, 68, 75, 0,
	0, 72, 0, 0, 0, 0, 241, 0, 0, 0,
	67, 0, 0, 0, 0, 276, 0, 0, 0, 74,
	71, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 84, 259, 258,
	260, 261, 262, 263, 0, 0, 264, 256, 257, 0,
	0, 238, 250, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	287, 0, 249, 0, 0, 246, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	285, 0, 0, 0, 0, 0, 66, 0, 69, 0,
	277, 286, 283, 284, 281, 282, 280, 279, 278, 288,
	271, 272, 274, 0, 273, 65, 0, 70, 77, 73,
	68, 75, 72, 0, 0, 0, 0, 241, 0, 0,
	0, 67, 0, 0, 0, 0, 276, 0, 0, 0,
	74, 71, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 84, 259,
	258, 260, 261, 262, 263, 0, 0, 264, 256, 257,
	0, 0, 238, 250, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 0, 0, 0,
	0, 287, 0, 249, 0, 0, 246, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 285, 0, 0, 0, 0, 0, 66, 0, 69,
	0, 277, 286, 283, 284, 281, 282, 280, 279, 278,
	288, 271, 272, 274, 72, 273, 65, 0, 70, 77,
	73, 68, 75, 67, 0, 0, 0, 0, 276, 0,
	0, 0, 74, 71, 0, 0, 0, 0, 269, 270,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	84, 259, 258, 260, 261, 262, 263, 0, 0, 264,
	256, 257, 0, 0, 0, 250, 0, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 0,
	0, 0, 0, 287, 0, 249, 0, 0, 246, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 285, 0, 0, 0, 0, 0, 66,
	0, 69, 0, 277, 286, 283, 284, 281, 282, 280,
	279, 278, 288, 271, 272, 274, 72, 273, 65, 0,
	70, 77, 73, 68, 75, 67, 0, 0, 0, 0,
	276, 0, 0, 0, 74, 71, 0, 0, 0, 0,
	269, 270, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 84, 259, 258, 260, 261, 262, 263, 0,
	0, 264, 0, 72, 0, 0, 0, 250, 0, 275,
	0, 0, 67, 0, 0, 72, 0, 0, 0, 0,
	0, 74, 71, 0, 67, 0, 0, 0, 0, 247,
	248, 0, 0, 74, 71, 287, 0, 249, 0, 90,
	246, 251, 133, 0, 0, 134, 0, 0, 138, 0,
	0, 63, 76, 0, 0, 285, 0, 0, 0, 0,
	0, 66, 0, 69, 0, 277, 286, 283, 284, 281,
	282, 280, 279, 278, 288, 271, 272, 274, 0, 273,
	65, 0, 70, 77, 73, 68, 75, 72, 0, 0,
	0, 409, 0, 0, 0, 0, 67, 0, 0, 76,
	0, 0, 0, 0, 0, 74, 71, 0, 66, 0,
	69, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 69, 90, 0, 411, 0, 65, 72, 70,
	77, 73, 68, 75, 0, 332, 331, 67, 0, 65,
	72, 70, 77, 73, 68, 75, 74, 71, 0, 67,
	0, 0, 333, 0, 72, 0, 0, 0, 74, 71,
	0, 0, 105, 67, 90, 0, 411, 0, 0, 0,
	0, 0, 74, 71, 0, 0, 63, 0, 112, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 72,
	63, 0, 66, 0, 69, 0, 0, 0, 67, 0,
	0, 72, 0, 0, 0, 0, 0, 74, 71, 0,
	67, 65, 0, 70, 77, 73, 68, 75, 0, 74,
	71, 0, 0, 0, 76, 84, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 69, 76, 90, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 69, 0, 0,
	76, 0, 65, 72, 70, 77, 73, 68, 75, 66,
	0, 69, 67, 0, 65, 0, 70, 77, 73, 68,
	75, 74, 71, 0, 0, 0, 0, 0, 65, 0,
	70, 77, 73, 68, 75, 76, 0, 0, 0, 63,
	0, 0, 0, 0, 66, 0, 69, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 69, 0,
	0, 0, 0, 65, 0, 70, 77, 73, 68, 75,
	0, 0, 0, 0, 0, 65, 0, 70, 77, 73,
	68, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 65, 340, 70,
	77, 73, 68, 75, 354, 355, 356, 357, 358, 359,
	360, 0, 338, 339, 336, 342, 341, 351, 352, 344,
	345, 346, 347, 348, 349, 350, 343, 0, 0, 353,
}
var yyPact = [...]int{

	80, -1000, -116, 506, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -41,
	-38, -8, 95, -10, -1000, -1000, -1000, -1000, -1000, 503,
	457, 364, -1000, -62, 2826, 495, 2762, -64, -17, 2774,
	-1000, -12, 2774, -1000, 2826, -65, 182, -65, 2826, -1000,
	-1000, -1000, -1000, -1000, -1000, 392, -1000, -1000, 123, 2727,
	407, 1016, 30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2826, 195,
	-1000, 77, -1000, 28, -1000, -1000, 2826, 107, 156, -1000,
	-1000, -1000, 2826, -1000, -40, 2826, 441, 323, 2774, -1000,
	342, 2576, -1000, -1000, 340, 2826, -1000, 2762, 45, -1000,
	2713, -1000, -1000, 1890, 492, 2762, 2285, 1747, -1000, 440,
	-71, -1000, 20, -1000, 2826, -1000, -1000, 2826, -1000, 1147,
	-1000, 473, -1000, 379, 378, 426, 2762, 2774, -1000, -1000,
	353, -1000, -21, -28, -34, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 472, 2285, -1000, 154, -1000, 2285, 2899,
	-1000, 188, -1000, 12, -1000, -1000, 2529, 2529, 2529, 2529,
	2529, 2529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 188, 22, -1000, 2154, 188,
	188, 188, 188, 188, 188, 2285, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, -1000,
	18, -1000, -1000, -1000, -1000, 321, 2774, -1000, -45, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 312, -1000,
	-1000, 2660, 11, 2826, -1000, -1000, -1000, -1000, 319, 188,
	506, 249, 309, 5, 472, 188, 188, 188, 451, 470,
	154, 2285, 2285, 187, 68, 2407, 245, 133, 2529, 2529,
	2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529,
	2529, 2529, 2529, 57, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 503, 322, 322, 37, 37, 37, 37, 37,
	186, 885, 1747, 304, 296, 154, 1147, 1147, 2285, 2285,
	2774, 445, 83, 154, 2774, -1000, 192, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1147, 1147, 1147, 1147, 1604, 2826,
	-1000, -1000, 2826, -1000, 492, 1147, 2588, -1000, -1000, 2701,
	-1000, -1000, 1461, -1000, -1000, 430, 306, -1000, -1000, 2021,
	-1000, -1000, 2774, -1000, 2774, 451, 2774, 2774, 2774, -1000,
	2285, 2285, 68, 132, -1000, -1000, 282, -1000, -1000, -1000,
	645, -1000, -1000, -1000, -1000, 245, 2529, 2529, 2529, 137,
	645, 1015, 581, 795, 37, 196, 196, 46, 46, 46,
	46, 46, 171, 171, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 192, 1147, 298, 188, -1000, 2285, -1000, 251,
	251, 129, 219, 285, -1000, 1147, 170, -1000, 2285, 192,
	-1000, 251, 192, 251, 251, -1000, -1000, -1000, -1000, 485,
	-1000, 290, 501, -1000, -1000, -1000, 443, 953, -1000, -1000,
	3, 412, 188, -1000, -20, -1000, -1000, 273, -1000, 273,
	273, 289, 288, -1000, 246, -1000, -1000, -1000, -1000, 137,
	645, 630, -1000, 2529, 2529, -1000, 251, 1147, 154, -1000,
	-1000, 57, 57, 57, -97, 2774, 283, 81, -1000, 2285,
	111, -1000, -1000, -1000, -1000, -1000, -1000, 476, 464, 2588,
	2588, 2588, 2588, -1000, 355, 354, -1000, 356, 347, 405,
	2826, -1000, 207, 1318, 500, -1000, 2774, -1000, 2774, -1000,
	-1000, 2285, 2285, 2285, -1000, -1000, -1000, -1000, 2529, 645,
	645, -1000, 192, 192, 47, 192, 192, 188, -1000, -93,
	-1000, 154, 2285, 472, 2285, 2285, 501, 318, 429, -1000,
	-1000, -1000, -1000, 346, -1000, 344, -1000, -1000, -1000, -1000,
	-1000, 2762, -1000, -1000, 154, 154, -1000, 645, -1000, -1000,
	-1000, 140, -1000, 401, -1000, -1000, 2529, 192, 149, 154,
	451, 154, 201, 2285, 2285, -1000, -1000, 195, 204, 57,
	-29, -1000, -1000, 398, 154, 154, 43, 136, -1000, 192,
	-3, -106, -1000, 498, 64, -1000, 386, 192, -1000, 372,
	-101, -109, -1000, 357, 57, -1000, -1000, 367, -1000, 360,
	-1000, -103, -1000, -107, -113, -1000,
}
var yyPgo = [...]int{

	0, 648, 49, 647, 646, 645, 644, 643, 641, 640,
	639, 637, 636, 482, 635, 629, 29, 626, 622, 619,
	603, 9, 36, 10, 23, 18, 598, 19, 25, 16,
	595, 589, 2, 588, 85, 584, 424, 581, 26, 21,
	575, 30, 574, 571, 24, 362, 570, 567, 566, 565,
	564, 563, 20, 14, 562, 15, 12, 561, 123, 3,
	559, 17, 558, 557, 556, 552, 13, 551, 7, 550,
	1, 549, 545, 538, 536, 31, 5, 81, 535, 419,
	373, 534, 533, 532, 529, 524, 6, 743, 205, 8,
	27, 523, 45, 22, 104, 516, 515, 28, 4, 11,
	514, 513, 512, 487, 0, 35,
}
var yyR1 = [...]int{

	0, 100, 101, 101, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 3, 3,
	4, 5, 6, 7, 7, 7, 8, 8, 8, 9,
	10, 10, 10, 11, 12, 12, 12, 102, 13, 14,
	14, 15, 15, 15, 18, 18, 18, 16, 16, 17,
	17, 23, 23, 22, 22, 24, 24, 24, 24, 91,
	91, 91, 90, 90, 26, 26, 27, 27, 28, 28,
	29, 29, 29, 36, 30, 30, 30, 30, 96, 96,
	95, 95, 95, 94, 94, 31, 31, 31, 31, 32,
	32, 32, 32, 33, 33, 35, 35, 34, 34, 37,
	37, 37, 37, 38, 38, 39, 39, 25, 25, 25,
	25, 25, 25, 41, 41, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 51, 51, 51,
	51, 51, 51, 42, 42, 42, 42, 42, 42, 42,
	21, 21, 52, 52, 52, 58, 53, 53, 98, 98,
	98, 98, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 49, 49, 49, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 48,
	48, 105, 105, 50, 50, 50, 50, 19, 19, 19,
	19, 19, 99, 99, 99, 99, 99, 99, 99, 99,
	62, 62, 20, 20, 60, 60, 61, 63, 63, 59,
	59, 59, 44, 44, 44, 44, 44, 44, 44, 46,
	46, 46, 64, 64, 65, 65, 66, 66, 67, 67,
	68, 69, 69, 69, 70, 70, 70, 70, 71, 71,
	71, 72, 72, 74, 74, 73, 73, 73, 73, 75,
	75, 43, 43, 54, 54, 56, 56, 55, 57, 76,
	76, 77, 78, 78, 80, 80, 81, 81, 79, 79,
	82, 82, 82, 82, 82, 82, 83, 83, 84, 84,
	85, 85, 88, 88, 89, 89, 92, 92, 93, 93,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 103, 104, 97,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 13, 7, 3, 7, 7,
	8, 7, 3, 5, 8, 4, 6, 7, 4, 5,
	4, 5, 5, 3, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 1, 1, 1, 3, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 2, 4, 5, 7, 2, 4, 6,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 1, 3, 0, 3, 1, 3, 3, 5, 0,
	5, 2, 1, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -100, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -11, -12, 6, 7, 8, 9, 29, 106,
	107, 109, 108, 110, 119, 120, 121, -101, 148, -15,
	5, -13, -102, -13, -13, -13, -13, 111, -84, 113,
	117, -79, 113, 115, 111, 111, 112, 113, 111, -97,
	-97, -97, -2, 19, 20, -18, 37, 38, -14, -79,
	-36, -34, -92, 53, -87, 141, 122, 26, 146, 124,
	143, 36, 17, 145, 35, 147, 113, 144, 10, -76,
	-77, -59, -88, -92, 53, -87, -81, 116, 112, -88,
	53, -87, 111, -88, -34, -80, 116, 53, -80, -34,
	-16, 33, 20, 61, -35, 25, -34, 29, -95, -94,
	21, -92, 55, 103, -34, 51, 75, 103, -92, 67,
	53, -97, -34, -97, 114, -34, 22, 49, -88, -17,
	40, -46, -88, 56, 59, -74, 29, -103, 50, -34,
	-76, -37, 47, 115, 48, -94, -93, -92, -86, 66,
	21, 23, 69, 101, 15, 70, 100, 136, 106, 45,
	128, 129, 126, 127, 28, 9, 24, 120, 20, 94,
	108, 73, 74, 123, 22, 121, 64, 18, 48, 10,
	12, 13, 116, 115, 85, 112, 43, 7, 102, 25,
	82, 39, 27, 41, 83, 16, 130, 131, 30, 140,
	96, 46, 33, 67, 62, 49, 65, 14, 44, 84,
	109, 135, 42, 6, 139, 29, 119, 40, 111, 72,
	114, 63, 5, 117, 8, 47, 118, 132, 133, 134,
	31, 71, 11, -39, 11, -77, -25, -40, 67, -45,
	-41, 22, -44, -59, -57, -58, 101, 90, 91, 98,
	68, 102, -49, -47, -48, -50, 63, 64, 55, 54,
	56, 57, 58, 59, 62, -88, -92, -55, -103, 41,
	42, 136, 137, 140, 138, 70, 31, 126, 134, 133,
	132, 130, 131, 128, 129, 116, 127, 96, 135, -89,
	-93, -88, -86, -97, 22, -85, 118, -82, 109, 107,
	28, 108, 14, 147, 53, -34, -34, -97, -22, -24,
	92, -25, -92, -78, 18, 10, 31, 31, -43, 31,
	-2, -76, -73, -88, -39, 112, 112, 112, -66, 14,
	-25, 66, 65, 82, -25, -42, 85, 67, 83, 84,
	69, 87, 86, 97, 90, 91, 92, 93, 94, 95,
	96, 88, 89, 100, 75, 76, 77, 78, 79, 80,
	81, -58, -103, 104, 105, -45, -45, -45, -45, -45,
	-45, -103, 103, -2, -53, -25, -103, -103, -103, -103,
	-103, -103, -62, -25, -103, -105, -103, -105, -105, -105,
	-105, -105, -105, -105, -103, -103, -103, -103, 103, 49,
	-88, -97, -83, 114, -26, 51, 10, -91, -90, 21,
	-88, 55, 103, -34, -75, 49, -54, -56, -55, -103,
	-75, -104, 51, 52, 103, -66, -103, -103, -103, -70,
	16, 15, -25, -25, -51, 62, 67, 63, 64, -41,
	-45, -52, -55, -58, 60, 85, 83, 84, 69, -45,
	-45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
	-45, -45, -45, -45, -98, 53, 55, 101, 122, -44,
	-44, -88, -23, 20, -22, -89, -104, 51, -104, -22,
	-22, -25, -25, -72, -88, -16, -60, -61, 71, -88,
	-104, -22, -23, -22, -22, -89, -86, -92, -34, -39,
	-24, -27, -28, -29, -30, -36, -58, -103, -90, 92,
	-93, 26, 51, -104, -88, -88, -70, -38, -88, -38,
	-38, -25, -67, -68, -25, 62, 63, 64, -52, -45,
	-45, -45, -21, 123, 66, -104, -22, -103, -25, -104,
	-104, 51, 118, 21, -104, 51, -22, -63, -61, 73,
	-25, -104, -104, -104, -104, -104, -97, -64, 12, 51,
	-31, -32, -33, 39, 43, 45, 40, 41, 42, 46,
	-96, 21, -27, 103, 27, -56, 103, -104, 51, -104,
	-104, 51, 17, 51, -69, 23, 24, -21, 66, -45,
	-45, -104, -23, -99, -98, -99, -99, 141, -88, -66,
	74, -25, 72, -65, 13, 15, -28, -29, -28, -29,
	39, 39, 39, 44, 39, 44, 39, -32, -92, -104,
	92, 8, -88, -88, -25, -25, -68, -45, -104, -104,
	124, -103, -98, 125, -104, -104, -103, -20, 139, -25,
	-66, -25, -53, 49, 49, 39, 39, -76, 56, 29,
	-45, -104, 55, -70, -25, -25, -104, 51, -98, -19,
	85, 144, -71, 18, 30, -98, 125, 56, -104, 142,
	46, 145, 8, 85, 29, -104, 36, 143, 146, 35,
	-98, 36, 36, 144, 145, 146,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 37, 37, 37, 37, 37, 298,
	288, 0, 0, 0, 409, 409, 409, 1, 3, 0,
	41, 44, 39, 288, 0, 0, 0, 286, 0, 0,
	299, 0, 0, 289, 0, 284, 0, 284, 0, 34,
	35, 36, 17, 42, 43, 47, 45, 46, 38, 0,
	0, 80, 97, 306, 307, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 404, 405, 406, 0, 22,
	279, 0, 229, 0, -2, -2, 0, 0, 0, 409,
	302, 303, 0, 409, 0, 0, 0, 0, 0, 33,
	49, 0, 48, 40, 263, 0, 96, 0, 99, 81,
	0, 83, 84, 0, 105, 0, 0, 0, 409, 0,
	300, 25, 0, 28, 0, 30, 285, 0, 409, 0,
	50, 0, 239, 0, 0, 0, 0, 0, 407, 95,
	105, 73, 0, 0, 0, 82, 98, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 246, 0, 280, 281, 107, 0, 112,
	115, 0, 152, 153, 154, 155, 0, 0, 0, 0,
	0, 0, 177, 178, 179, 180, 113, 114, 232, 233,
	234, 235, 236, 237, 238, 229, 0, 278, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 201, 201, 201,
	201, 201, 201, 201, 201, 0, 0, 0, 0, 230,
	0, 304, -2, 23, 287, 0, 0, 409, 296, 290,
	291, 292, 293, 294, 295, 29, 31, 32, 64, 53,
	55, 59, 0, 0, 282, 283, 240, 241, 269, 0,
	272, 269, 0, 265, 246, 0, 0, 0, 254, 0,
	106, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 134, 135, 136, 137, 138,
	139, 126, 0, 0, 0, 171, 172, 173, 174, 175,
	0, 51, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 47, 0, 221, 0, 193, 0, 194, 195, 196,
	197, 198, 199, 200, 0, 51, 0, 0, 0, 0,
	301, 26, 0, 297, 105, 0, 0, 56, 60, 0,
	62, 63, 0, 16, 18, 0, 271, 273, 275, 0,
	19, 264, 0, 408, 0, 254, 0, 0, 0, 21,
	0, 0, 108, 109, 111, 127, 0, 129, 131, 116,
	117, 118, 142, 143, 144, 0, 0, 0, 0, 140,
	122, 0, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 170, 148, 149, 150, 151, 168,
	169, 176, 0, 0, 52, 230, 145, 0, 277, 0,
	0, 0, 0, 0, 261, 0, 227, 224, 0, 0,
	202, 0, 0, 0, 0, 231, 305, 409, 27, 242,
	54, 65, 66, 68, 69, 70, 78, 0, 61, 57,
	0, 0, 0, 276, 267, 266, 20, 0, 103, 0,
	0, 255, 247, 248, 251, 128, 130, 132, 119, 140,
	123, 0, 120, 0, 0, 181, 0, 51, 147, 184,
	185, 0, 0, 0, 0, 0, 246, 0, 225, 0,
	0, 192, 203, 204, 205, 206, 24, 244, 0, 0,
	0, 0, 0, 85, 0, 0, 88, 0, 0, 0,
	0, 79, 0, 0, 0, 274, 0, 100, 0, 101,
	102, 0, 0, 0, 250, 252, 253, 121, 0, 141,
	124, 182, 0, 0, 212, 0, 0, 0, 262, 222,
	191, 228, 0, 246, 0, 0, 67, 74, 0, 77,
	86, 87, 89, 0, 91, 0, 93, 94, 71, 72,
	58, 0, 268, 104, 256, 257, 249, 125, 183, 186,
	213, 0, 217, 0, 187, 188, 0, 0, 0, 226,
	254, 245, 243, 0, 0, 90, 92, 270, 0, 0,
	207, 190, 223, 258, 75, 76, 214, 0, 218, 0,
	0, 0, 15, 0, 0, 215, 0, 0, 189, 0,
	0, 0, 259, 0, 0, 219, 208, 0, 211, 0,
	216, 209, 260, 0, 0, 210,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 148,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:199
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:204
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:205
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:209
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 15:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:225
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), OrderBy: yyDollar[11].orderBy, Limit: yyDollar[12].limit, Lock: yyDollar[13].str}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:233
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:239
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:243
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:255
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:261
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:267
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:273
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: &TableName{Name: yyDollar[4].tableIdent}}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:277
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: &TableName{Name: yyDollar[7].tableIdent}, NewName: &TableName{Name: yyDollar[7].tableIdent}}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:282
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: &TableName{Name: NewTableIdent(yyDollar[3].colIdent.Lowered())}}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:292
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:297
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: &TableName{Name: NewTableIdent(yyDollar[3].colIdent.Lowered())}, NewName: &TableName{Name: NewTableIdent(yyDollar[3].colIdent.Lowered())}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:303
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:309
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:317
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:322
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: &TableName{Name: NewTableIdent(yyDollar[4].colIdent.Lowered())}, IfExists: exists}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:332
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:338
		{
			yyVAL.statement = &Other{}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:342
		{
			yyVAL.statement = &Other{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:346
		{
			yyVAL.statement = &Other{}
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:351
		{
			setAllowComments(yylex, true)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:355
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:361
		{
			yyVAL.bytes2 = nil
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:365
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:371
		{
			yyVAL.str = UnionStr
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:375
		{
			yyVAL.str = UnionAllStr
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:379
		{
			yyVAL.str = UnionDistinctStr
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:384
		{
			yyVAL.str = ""
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:388
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:392
		{
			yyVAL.str = SQLCacheStr
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:397
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:401
		{
			yyVAL.str = DistinctStr
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:406
		{
			yyVAL.str = ""
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:410
		{
			yyVAL.str = StraightJoinHint
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:415
		{
			yyVAL.selectExprs = nil
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:419
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:425
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:429
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:435
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:439
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:443
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:447
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:452
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:456
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:460
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:467
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:472
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:476
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:482
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:486
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:496
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:500
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:504
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:510
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:523
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:527
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:531
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:535
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:540
		{
			yyVAL.empty = struct{}{}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:542
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:545
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:549
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:553
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:560
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:566
		{
			yyVAL.str = JoinStr
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:570
		{
			yyVAL.str = JoinStr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:574
		{
			yyVAL.str = JoinStr
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:578
		{
			yyVAL.str = StraightJoinStr
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:584
		{
			yyVAL.str = LeftJoinStr
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:588
		{
			yyVAL.str = LeftJoinStr
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:592
		{
			yyVAL.str = RightJoinStr
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:596
		{
			yyVAL.str = RightJoinStr
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:602
		{
			yyVAL.str = NaturalJoinStr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:606
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:616
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:620
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:626
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:630
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:635
		{
			yyVAL.indexHints = nil
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:639
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:643
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:647
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:653
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:657
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:662
		{
			yyVAL.expr = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:666
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:672
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:676
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:680
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:684
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:688
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:692
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:702
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:708
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:712
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:716
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:720
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:724
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:728
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:732
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:744
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:748
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:752
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:758
		{
			yyVAL.str = IsNullStr
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:762
		{
			yyVAL.str = IsNotNullStr
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:766
		{
			yyVAL.str = IsTrueStr
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:770
		{
			yyVAL.str = IsNotTrueStr
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:774
		{
			yyVAL.str = IsFalseStr
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:778
		{
			yyVAL.str = IsNotFalseStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:784
		{
			yyVAL.str = EqualStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:788
		{
			yyVAL.str = LessThanStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:792
		{
			yyVAL.str = GreaterThanStr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:796
		{
			yyVAL.str = LessEqualStr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:800
		{
			yyVAL.str = GreaterEqualStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:804
		{
			yyVAL.str = NotEqualStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:808
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:813
		{
			yyVAL.expr = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:817
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:823
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:827
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:831
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:837
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:843
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:847
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:857
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:861
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:871
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:875
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:879
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:883
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:887
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:891
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:943
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:947
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:951
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:959
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:973
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:977
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:981
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:999
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1003
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1007
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1017
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1021
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1025
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1029
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1033
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 189:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1037
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 190:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1041
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1045
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1049
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1063
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1067
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1071
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1076
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1081
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1086
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1117
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1123
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1127
		{
			yyVAL.str = BooleanModeStr
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1131
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1135
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1139
		{
			yyVAL.str = QueryExpansionStr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1146
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1150
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1154
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1158
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1162
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1166
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1170
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1174
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1179
		{
			yyVAL.expr = nil
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1183
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1188
		{
			yyVAL.str = string("")
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1192
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1198
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1202
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1208
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1213
		{
			yyVAL.expr = nil
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1217
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1223
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1227
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1231
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1237
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1241
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1245
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1249
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1253
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1257
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1261
		{
			yyVAL.expr = &NullVal{}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1267
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1276
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1280
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1285
		{
			yyVAL.exprs = nil
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1289
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1294
		{
			yyVAL.expr = nil
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1298
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1303
		{
			yyVAL.orderBy = nil
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1307
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1313
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1317
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1323
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1328
		{
			yyVAL.str = AscScr
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1332
		{
			yyVAL.str = AscScr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1336
		{
			yyVAL.str = DescScr
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1341
		{
			yyVAL.limit = nil
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1345
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1349
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1353
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1358
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1362
		{
			yyVAL.str = ForUpdateStr
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1366
		{
			yyVAL.str = ShareModeStr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1372
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1376
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1381
		{
			yyVAL.columns = nil
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1385
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1391
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1395
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1399
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1403
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1408
		{
			yyVAL.updateExprs = nil
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1412
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1418
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1422
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1428
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1432
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1438
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1442
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1448
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1454
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1464
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1468
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1474
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1483
		{
			yyVAL.byt = 0
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1485
		{
			yyVAL.byt = 1
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1488
		{
			yyVAL.empty = struct{}{}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1490
		{
			yyVAL.empty = struct{}{}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1493
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1495
		{
			yyVAL.str = IgnoreStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1499
		{
			yyVAL.empty = struct{}{}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1501
		{
			yyVAL.empty = struct{}{}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1503
		{
			yyVAL.empty = struct{}{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1505
		{
			yyVAL.empty = struct{}{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1507
		{
			yyVAL.empty = struct{}{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1509
		{
			yyVAL.empty = struct{}{}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1512
		{
			yyVAL.empty = struct{}{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1514
		{
			yyVAL.empty = struct{}{}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1517
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1519
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1522
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1524
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1528
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1532
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1539
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1545
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1549
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1556
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1678
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1687
		{
			decNesting(yylex)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1692
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
