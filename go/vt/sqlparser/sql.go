//line ./go/vt/sqlparser/sql.y:6
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:6
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:34
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        *TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	insRows          InsertRows
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
	tableOperation   TableOperation
	tableOperations  []TableOperation
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const INTEGER = 57449
const CHARACTER = 57450
const CURRENT_TIMESTAMP = 57451
const DATABASE = 57452
const CURRENT_DATE = 57453
const CURRENT_TIME = 57454
const LOCALTIME = 57455
const LOCALTIMESTAMP = 57456
const UTC_DATE = 57457
const UTC_TIME = 57458
const UTC_TIMESTAMP = 57459
const REPLACE = 57460
const CONVERT = 57461
const CAST = 57462
const GROUP_CONCAT = 57463
const SEPARATOR = 57464
const MATCH = 57465
const AGAINST = 57466
const BOOLEAN = 57467
const LANGUAGE = 57468
const WITH = 57469
const QUERY = 57470
const EXPANSION = 57471
const UNUSED = 57472

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 84,
	103, 309,
	-2, 305,
	-1, 85,
	103, 310,
	-2, 306,
	-1, 298,
	103, 312,
	-2, 308,
}

const yyNprod = 416
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3100

var yyAct = [...]int{

	428, 436, 335, 529, 600, 273, 250, 79, 381, 567,
	508, 123, 538, 599, 509, 424, 274, 507, 121, 318,
	246, 479, 494, 421, 448, 523, 240, 297, 415, 249,
	93, 316, 100, 49, 380, 3, 28, 691, 684, 690,
	62, 392, 83, 81, 247, 62, 677, 689, 62, 683,
	62, 481, 676, 126, 62, 603, 644, 302, 96, 50,
	51, 87, 233, 235, 52, 62, 43, 111, 666, 349,
	348, 358, 359, 351, 352, 353, 354, 355, 356, 357,
	350, 410, 216, 360, 62, 37, 42, 39, 43, 334,
	72, 40, 62, 80, 416, 90, 62, 333, 332, 67,
	88, 62, 61, 48, 62, 472, 44, 473, 74, 71,
	214, 62, 109, 83, 81, 231, 111, 308, 472, 238,
	473, 83, 81, 238, 370, 371, 127, 667, 418, 296,
	234, 306, 45, 46, 47, 582, 243, 299, 339, 338,
	579, 237, 89, 431, 419, 91, 405, 94, 675, 379,
	117, 99, 113, 474, 124, 340, 310, 472, 350, 473,
	360, 360, 106, 679, 72, 547, 474, 239, 338, 340,
	116, 298, 606, 67, 475, 119, 455, 672, 673, 339,
	338, 114, 74, 71, 340, 103, 76, 475, 495, 118,
	453, 454, 452, 213, 654, 66, 340, 69, 217, 658,
	127, 220, 495, 225, 555, 474, 226, 549, 230, 242,
	305, 307, 304, 120, 65, 588, 70, 77, 73, 68,
	75, 62, 62, 236, 97, 62, 475, 319, 636, 639,
	339, 338, 548, 430, 83, 81, 328, 608, 115, 314,
	353, 354, 355, 356, 357, 350, 311, 340, 360, 587,
	309, 339, 338, 339, 338, 484, 124, 252, 331, 589,
	76, 337, 327, 339, 338, 341, 451, 565, 340, 66,
	340, 69, 412, 315, 372, 373, 374, 375, 376, 377,
	340, 442, 444, 445, 663, 430, 443, 422, 65, 115,
	70, 77, 73, 68, 75, 382, 591, 592, 531, 532,
	533, 518, 390, 349, 348, 358, 359, 351, 352, 353,
	354, 355, 356, 357, 350, 565, 430, 360, 94, 312,
	412, 430, 313, 215, 272, 336, 62, 394, 395, 396,
	397, 398, 399, 400, 432, 584, 430, 408, 339, 338,
	539, 551, 430, 425, 351, 352, 353, 354, 355, 356,
	357, 350, 427, 124, 360, 340, 484, 430, 439, 440,
	449, 82, 412, 447, 30, 471, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 483, 485, 228, 319, 238, 649, 446, 413, 319,
	319, 482, 429, 430, 497, 422, 406, 241, 219, 652,
	476, 477, 275, 95, 124, 488, 489, 319, 319, 319,
	319, 430, 62, 222, 125, 62, 125, 502, 319, 62,
	651, 492, 617, 420, 499, 238, 224, 519, 616, 412,
	688, 482, 82, 298, 522, 486, 487, 115, 505, 687,
	82, 682, 125, 125, 506, 514, 382, 516, 685, 620,
	511, 98, 324, 498, 621, 500, 501, 527, 530, 41,
	525, 526, 266, 265, 267, 268, 269, 270, 323, 449,
	271, 56, 57, 298, 535, 536, 537, 534, 618, 622,
	541, 573, 574, 619, 669, 60, 319, 545, 546, 14,
	102, 550, 122, 59, 122, 580, 670, 557, 319, 558,
	559, 560, 561, 101, 544, 680, 368, 229, 655, 503,
	107, 517, 504, 300, 326, 556, 554, 218, 577, 62,
	31, 122, 562, 102, 583, 322, 585, 586, 53, 54,
	437, 578, 542, 321, 581, 425, 33, 34, 35, 36,
	611, 438, 336, 597, 552, 125, 610, 564, 593, 319,
	241, 78, 678, 82, 330, 605, 627, 14, 30, 32,
	595, 596, 601, 602, 27, 598, 1, 92, 576, 108,
	414, 62, 62, 62, 62, 607, 612, 301, 614, 625,
	38, 613, 624, 615, 409, 623, 303, 86, 320, 227,
	329, 502, 490, 632, 668, 590, 528, 609, 563, 634,
	635, 450, 640, 641, 553, 638, 389, 630, 631, 530,
	493, 251, 646, 423, 441, 633, 262, 259, 261, 260,
	648, 223, 325, 122, 342, 244, 232, 407, 645, 104,
	647, 382, 568, 83, 81, 653, 566, 510, 411, 643,
	665, 55, 221, 417, 657, 29, 58, 13, 659, 12,
	11, 369, 10, 9, 8, 662, 7, 6, 5, 4,
	664, 2, 0, 656, 0, 0, 674, 671, 0, 660,
	661, 512, 0, 0, 681, 378, 0, 0, 85, 383,
	384, 385, 386, 387, 388, 686, 391, 393, 393, 393,
	393, 393, 393, 393, 393, 401, 402, 403, 404, 0,
	0, 0, 478, 0, 125, 14, 15, 16, 17, 0,
	450, 0, 491, 64, 0, 0, 496, 0, 64, 0,
	0, 64, 0, 64, 0, 0, 0, 64, 18, 426,
	125, 0, 0, 0, 0, 433, 434, 435, 64, 0,
	64, 417, 0, 0, 125, 569, 572, 573, 574, 570,
	0, 571, 575, 0, 520, 650, 521, 64, 524, 524,
	524, 0, 0, 72, 0, 64, 0, 0, 128, 64,
	128, 512, 67, 0, 64, 0, 0, 64, 0, 0,
	128, 74, 71, 0, 64, 0, 0, 0, 0, 64,
	0, 0, 64, 0, 0, 0, 0, 128, 0, 127,
	0, 0, 0, 0, 0, 19, 20, 22, 21, 23,
	0, 0, 0, 0, 0, 0, 513, 0, 24, 25,
	26, 0, 0, 512, 512, 512, 512, 594, 125, 0,
	0, 0, 349, 348, 358, 359, 351, 352, 353, 354,
	355, 356, 357, 350, 0, 0, 360, 349, 348, 358,
	359, 351, 352, 353, 354, 355, 356, 357, 350, 76,
	0, 360, 0, 0, 0, 0, 0, 0, 66, 0,
	69, 569, 572, 573, 574, 570, 604, 571, 575, 0,
	0, 0, 0, 0, 0, 543, 0, 65, 0, 70,
	77, 73, 68, 75, 64, 64, 0, 0, 64, 128,
	0, 0, 0, 0, 125, 72, 122, 628, 128, 629,
	0, 0, 0, 0, 67, 0, 513, 0, 0, 283,
	0, 426, 0, 74, 71, 0, 0, 0, 0, 276,
	277, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 84, 266, 265, 267, 268, 269, 270, 0, 0,
	271, 0, 82, 0, 0, 0, 257, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 513,
	513, 513, 0, 72, 0, 0, 0, 110, 254, 255,
	0, 128, 67, 0, 294, 0, 256, 0, 0, 253,
	258, 74, 71, 0, 0, 0, 0, 128, 0, 64,
	0, 76, 0, 637, 292, 0, 642, 0, 0, 63,
	66, 112, 69, 0, 284, 293, 290, 291, 288, 289,
	287, 286, 285, 295, 278, 279, 281, 0, 280, 65,
	14, 70, 77, 73, 68, 75, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 128, 0, 0, 74,
	71, 0, 0, 0, 0, 0, 128, 0, 0, 76,
	128, 0, 0, 0, 124, 0, 0, 63, 66, 0,
	69, 0, 0, 0, 128, 64, 0, 0, 64, 0,
	0, 0, 64, 0, 0, 128, 0, 65, 72, 70,
	77, 73, 68, 75, 0, 0, 0, 67, 128, 0,
	128, 72, 128, 128, 128, 0, 74, 71, 0, 0,
	67, 0, 0, 0, 72, 0, 0, 0, 0, 74,
	71, 124, 0, 67, 63, 0, 0, 76, 0, 0,
	0, 0, 74, 71, 0, 0, 66, 127, 69, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 112, 0, 0, 65, 0, 70, 77, 73,
	68, 75, 358, 359, 351, 352, 353, 354, 355, 356,
	357, 350, 128, 0, 360, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 69, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 69, 0,
	76, 0, 65, 0, 70, 77, 73, 68, 75, 66,
	128, 69, 0, 0, 0, 65, 0, 70, 77, 73,
	68, 75, 0, 0, 64, 64, 64, 64, 65, 0,
	70, 77, 73, 68, 75, 64, 0, 0, 128, 0,
	0, 128, 0, 128, 202, 193, 167, 204, 145, 159,
	212, 160, 161, 187, 134, 175, 72, 157, 0, 148,
	130, 154, 131, 146, 169, 67, 172, 144, 195, 178,
	210, 0, 182, 0, 74, 71, 0, 0, 171, 197,
	173, 192, 166, 188, 139, 181, 205, 158, 185, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 201, 156, 186, 129, 183, 0, 132, 135,
	211, 199, 151, 152, 0, 0, 0, 0, 0, 0,
	0, 170, 174, 189, 164, 0, 0, 0, 0, 0,
	0, 626, 0, 149, 0, 180, 0, 0, 0, 136,
	133, 168, 0, 0, 0, 138, 0, 150, 190, 0,
	198, 165, 76, 200, 163, 162, 203, 206, 196, 147,
	155, 66, 153, 69, 0, 142, 143, 140, 141, 176,
	177, 207, 208, 209, 191, 137, 0, 0, 194, 179,
	65, 0, 70, 77, 73, 68, 75, 202, 193, 167,
	204, 145, 159, 212, 160, 161, 187, 134, 175, 72,
	157, 0, 148, 130, 154, 131, 146, 169, 67, 172,
	144, 195, 178, 210, 0, 182, 0, 74, 71, 0,
	0, 171, 197, 173, 192, 166, 188, 139, 181, 205,
	158, 185, 124, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 201, 156, 186, 129, 183,
	0, 132, 135, 211, 199, 151, 152, 0, 0, 0,
	0, 0, 0, 0, 170, 174, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 180, 0,
	0, 0, 136, 133, 168, 0, 0, 0, 138, 0,
	150, 190, 0, 198, 165, 76, 200, 163, 162, 203,
	206, 196, 147, 155, 66, 153, 69, 0, 142, 143,
	140, 141, 176, 177, 207, 208, 209, 191, 137, 0,
	0, 194, 179, 65, 0, 70, 77, 73, 68, 75,
	202, 193, 167, 204, 145, 159, 212, 160, 161, 187,
	134, 175, 72, 157, 0, 148, 130, 154, 131, 146,
	169, 67, 172, 144, 195, 178, 210, 0, 182, 0,
	74, 71, 0, 0, 171, 197, 173, 192, 166, 188,
	139, 181, 205, 158, 185, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 201, 156,
	186, 129, 183, 0, 132, 135, 211, 199, 151, 152,
	0, 0, 0, 0, 0, 0, 0, 170, 174, 189,
	164, 0, 0, 0, 0, 0, 0, 515, 0, 149,
	0, 180, 0, 0, 0, 136, 133, 168, 0, 0,
	0, 138, 0, 150, 190, 0, 198, 165, 76, 200,
	163, 162, 203, 206, 196, 147, 155, 66, 153, 69,
	0, 142, 143, 140, 141, 176, 177, 207, 208, 209,
	191, 137, 0, 0, 194, 179, 65, 0, 70, 77,
	73, 68, 75, 202, 193, 167, 204, 145, 159, 212,
	160, 161, 187, 134, 175, 72, 157, 0, 148, 130,
	154, 131, 146, 169, 67, 172, 144, 195, 178, 210,
	0, 182, 0, 74, 71, 0, 0, 171, 197, 173,
	192, 166, 188, 139, 181, 205, 158, 185, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 201, 156, 186, 129, 183, 0, 132, 135, 211,
	199, 151, 152, 0, 0, 0, 0, 0, 0, 0,
	170, 174, 189, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 180, 0, 0, 0, 136, 133,
	168, 0, 0, 0, 138, 0, 150, 190, 0, 198,
	165, 76, 200, 163, 162, 203, 206, 196, 147, 155,
	66, 153, 69, 0, 142, 143, 140, 141, 176, 177,
	207, 208, 209, 191, 137, 0, 0, 194, 179, 65,
	0, 70, 77, 73, 68, 75, 202, 193, 167, 204,
	145, 159, 212, 160, 161, 187, 134, 175, 72, 157,
	0, 148, 130, 154, 131, 146, 169, 67, 172, 144,
	195, 178, 210, 0, 182, 0, 74, 71, 0, 0,
	171, 197, 173, 192, 166, 188, 139, 181, 205, 158,
	185, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 201, 156, 186, 129, 183, 0,
	132, 135, 211, 199, 151, 152, 0, 0, 0, 0,
	0, 0, 0, 170, 174, 189, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 180, 0, 0,
	0, 136, 133, 168, 0, 0, 0, 138, 0, 150,
	190, 0, 198, 165, 76, 200, 163, 162, 203, 206,
	196, 147, 155, 66, 153, 69, 0, 142, 143, 140,
	141, 176, 177, 207, 208, 209, 191, 137, 0, 0,
	194, 179, 65, 0, 70, 77, 73, 68, 75, 202,
	193, 167, 204, 145, 159, 212, 160, 161, 187, 134,
	175, 72, 157, 0, 148, 130, 154, 131, 146, 169,
	67, 172, 144, 195, 178, 210, 0, 182, 0, 74,
	71, 0, 0, 171, 197, 173, 192, 166, 188, 139,
	181, 205, 158, 185, 0, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 201, 156, 186,
	129, 183, 0, 132, 135, 211, 199, 151, 152, 0,
	0, 0, 0, 0, 0, 0, 170, 174, 189, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	180, 0, 0, 0, 136, 133, 168, 0, 0, 0,
	138, 0, 150, 190, 0, 198, 165, 76, 200, 163,
	162, 203, 206, 196, 147, 155, 66, 153, 69, 0,
	142, 143, 140, 141, 176, 177, 207, 208, 209, 191,
	137, 0, 0, 194, 179, 65, 0, 70, 77, 73,
	68, 75, 72, 0, 0, 480, 0, 248, 0, 0,
	0, 67, 0, 0, 0, 0, 283, 0, 0, 0,
	74, 71, 0, 0, 0, 0, 276, 277, 0, 0,
	0, 0, 0, 0, 0, 124, 540, 0, 84, 266,
	265, 267, 268, 269, 270, 0, 0, 271, 263, 264,
	0, 0, 245, 257, 0, 282, 349, 348, 358, 359,
	351, 352, 353, 354, 355, 356, 357, 350, 0, 0,
	360, 0, 0, 0, 0, 254, 255, 317, 0, 0,
	0, 294, 0, 256, 0, 0, 253, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 292, 0, 0, 0, 0, 0, 66, 0, 69,
	0, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 278, 279, 281, 0, 280, 65, 0, 70, 77,
	73, 68, 75, 72, 0, 0, 0, 0, 248, 0,
	0, 0, 67, 0, 0, 0, 0, 283, 0, 0,
	0, 74, 71, 0, 0, 0, 0, 276, 277, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 84,
	266, 265, 267, 268, 269, 270, 0, 0, 271, 263,
	264, 0, 0, 245, 257, 0, 282, 349, 348, 358,
	359, 351, 352, 353, 354, 355, 356, 357, 350, 0,
	0, 360, 0, 0, 0, 0, 254, 255, 317, 0,
	0, 0, 294, 0, 256, 0, 0, 253, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 292, 0, 0, 0, 0, 0, 66, 0,
	69, 0, 284, 293, 290, 291, 288, 289, 287, 286,
	285, 295, 278, 279, 281, 0, 280, 65, 0, 70,
	77, 73, 68, 75, 72, 0, 0, 0, 0, 248,
	0, 0, 0, 67, 0, 0, 0, 0, 283, 0,
	0, 0, 74, 71, 0, 0, 0, 0, 276, 277,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 430,
	84, 266, 265, 267, 268, 269, 270, 0, 0, 271,
	263, 264, 0, 0, 245, 257, 0, 282, 348, 358,
	359, 351, 352, 353, 354, 355, 356, 357, 350, 0,
	0, 360, 0, 0, 0, 0, 0, 254, 255, 0,
	0, 0, 0, 294, 0, 256, 0, 0, 253, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 292, 0, 0, 0, 0, 0, 66,
	0, 69, 0, 284, 293, 290, 291, 288, 289, 287,
	286, 285, 295, 278, 279, 281, 14, 280, 65, 0,
	70, 77, 73, 68, 75, 0, 0, 72, 0, 0,
	0, 0, 248, 0, 0, 0, 67, 0, 0, 0,
	0, 283, 0, 0, 0, 74, 71, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 84, 266, 265, 267, 268, 269, 270,
	0, 0, 271, 263, 264, 0, 0, 245, 257, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 0, 0, 0, 0, 294, 0, 256, 0,
	0, 253, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 292, 0, 0, 0,
	0, 0, 66, 0, 69, 0, 284, 293, 290, 291,
	288, 289, 287, 286, 285, 295, 278, 279, 281, 0,
	280, 65, 0, 70, 77, 73, 68, 75, 72, 0,
	0, 0, 0, 248, 0, 0, 0, 67, 0, 0,
	0, 0, 283, 0, 0, 0, 74, 71, 0, 0,
	0, 0, 276, 277, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 84, 266, 265, 267, 268, 269,
	270, 0, 0, 271, 263, 264, 0, 0, 245, 257,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 0, 0, 0, 0, 294, 0, 256,
	0, 0, 253, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 292, 0, 0,
	0, 0, 0, 66, 0, 69, 0, 284, 293, 290,
	291, 288, 289, 287, 286, 285, 295, 278, 279, 281,
	72, 280, 65, 0, 70, 77, 73, 68, 75, 67,
	0, 0, 0, 0, 283, 0, 0, 0, 74, 71,
	0, 0, 0, 0, 276, 277, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 84, 266, 265, 267,
	268, 269, 270, 0, 0, 271, 263, 264, 0, 0,
	72, 257, 0, 282, 0, 0, 0, 72, 105, 67,
	0, 0, 0, 0, 0, 0, 67, 0, 74, 71,
	0, 0, 0, 254, 255, 74, 71, 0, 0, 294,
	0, 256, 0, 0, 253, 258, 63, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 76, 0, 0, 292,
	0, 0, 0, 0, 0, 66, 0, 69, 0, 284,
	293, 290, 291, 288, 289, 287, 286, 285, 295, 278,
	279, 281, 72, 280, 65, 0, 70, 77, 73, 68,
	75, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 71, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 76, 0, 66, 0, 69, 127, 0,
	0, 0, 66, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 65, 0, 70, 77, 73, 68,
	75, 65, 67, 70, 77, 73, 68, 75, 0, 0,
	0, 74, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 70, 77,
	73, 68, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 65, 347, 70,
	77, 73, 68, 75, 361, 362, 363, 364, 365, 366,
	367, 0, 345, 346, 343, 349, 348, 358, 359, 351,
	352, 353, 354, 355, 356, 357, 350, 0, 0, 360,
}
var yyPact = [...]int{

	699, -1000, -112, 553, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -26,
	-27, -5, 21, -8, -1000, -1000, -1000, -1000, -1000, 551,
	509, 434, -1000, -49, 2926, 541, 2810, -55, -12, 2926,
	-1000, -16, 2926, -1000, 2926, -58, 171, -58, 2926, -1000,
	-1000, -1000, -1000, -1000, -1000, 470, -1000, -1000, 124, 2803,
	481, 956, 49, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2926, 187,
	-1000, 95, -1000, 47, -1000, -1000, 2926, 108, 160, 1402,
	2926, 1402, 272, -1000, -32, 2926, 495, 349, 2926, -1000,
	373, 147, -1000, -1000, 354, 2926, -1000, 2810, 15, -1000,
	1107, -1000, -1000, 1974, 539, 2810, 2631, 1831, 1402, 491,
	-61, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 103, -1000, 2926, 2926, -1000, -1000, 2926,
	1402, 2236, -1000, 515, -1000, 437, 421, 483, 2810, 2875,
	-1000, 386, -1000, -14, -15, -23, -1000, -1000, -1000, -1000,
	528, 2631, -1000, 188, -1000, 2631, 2999, -1000, 303, -1000,
	20, -1000, -1000, 888, 888, 888, 888, 888, 888, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 303, 46, -1000, 2500, 303, 303, 303, 303,
	303, 303, 2631, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, -1000, 43, -1000, -1000,
	-1000, 347, 2875, -1000, -33, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, -1000, -1000, 73, 41,
	2926, -1000, -1000, -1000, -1000, 346, 303, 553, 238, 341,
	40, 528, 303, 303, 303, 514, 526, 188, 2631, 2631,
	219, 87, 2753, 206, 107, 888, 888, 888, 888, 888,
	888, 888, 888, 888, 888, 888, 888, 888, 888, 888,
	65, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 551,
	408, 408, 60, 60, 60, 60, 60, 746, 2105, 1831,
	359, 305, 188, 2236, 2236, 2631, 2631, 2875, 503, 117,
	188, 2875, -1000, 181, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2236, 2236, 2236, 2236, 1688, 2926, -1000, -1000, 2926,
	-1000, 539, 2236, 1081, -1000, -1000, 1094, -1000, -1000, 1545,
	-1000, -1000, 485, 250, -1000, -1000, 2367, -1000, -1000, 2875,
	-1000, 2875, 514, 2875, 2875, 2875, -1000, 2631, 2631, 87,
	102, -1000, -1000, 236, -1000, -1000, -1000, 2221, -1000, -1000,
	-1000, -1000, 206, 888, 888, 888, 217, 2221, 2090, 1084,
	2351, 60, 148, 148, 61, 61, 61, 61, 61, 254,
	254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 181,
	2236, 221, 303, -1000, 2631, -1000, 269, 269, 114, 186,
	290, -1000, 2236, 131, -1000, 2631, 181, -1000, 269, 181,
	269, 269, -1000, 1402, -1000, 535, -1000, 216, 832, -1000,
	-1000, -1000, 497, 1024, -1000, -1000, 37, 468, 303, -1000,
	32, -1000, -1000, 284, -1000, 284, 284, 198, 208, -1000,
	273, -1000, -1000, -1000, -1000, 217, 2221, 761, -1000, 888,
	888, -1000, 269, 2236, 188, -1000, -1000, 65, 65, 65,
	-86, 2875, 311, 98, -1000, 2631, 165, -1000, -1000, -1000,
	-1000, -1000, -1000, 533, 525, 1081, 1081, 1081, 1081, -1000,
	389, 383, -1000, 439, 410, 440, 2926, -1000, 264, 1259,
	548, -1000, 2875, -1000, 2875, -1000, -1000, 2631, 2631, 2631,
	-1000, -1000, -1000, -1000, 888, 2221, 2221, -1000, 181, 181,
	104, 181, 181, 303, -1000, -83, -1000, 188, 2631, 528,
	2631, 2631, 832, 337, 706, -1000, -1000, -1000, -1000, 381,
	-1000, 360, -1000, -1000, -1000, -1000, -1000, 2810, -1000, -1000,
	188, 188, -1000, 2221, -1000, -1000, -1000, 138, -1000, 479,
	-1000, -1000, 888, 181, 144, 188, 514, 188, 204, 2631,
	2631, -1000, -1000, 187, 233, 65, -17, -1000, -1000, 466,
	188, 188, 52, 122, -1000, 181, 6, -99, -1000, 544,
	78, -1000, 476, 181, -1000, 405, -94, -108, -1000, 413,
	65, -1000, -1000, 403, -1000, 394, -1000, -97, -1000, -106,
	-109, -1000,
}
var yyPgo = [...]int{

	0, 661, 34, 659, 658, 657, 656, 654, 653, 652,
	650, 649, 647, 520, 646, 645, 32, 642, 641, 640,
	639, 12, 51, 21, 31, 19, 638, 17, 10, 14,
	637, 636, 9, 632, 102, 629, 450, 626, 25, 26,
	625, 44, 624, 622, 29, 20, 621, 619, 618, 617,
	616, 614, 24, 8, 613, 16, 15, 611, 257, 6,
	610, 22, 606, 604, 598, 597, 2, 596, 3, 595,
	1, 594, 592, 590, 589, 23, 7, 93, 588, 459,
	403, 587, 586, 584, 580, 577, 53, 678, 324, 11,
	28, 570, 5, 27, 112, 569, 568, 33, 18, 4,
	13, 30, 567, 566, 564, 559, 402, 0, 41,
}
var yyR1 = [...]int{

	0, 103, 104, 104, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 3, 3,
	4, 5, 6, 7, 7, 7, 8, 8, 8, 9,
	102, 102, 101, 10, 10, 10, 11, 12, 12, 12,
	105, 13, 14, 14, 15, 15, 15, 18, 18, 18,
	16, 16, 17, 17, 23, 23, 22, 22, 24, 24,
	24, 24, 91, 91, 91, 90, 90, 26, 26, 27,
	27, 28, 28, 29, 29, 29, 36, 30, 30, 30,
	30, 96, 96, 95, 95, 95, 94, 94, 31, 31,
	31, 31, 32, 32, 32, 32, 33, 33, 35, 35,
	34, 34, 37, 37, 37, 37, 38, 38, 39, 39,
	25, 25, 25, 25, 25, 25, 41, 41, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	51, 51, 51, 51, 51, 51, 42, 42, 42, 42,
	42, 42, 42, 21, 21, 52, 52, 52, 58, 53,
	53, 99, 99, 99, 99, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 49, 49, 49, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 48, 48, 48, 48,
	48, 48, 48, 48, 108, 108, 50, 50, 50, 50,
	19, 19, 19, 19, 19, 100, 100, 100, 100, 100,
	100, 100, 100, 62, 62, 20, 20, 60, 60, 61,
	63, 63, 59, 59, 59, 44, 44, 44, 44, 44,
	44, 44, 46, 46, 46, 64, 64, 65, 65, 66,
	66, 67, 67, 68, 69, 69, 69, 70, 70, 70,
	70, 71, 71, 71, 72, 72, 74, 74, 73, 73,
	73, 73, 75, 75, 43, 43, 54, 54, 56, 56,
	55, 57, 76, 76, 77, 78, 78, 80, 80, 81,
	81, 79, 79, 82, 82, 82, 82, 82, 82, 83,
	83, 84, 84, 85, 85, 88, 88, 89, 89, 92,
	92, 93, 93, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	106, 107, 97, 98, 98, 98,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 13, 7, 3, 7, 7,
	8, 7, 3, 5, 8, 4, 6, 7, 4, 3,
	1, 3, 3, 4, 5, 5, 3, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	3, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 1, 1, 1, 3,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 2, 4, 5, 7,
	2, 4, 6, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 1, 3, 0, 3, 1, 3,
	3, 5, 0, 5, 2, 1, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -103, -1, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -11, -12, 6, 7, 8, 9, 29, 106,
	107, 109, 108, 110, 119, 120, 121, -104, 148, -15,
	5, -13, -105, -13, -13, -13, -13, 111, -84, 113,
	117, -79, 113, 115, 111, 111, 112, 113, 111, -97,
	-97, -97, -2, 19, 20, -18, 37, 38, -14, -79,
	-36, -34, -92, 53, -87, 141, 122, 26, 146, 124,
	143, 36, 17, 145, 35, 147, 113, 144, 10, -76,
	-77, -59, -88, -92, 53, -87, -81, 116, 112, -34,
	111, -34, -102, -101, -34, -80, 116, 53, -80, -34,
	-16, 33, 20, 61, -35, 25, -34, 29, -95, -94,
	21, -92, 55, 103, -34, 51, 75, 103, -34, 67,
	53, -98, -106, -89, 50, -88, -86, 53, -87, 66,
	21, 23, 69, 101, 15, 70, 100, 136, 106, 45,
	128, 129, 126, 127, 28, 9, 24, 120, 20, 94,
	108, 73, 74, 123, 22, 121, 64, 18, 48, 10,
	12, 13, 116, 115, 85, 112, 43, 7, 102, 25,
	82, 39, 27, 41, 83, 16, 130, 131, 30, 140,
	96, 46, 33, 67, 62, 49, 65, 14, 44, 84,
	109, 135, 42, 6, 139, 29, 119, 40, 111, 72,
	114, 63, 5, 117, 8, 47, 118, 132, 133, 134,
	31, 71, 11, -34, -98, 51, 114, -34, 22, 49,
	-34, -17, 40, -46, -88, 56, 59, -74, 29, -106,
	-34, -76, -37, 47, 115, 48, -94, -93, -92, -86,
	-39, 11, -77, -25, -40, 67, -45, -41, 22, -44,
	-59, -57, -58, 101, 90, 91, 98, 68, 102, -49,
	-47, -48, -50, 63, 64, 55, 54, 56, 57, 58,
	59, 62, -88, -92, -55, -106, 41, 42, 136, 137,
	140, 138, 70, 31, 126, 134, 133, 132, 130, 131,
	128, 129, 116, 127, 96, 135, -89, -93, -86, -98,
	22, -85, 118, -82, 109, 107, 28, 108, 14, 147,
	53, -101, -34, -34, -98, -22, -24, 92, -25, -92,
	-78, 18, 10, 31, 31, -43, 31, -2, -76, -73,
	-88, -39, 112, 112, 112, -66, 14, -25, 66, 65,
	82, -25, -42, 85, 67, 83, 84, 69, 87, 86,
	97, 90, 91, 92, 93, 94, 95, 96, 88, 89,
	100, 75, 76, 77, 78, 79, 80, 81, -58, -106,
	104, 105, -45, -45, -45, -45, -45, -45, -106, 103,
	-2, -53, -25, -106, -106, -106, -106, -106, -106, -62,
	-25, -106, -108, -106, -108, -108, -108, -108, -108, -108,
	-108, -106, -106, -106, -106, 103, 49, -88, -97, -83,
	114, -26, 51, 10, -91, -90, 21, -88, 55, 103,
	-34, -75, 49, -54, -56, -55, -106, -75, -107, 51,
	52, 103, -66, -106, -106, -106, -70, 16, 15, -25,
	-25, -51, 62, 67, 63, 64, -41, -45, -52, -55,
	-58, 60, 85, 83, 84, 69, -45, -45, -45, -45,
	-45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
	-45, -99, 53, 55, 101, 122, -44, -44, -88, -23,
	20, -22, -89, -107, 51, -107, -22, -22, -25, -25,
	-72, -88, -16, -60, -61, 71, -88, -107, -22, -23,
	-22, -22, -89, -34, -34, -39, -24, -27, -28, -29,
	-30, -36, -58, -106, -90, 92, -93, 26, 51, -107,
	-88, -88, -70, -38, -88, -38, -38, -25, -67, -68,
	-25, 62, 63, 64, -52, -45, -45, -45, -21, 123,
	66, -107, -22, -106, -25, -107, -107, 51, 118, 21,
	-107, 51, -22, -63, -61, 73, -25, -107, -107, -107,
	-107, -107, -98, -64, 12, 51, -31, -32, -33, 39,
	43, 45, 40, 41, 42, 46, -96, 21, -27, 103,
	27, -56, 103, -107, 51, -107, -107, 51, 17, 51,
	-69, 23, 24, -21, 66, -45, -45, -107, -23, -100,
	-99, -100, -100, 141, -88, -66, 74, -25, 72, -65,
	13, 15, -28, -29, -28, -29, 39, 39, 39, 44,
	39, 44, 39, -32, -92, -107, 92, 8, -88, -88,
	-25, -25, -68, -45, -107, -107, 124, -106, -99, 125,
	-107, -107, -106, -20, 139, -25, -66, -25, -53, 49,
	49, 39, 39, -76, 56, 29, -45, -107, 55, -70,
	-25, -25, -107, 51, -99, -19, 85, 144, -71, 18,
	30, -99, 125, 56, -107, 142, 46, 145, 8, 85,
	29, -107, 36, 143, 146, 35, -99, 36, 36, 144,
	145, 146,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 40, 40, 40, 40, 40, 301,
	291, 0, 0, 0, 412, 412, 412, 1, 3, 0,
	44, 47, 42, 291, 0, 0, 0, 289, 0, 0,
	302, 0, 0, 292, 0, 287, 0, 287, 0, 37,
	38, 39, 17, 45, 46, 50, 48, 49, 41, 0,
	0, 83, 100, 309, 310, 397, 398, 399, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 0, 22,
	282, 0, 232, 0, -2, -2, 0, 0, 0, 413,
	0, 413, 29, 30, 0, 0, 0, 0, 0, 36,
	52, 0, 51, 43, 266, 0, 99, 0, 102, 84,
	0, 86, 87, 0, 108, 0, 0, 0, 413, 0,
	303, 25, 414, 415, 410, 307, 308, 305, 306, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
	394, 395, 396, 0, 28, 0, 0, 33, 288, 0,
	413, 0, 53, 0, 242, 0, 0, 0, 0, 0,
	98, 108, 76, 0, 0, 0, 85, 101, 311, 312,
	249, 0, 283, 284, 110, 0, 115, 118, 0, 155,
	156, 157, 158, 0, 0, 0, 0, 0, 0, 180,
	181, 182, 183, 116, 117, 235, 236, 237, 238, 239,
	240, 241, 232, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 223, 0, 204, 204, 204, 204, 204, 204,
	204, 204, 0, 0, 0, 0, 233, 0, -2, 23,
	290, 0, 0, 412, 299, 293, 294, 295, 296, 297,
	298, 31, 32, 34, 35, 67, 56, 58, 62, 0,
	0, 285, 286, 243, 244, 272, 0, 275, 272, 0,
	268, 249, 0, 0, 0, 257, 0, 109, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 137, 138, 139, 140, 141, 142, 129, 0,
	0, 0, 174, 175, 176, 177, 178, 0, 54, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 50, 0,
	224, 0, 196, 0, 197, 198, 199, 200, 201, 202,
	203, 0, 54, 0, 0, 0, 0, 304, 26, 0,
	300, 108, 0, 0, 59, 63, 0, 65, 66, 0,
	16, 18, 0, 274, 276, 278, 0, 19, 267, 0,
	411, 0, 257, 0, 0, 0, 21, 0, 0, 111,
	112, 114, 130, 0, 132, 134, 119, 120, 121, 145,
	146, 147, 0, 0, 0, 0, 143, 125, 0, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 173, 151, 152, 153, 154, 171, 172, 179, 0,
	0, 55, 233, 148, 0, 280, 0, 0, 0, 0,
	0, 264, 0, 230, 227, 0, 0, 205, 0, 0,
	0, 0, 234, 413, 27, 245, 57, 68, 69, 71,
	72, 73, 81, 0, 64, 60, 0, 0, 0, 279,
	270, 269, 20, 0, 106, 0, 0, 258, 250, 251,
	254, 131, 133, 135, 122, 143, 126, 0, 123, 0,
	0, 184, 0, 54, 150, 187, 188, 0, 0, 0,
	0, 0, 249, 0, 228, 0, 0, 195, 206, 207,
	208, 209, 24, 247, 0, 0, 0, 0, 0, 88,
	0, 0, 91, 0, 0, 0, 0, 82, 0, 0,
	0, 277, 0, 103, 0, 104, 105, 0, 0, 0,
	253, 255, 256, 124, 0, 144, 127, 185, 0, 0,
	215, 0, 0, 0, 265, 225, 194, 231, 0, 249,
	0, 0, 70, 77, 0, 80, 89, 90, 92, 0,
	94, 0, 96, 97, 74, 75, 61, 0, 271, 107,
	259, 260, 252, 128, 186, 189, 216, 0, 220, 0,
	190, 191, 0, 0, 0, 229, 257, 248, 246, 0,
	0, 93, 95, 273, 0, 0, 210, 193, 226, 261,
	78, 79, 217, 0, 221, 0, 0, 0, 15, 0,
	0, 218, 0, 0, 192, 0, 0, 0, 262, 0,
	0, 222, 211, 0, 214, 0, 219, 212, 263, 0,
	0, 213,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 148,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:203
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:208
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:209
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:213
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 15:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:229
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), OrderBy: yyDollar[11].orderBy, Limit: yyDollar[12].limit, Lock: yyDollar[13].str}
		}
	case 16:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:233
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:237
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 18:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:243
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:247
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:259
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].aliasedTableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:265
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:271
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:277
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:286
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:296
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, TableOperations: []TableOperation{{Operator: ToStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:301
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:307
		{
			yyVAL.statement = &DDL{Action: RenameStr, TableOperations: yyDollar[3].tableOperations}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:313
		{
			yyVAL.tableOperations = []TableOperation{yyDollar[1].tableOperation}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:317
		{
			yyVAL.tableOperations = append(yyVAL.tableOperations, yyDollar[3].tableOperation)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:323
		{
			yyVAL.tableOperation = TableOperation{Table: yyDollar[1].tableName, Operator: ToStr, NewName: yyDollar[3].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:329
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:337
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:342
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:352
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:358
		{
			yyVAL.statement = &Other{}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:362
		{
			yyVAL.statement = &Other{}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:366
		{
			yyVAL.statement = &Other{}
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:371
		{
			setAllowComments(yylex, true)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:375
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:381
		{
			yyVAL.bytes2 = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:385
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:391
		{
			yyVAL.str = UnionStr
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:395
		{
			yyVAL.str = UnionAllStr
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:399
		{
			yyVAL.str = UnionDistinctStr
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:404
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:408
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:412
		{
			yyVAL.str = SQLCacheStr
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:417
		{
			yyVAL.str = ""
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:421
		{
			yyVAL.str = DistinctStr
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:426
		{
			yyVAL.str = ""
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:430
		{
			yyVAL.str = StraightJoinHint
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:435
		{
			yyVAL.selectExprs = nil
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:439
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:445
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:449
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:455
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:459
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:463
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Name: yyDollar[1].tableIdent}}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:467
		{
			yyVAL.selectExpr = &StarExpr{TableName: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:472
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:476
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:480
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:487
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:492
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: &TableName{Name: NewTableIdent("dual")}}}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:496
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:502
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:506
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:516
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:520
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:524
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:530
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:543
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:547
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:551
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:555
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:560
		{
			yyVAL.empty = struct{}{}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:562
		{
			yyVAL.empty = struct{}{}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:565
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:569
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:573
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:580
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:586
		{
			yyVAL.str = JoinStr
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:590
		{
			yyVAL.str = JoinStr
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:594
		{
			yyVAL.str = JoinStr
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:598
		{
			yyVAL.str = StraightJoinStr
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:604
		{
			yyVAL.str = LeftJoinStr
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:608
		{
			yyVAL.str = LeftJoinStr
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:612
		{
			yyVAL.str = RightJoinStr
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:616
		{
			yyVAL.str = RightJoinStr
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:622
		{
			yyVAL.str = NaturalJoinStr
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:626
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:636
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:640
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:646
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].tableIdent}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:650
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:655
		{
			yyVAL.indexHints = nil
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:659
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:663
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:667
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:673
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:677
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:682
		{
			yyVAL.expr = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:686
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:692
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:696
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:700
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:704
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:708
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:712
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:718
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:722
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:728
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:732
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:752
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:756
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:760
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:764
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:768
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:772
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:778
		{
			yyVAL.str = IsNullStr
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:782
		{
			yyVAL.str = IsNotNullStr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:786
		{
			yyVAL.str = IsTrueStr
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:790
		{
			yyVAL.str = IsNotTrueStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:794
		{
			yyVAL.str = IsFalseStr
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:798
		{
			yyVAL.str = IsNotFalseStr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:804
		{
			yyVAL.str = EqualStr
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:808
		{
			yyVAL.str = LessThanStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:812
		{
			yyVAL.str = GreaterThanStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:816
		{
			yyVAL.str = LessEqualStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:820
		{
			yyVAL.str = GreaterEqualStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:824
		{
			yyVAL.str = NotEqualStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:828
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:833
		{
			yyVAL.expr = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:837
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:843
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:847
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:851
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:857
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:863
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:867
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:881
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:891
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:895
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:899
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:903
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:963
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:967
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:971
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:979
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:993
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:997
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1001
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1019
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1023
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1027
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1045
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1049
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1053
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1057
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].columns, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1061
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1065
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1069
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1096
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1106
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1143
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1147
		{
			yyVAL.str = BooleanModeStr
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1151
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1155
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1159
		{
			yyVAL.str = QueryExpansionStr
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1166
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1170
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1174
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1178
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1182
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1186
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1190
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1194
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1199
		{
			yyVAL.expr = nil
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1203
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1208
		{
			yyVAL.str = string("")
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1212
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1218
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1222
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1228
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1233
		{
			yyVAL.expr = nil
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1237
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1243
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1247
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1251
		{
			yyVAL.colName = &ColName{Qualifier: &TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1257
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1261
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1265
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1269
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1273
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1277
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1281
		{
			yyVAL.expr = &NullVal{}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1287
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1296
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1300
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1305
		{
			yyVAL.exprs = nil
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1309
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1314
		{
			yyVAL.expr = nil
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1318
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1323
		{
			yyVAL.orderBy = nil
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1327
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1333
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1337
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1343
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1348
		{
			yyVAL.str = AscScr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1352
		{
			yyVAL.str = AscScr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1356
		{
			yyVAL.str = DescScr
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1361
		{
			yyVAL.limit = nil
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1365
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1369
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1373
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1378
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1382
		{
			yyVAL.str = ForUpdateStr
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1386
		{
			yyVAL.str = ShareModeStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1392
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1396
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1401
		{
			yyVAL.columns = nil
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1405
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1411
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1415
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1419
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1423
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1428
		{
			yyVAL.updateExprs = nil
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1432
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1438
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1442
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1448
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1452
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1458
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1462
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1468
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1474
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1484
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1488
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1494
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1503
		{
			yyVAL.byt = 0
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1505
		{
			yyVAL.byt = 1
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1508
		{
			yyVAL.empty = struct{}{}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1510
		{
			yyVAL.empty = struct{}{}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1513
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1515
		{
			yyVAL.str = IgnoreStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1519
		{
			yyVAL.empty = struct{}{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1521
		{
			yyVAL.empty = struct{}{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1523
		{
			yyVAL.empty = struct{}{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1525
		{
			yyVAL.empty = struct{}{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1527
		{
			yyVAL.empty = struct{}{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1529
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1532
		{
			yyVAL.empty = struct{}{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1534
		{
			yyVAL.empty = struct{}{}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1537
		{
			yyVAL.empty = struct{}{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1539
		{
			yyVAL.empty = struct{}{}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1542
		{
			yyVAL.empty = struct{}{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1544
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1548
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1552
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1559
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1565
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1569
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1576
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1698
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1707
		{
			decNesting(yylex)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1712
		{
			forceEOF(yylex)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1717
		{
			forceEOF(yylex)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1721
		{
			forceEOF(yylex)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1725
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
