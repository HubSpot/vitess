//line ./go/vt/sqlparser/sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:46
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        TableName
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const UNUSED = 57480

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 215,
	103, 329,
	-2, 325,
	-1, 216,
	103, 330,
	-2, 326,
	-1, 432,
	5, 21,
	-2, 280,
	-1, 466,
	103, 332,
	-2, 328,
	-1, 575,
	5, 22,
	-2, 163,
	-1, 637,
	5, 22,
	-2, 281,
	-1, 676,
	5, 21,
	-2, 283,
	-1, 720,
	5, 22,
	-2, 284,
}

const yyNprod = 445
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3837

var yyAct = [...]int{

	231, 216, 391, 564, 663, 41, 662, 243, 210, 681,
	527, 563, 334, 530, 267, 600, 186, 332, 607, 465,
	316, 317, 3, 560, 496, 58, 233, 460, 544, 296,
	86, 179, 290, 240, 211, 242, 320, 305, 195, 40,
	180, 45, 336, 202, 747, 742, 529, 746, 201, 737,
	179, 745, 741, 736, 666, 179, 698, 185, 212, 245,
	221, 47, 48, 49, 50, 470, 226, 218, 76, 200,
	77, 85, 181, 182, 183, 184, 38, 77, 179, 520,
	179, 521, 340, 520, 179, 521, 520, 477, 521, 79,
	80, 81, 453, 455, 337, 578, 577, 589, 576, 219,
	403, 475, 222, 591, 82, 78, 381, 382, 205, 705,
	727, 360, 359, 369, 370, 362, 363, 364, 365, 366,
	367, 368, 361, 687, 230, 371, 480, 522, 371, 346,
	640, 522, 611, 361, 522, 66, 371, 581, 390, 608,
	328, 324, 349, 327, 61, 348, 347, 532, 523, 618,
	74, 503, 523, 70, 65, 523, 225, 735, 690, 693,
	454, 668, 349, 732, 545, 501, 502, 500, 348, 347,
	298, 57, 616, 610, 330, 670, 347, 728, 418, 419,
	474, 476, 473, 348, 347, 349, 348, 347, 590, 38,
	588, 733, 349, 348, 347, 292, 545, 711, 623, 499,
	349, 179, 266, 349, 593, 594, 595, 715, 179, 179,
	349, 179, 331, 293, 724, 232, 232, 478, 227, 179,
	348, 347, 58, 535, 179, 58, 326, 179, 479, 635,
	179, 176, 177, 303, 294, 707, 232, 349, 228, 617,
	60, 339, 69, 67, 71, 605, 232, 488, 490, 491,
	63, 208, 489, 214, 639, 232, 208, 632, 362, 363,
	364, 365, 366, 367, 368, 361, 205, 59, 371, 64,
	73, 68, 62, 72, 535, 232, 303, 232, 42, 208,
	561, 208, 326, 18, 605, 208, 416, 364, 365, 366,
	367, 368, 361, 38, 421, 371, 428, 58, 605, 18,
	582, 379, 179, 302, 571, 179, 179, 179, 179, 420,
	212, 435, 18, 461, 561, 605, 179, 449, 450, 343,
	179, 432, 430, 179, 431, 303, 179, 38, 192, 75,
	16, 58, 744, 422, 212, 236, 291, 675, 574, 179,
	451, 464, 179, 38, 457, 179, 58, 467, 437, 265,
	439, 447, 436, 326, 438, 444, 38, 573, 456, 441,
	445, 462, 483, 205, 205, 205, 205, 459, 440, 497,
	442, 466, 38, 56, 190, 443, 519, 199, 205, 405,
	406, 407, 408, 409, 410, 411, 352, 494, 351, 740,
	58, 592, 536, 259, 258, 260, 261, 262, 263, 484,
	213, 264, 208, 534, 58, 547, 196, 197, 297, 208,
	322, 558, 208, 557, 498, 451, 392, 524, 525, 738,
	208, 295, 350, 401, 549, 208, 712, 673, 208, 542,
	633, 208, 234, 466, 468, 58, 348, 347, 212, 562,
	342, 537, 538, 315, 235, 541, 565, 553, 446, 552,
	311, 312, 575, 349, 297, 567, 193, 194, 187, 548,
	556, 550, 551, 570, 718, 42, 579, 188, 555, 717,
	701, 461, 58, 58, 559, 463, 209, 360, 359, 369,
	370, 362, 363, 364, 365, 366, 367, 368, 361, 584,
	702, 371, 345, 44, 46, 485, 486, 39, 492, 493,
	1, 83, 314, 208, 319, 214, 208, 208, 208, 208,
	606, 469, 52, 585, 601, 497, 587, 448, 586, 472,
	217, 208, 554, 568, 322, 596, 239, 458, 603, 214,
	417, 458, 289, 716, 58, 700, 621, 400, 614, 615,
	208, 392, 619, 208, 539, 540, 208, 625, 543, 626,
	627, 628, 629, 244, 487, 255, 179, 252, 254, 253,
	498, 423, 429, 353, 291, 237, 452, 636, 637, 638,
	335, 204, 622, 335, 299, 604, 641, 306, 304, 203,
	631, 697, 726, 58, 179, 427, 634, 19, 179, 620,
	43, 198, 533, 458, 648, 15, 647, 533, 533, 14,
	13, 533, 12, 11, 10, 656, 9, 8, 7, 580,
	58, 6, 5, 652, 4, 533, 533, 533, 533, 657,
	189, 17, 664, 661, 534, 665, 667, 658, 651, 2,
	533, 660, 0, 214, 179, 0, 0, 268, 35, 674,
	0, 58, 58, 0, 0, 424, 58, 58, 58, 0,
	565, 58, 213, 672, 466, 683, 684, 0, 680, 671,
	676, 0, 688, 689, 0, 694, 695, 685, 692, 0,
	0, 0, 0, 35, 0, 0, 213, 0, 335, 335,
	0, 191, 706, 613, 708, 709, 206, 703, 0, 58,
	565, 0, 205, 624, 335, 0, 0, 0, 714, 704,
	648, 0, 0, 0, 0, 720, 0, 58, 0, 58,
	212, 719, 723, 0, 392, 0, 0, 725, 0, 642,
	643, 730, 0, 0, 0, 0, 0, 734, 731, 0,
	0, 533, 0, 0, 739, 0, 0, 0, 526, 0,
	335, 0, 0, 743, 0, 533, 0, 207, 0, 0,
	0, 0, 546, 0, 0, 0, 0, 208, 360, 359,
	369, 370, 362, 363, 364, 365, 366, 367, 368, 361,
	0, 669, 371, 383, 384, 385, 386, 387, 388, 0,
	213, 0, 0, 569, 0, 208, 0, 0, 0, 208,
	359, 369, 370, 362, 363, 364, 365, 366, 367, 368,
	361, 220, 0, 371, 0, 0, 0, 0, 533, 0,
	0, 0, 0, 0, 458, 533, 0, 0, 699, 0,
	583, 335, 0, 0, 223, 653, 224, 0, 0, 35,
	229, 0, 0, 0, 0, 208, 307, 310, 311, 312,
	308, 0, 309, 313, 318, 360, 359, 369, 370, 362,
	363, 364, 365, 366, 367, 368, 361, 0, 333, 371,
	0, 333, 0, 0, 0, 729, 392, 0, 0, 369,
	370, 362, 363, 364, 365, 366, 367, 368, 361, 380,
	495, 371, 609, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 0, 0,
	0, 0, 0, 389, 0, 214, 393, 394, 395, 396,
	397, 398, 399, 0, 402, 404, 404, 404, 404, 404,
	404, 404, 404, 412, 413, 414, 415, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 433, 0, 0,
	0, 206, 206, 206, 206, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 318, 325, 609, 0,
	0, 335, 0, 0, 0, 329, 0, 333, 66, 0,
	338, 0, 0, 341, 0, 0, 344, 61, 0, 0,
	0, 0, 333, 74, 0, 0, 70, 65, 0, 678,
	679, 0, 0, 0, 682, 682, 682, 0, 0, 335,
	0, 0, 0, 0, 57, 307, 310, 311, 312, 308,
	0, 309, 313, 0, 0, 572, 54, 0, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 598,
	599, 393, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 434, 0,
	0, 0, 213, 0, 0, 721, 0, 722, 0, 0,
	0, 0, 51, 0, 53, 0, 0, 0, 55, 566,
	0, 35, 0, 60, 0, 69, 67, 71, 0, 0,
	0, 0, 0, 63, 0, 471, 0, 0, 481, 0,
	0, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 64, 73, 68, 62, 72, 0, 0, 333,
	0, 0, 66, 0, 0, 528, 0, 241, 0, 0,
	0, 61, 0, 0, 0, 0, 276, 74, 654, 655,
	70, 65, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 215, 259,
	258, 260, 261, 262, 263, 0, 0, 264, 256, 257,
	0, 0, 238, 250, 0, 275, 0, 0, 0, 0,
	0, 0, 612, 0, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 247, 248, 531, 0, 0,
	0, 287, 0, 249, 0, 0, 246, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 285, 0, 0, 644, 645, 646, 60, 0, 69,
	67, 71, 0, 713, 0, 0, 0, 63, 0, 277,
	286, 283, 284, 281, 282, 280, 279, 278, 288, 271,
	272, 274, 0, 273, 59, 0, 64, 73, 68, 62,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	206, 0, 0, 566, 0, 0, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 360,
	359, 369, 370, 362, 363, 364, 365, 366, 367, 368,
	361, 691, 630, 371, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 566, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 0, 0, 0, 650, 165, 152, 126, 167, 104,
	118, 175, 119, 120, 146, 92, 134, 66, 116, 0,
	107, 88, 113, 89, 105, 128, 61, 131, 103, 154,
	137, 173, 74, 141, 0, 70, 65, 0, 0, 130,
	159, 132, 151, 125, 147, 97, 140, 168, 117, 144,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 164, 115, 145, 87, 142, 0, 90,
	93, 174, 162, 110, 111, 0, 0, 0, 0, 0,
	0, 0, 129, 133, 148, 123, 0, 0, 0, 0,
	0, 0, 710, 0, 108, 0, 139, 0, 0, 0,
	94, 91, 127, 0, 0, 0, 96, 0, 109, 149,
	0, 160, 124, 176, 163, 122, 121, 166, 169, 158,
	106, 114, 60, 112, 69, 67, 71, 102, 161, 155,
	156, 157, 63, 0, 100, 101, 98, 99, 135, 136,
	170, 171, 172, 150, 95, 0, 0, 153, 138, 59,
	0, 64, 73, 68, 62, 72, 165, 152, 126, 167,
	104, 118, 175, 119, 120, 146, 92, 134, 66, 116,
	0, 107, 88, 113, 89, 105, 128, 61, 131, 103,
	154, 137, 173, 74, 141, 0, 70, 65, 0, 0,
	130, 159, 132, 151, 125, 147, 97, 140, 168, 117,
	144, 38, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 164, 115, 145, 87, 142, 0,
	90, 93, 174, 162, 110, 111, 0, 0, 0, 0,
	0, 0, 0, 129, 133, 148, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 139, 0, 0,
	0, 94, 91, 127, 0, 0, 0, 96, 0, 109,
	149, 0, 160, 124, 176, 163, 122, 121, 166, 169,
	158, 106, 114, 60, 112, 69, 67, 71, 102, 161,
	155, 156, 157, 63, 0, 100, 101, 98, 99, 135,
	136, 170, 171, 172, 150, 95, 0, 0, 153, 138,
	59, 0, 64, 73, 68, 62, 72, 165, 152, 126,
	167, 104, 118, 175, 119, 120, 146, 92, 134, 66,
	116, 0, 107, 88, 113, 89, 105, 128, 61, 131,
	103, 154, 137, 173, 74, 141, 0, 70, 65, 0,
	0, 130, 159, 132, 151, 125, 147, 97, 140, 168,
	117, 144, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 164, 115, 145, 87, 142,
	0, 90, 93, 174, 162, 110, 111, 0, 0, 0,
	0, 0, 0, 0, 129, 133, 148, 123, 0, 0,
	0, 0, 0, 0, 659, 0, 108, 0, 139, 0,
	0, 0, 94, 91, 127, 0, 0, 0, 96, 0,
	109, 149, 0, 160, 124, 176, 163, 122, 121, 166,
	169, 158, 106, 114, 60, 112, 69, 67, 71, 102,
	161, 155, 156, 157, 63, 0, 100, 101, 98, 99,
	135, 136, 170, 171, 172, 150, 95, 0, 0, 153,
	138, 59, 0, 64, 73, 68, 62, 72, 165, 152,
	126, 167, 104, 118, 175, 119, 120, 146, 92, 134,
	66, 116, 0, 107, 88, 113, 89, 105, 128, 61,
	131, 103, 154, 137, 173, 74, 141, 0, 70, 65,
	0, 0, 130, 159, 132, 151, 125, 147, 97, 140,
	168, 117, 144, 0, 0, 0, 57, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 164, 115, 145, 87,
	142, 0, 90, 93, 174, 162, 110, 111, 0, 0,
	0, 0, 0, 0, 0, 129, 133, 148, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 139,
	0, 0, 0, 94, 91, 127, 0, 0, 0, 96,
	0, 109, 149, 0, 160, 124, 176, 163, 122, 121,
	166, 169, 158, 106, 114, 60, 112, 69, 67, 71,
	102, 161, 155, 156, 157, 63, 0, 100, 101, 98,
	99, 135, 136, 170, 171, 172, 150, 95, 0, 0,
	153, 138, 59, 0, 64, 73, 68, 62, 72, 165,
	152, 126, 167, 104, 118, 175, 119, 120, 146, 92,
	134, 66, 116, 0, 107, 88, 113, 89, 105, 128,
	61, 131, 103, 154, 137, 173, 74, 141, 0, 70,
	65, 0, 0, 130, 159, 132, 151, 125, 147, 97,
	140, 168, 117, 144, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 164, 115, 145,
	87, 142, 0, 90, 93, 174, 162, 110, 111, 0,
	0, 0, 0, 0, 0, 0, 129, 133, 148, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	139, 0, 0, 0, 94, 91, 127, 0, 0, 0,
	96, 0, 109, 149, 0, 160, 124, 176, 163, 122,
	121, 166, 169, 158, 106, 114, 60, 112, 69, 67,
	71, 102, 161, 155, 156, 157, 63, 0, 100, 101,
	98, 99, 135, 136, 170, 171, 172, 150, 95, 0,
	0, 153, 138, 59, 0, 64, 73, 68, 62, 72,
	165, 152, 126, 167, 104, 118, 175, 119, 120, 146,
	92, 134, 66, 116, 0, 107, 88, 113, 89, 105,
	128, 61, 131, 103, 154, 137, 173, 74, 141, 0,
	70, 65, 0, 0, 130, 159, 132, 151, 125, 147,
	97, 140, 168, 117, 144, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 164, 115,
	145, 87, 142, 0, 90, 93, 174, 162, 110, 111,
	0, 0, 0, 0, 0, 0, 0, 129, 133, 148,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 139, 0, 0, 0, 94, 91, 127, 0, 0,
	0, 96, 0, 109, 149, 0, 160, 124, 176, 163,
	122, 121, 166, 169, 158, 106, 114, 60, 112, 69,
	67, 71, 102, 161, 155, 156, 157, 63, 0, 100,
	101, 98, 99, 135, 136, 170, 171, 172, 150, 95,
	0, 0, 153, 138, 59, 0, 64, 73, 68, 62,
	72, 165, 152, 126, 167, 104, 118, 175, 119, 120,
	146, 92, 134, 66, 116, 0, 107, 88, 113, 89,
	105, 128, 61, 131, 103, 154, 137, 173, 74, 141,
	0, 70, 65, 0, 0, 130, 159, 132, 151, 125,
	147, 97, 140, 168, 117, 144, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 164,
	115, 145, 87, 142, 0, 90, 93, 174, 162, 110,
	111, 0, 0, 0, 0, 0, 0, 0, 129, 133,
	148, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 139, 0, 0, 0, 94, 91, 127, 0,
	0, 0, 96, 0, 109, 149, 0, 160, 124, 176,
	163, 122, 121, 166, 169, 158, 106, 114, 60, 112,
	69, 67, 71, 102, 161, 155, 156, 157, 63, 0,
	100, 101, 98, 99, 135, 136, 170, 171, 172, 150,
	95, 0, 0, 153, 138, 59, 0, 64, 73, 68,
	62, 72, 66, 0, 0, 0, 0, 241, 0, 0,
	0, 61, 0, 0, 0, 0, 276, 74, 0, 0,
	70, 65, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 215, 259,
	258, 260, 261, 262, 263, 0, 0, 264, 256, 257,
	0, 0, 238, 250, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 531, 0, 0,
	0, 287, 0, 249, 0, 0, 246, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 285, 0, 0, 0, 0, 0, 60, 0, 69,
	67, 71, 0, 0, 0, 0, 0, 63, 0, 277,
	286, 283, 284, 281, 282, 280, 279, 278, 288, 271,
	272, 274, 0, 273, 59, 0, 64, 73, 68, 62,
	72, 66, 0, 0, 0, 0, 241, 0, 0, 0,
	61, 0, 0, 0, 0, 276, 74, 0, 0, 70,
	65, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 232, 215, 259, 258,
	260, 261, 262, 263, 0, 0, 264, 256, 257, 0,
	0, 238, 250, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	287, 0, 249, 0, 0, 246, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	285, 0, 0, 0, 0, 0, 60, 0, 69, 67,
	71, 0, 0, 0, 0, 0, 63, 0, 277, 286,
	283, 284, 281, 282, 280, 279, 278, 288, 271, 272,
	274, 18, 273, 59, 0, 64, 73, 68, 62, 72,
	0, 0, 66, 0, 0, 0, 0, 241, 0, 0,
	0, 61, 0, 0, 0, 0, 276, 74, 0, 0,
	70, 65, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 215, 259,
	258, 260, 261, 262, 263, 0, 0, 264, 256, 257,
	0, 0, 238, 250, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 0, 0, 0,
	0, 287, 0, 249, 0, 0, 246, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 285, 0, 0, 0, 0, 0, 60, 0, 69,
	67, 71, 0, 0, 0, 0, 0, 63, 0, 277,
	286, 283, 284, 281, 282, 280, 279, 278, 288, 271,
	272, 274, 0, 273, 59, 0, 64, 73, 68, 62,
	72, 66, 0, 0, 0, 0, 241, 0, 0, 0,
	61, 0, 0, 0, 0, 276, 74, 0, 0, 70,
	65, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 215, 259, 258,
	260, 261, 262, 263, 0, 0, 264, 256, 257, 0,
	0, 238, 250, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	287, 0, 249, 0, 0, 246, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	285, 0, 0, 0, 0, 0, 60, 0, 69, 67,
	71, 0, 0, 0, 0, 0, 63, 0, 277, 286,
	283, 284, 281, 282, 280, 279, 278, 288, 271, 272,
	274, 66, 273, 59, 0, 64, 73, 68, 62, 72,
	61, 0, 0, 0, 0, 276, 74, 0, 0, 70,
	65, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 215, 259, 258,
	260, 261, 262, 263, 0, 0, 264, 256, 257, 0,
	0, 0, 250, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	287, 0, 249, 0, 0, 246, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	285, 0, 0, 0, 0, 0, 60, 0, 69, 67,
	71, 0, 0, 0, 0, 0, 63, 0, 277, 286,
	283, 284, 281, 282, 280, 279, 278, 288, 271, 272,
	274, 66, 273, 59, 0, 64, 73, 68, 62, 72,
	61, 0, 0, 0, 0, 276, 74, 0, 0, 70,
	65, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 215, 259, 258,
	260, 261, 262, 263, 0, 0, 264, 0, 0, 0,
	0, 0, 250, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	287, 0, 249, 0, 0, 246, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	285, 0, 0, 0, 0, 0, 60, 0, 69, 67,
	71, 0, 0, 0, 0, 0, 63, 0, 277, 286,
	283, 284, 281, 282, 280, 279, 278, 288, 271, 272,
	274, 66, 273, 59, 18, 64, 73, 68, 62, 72,
	61, 0, 0, 0, 0, 66, 74, 0, 0, 70,
	65, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	74, 0, 0, 70, 65, 0, 0, 57, 18, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 66,
	0, 57, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 74, 0, 0, 70, 65, 0,
	360, 359, 369, 370, 362, 363, 364, 365, 366, 367,
	368, 361, 38, 0, 371, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 69, 67,
	71, 176, 0, 0, 0, 0, 63, 0, 0, 0,
	60, 0, 69, 67, 71, 66, 0, 0, 0, 321,
	63, 0, 0, 59, 61, 64, 73, 68, 62, 72,
	74, 0, 0, 70, 65, 176, 0, 59, 0, 64,
	73, 68, 62, 72, 60, 0, 69, 67, 71, 66,
	0, 178, 0, 323, 63, 0, 0, 0, 61, 0,
	0, 0, 0, 66, 74, 0, 0, 70, 65, 0,
	0, 59, 61, 64, 73, 68, 62, 72, 74, 0,
	0, 70, 65, 0, 0, 57, 0, 0, 425, 0,
	0, 426, 0, 0, 0, 0, 38, 66, 0, 178,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 176, 74, 0, 0, 70, 65, 0, 0, 0,
	60, 0, 69, 67, 71, 0, 0, 0, 0, 0,
	63, 0, 0, 57, 0, 610, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 59, 0, 64,
	73, 68, 62, 72, 60, 0, 69, 67, 71, 176,
	0, 0, 0, 0, 63, 0, 0, 0, 60, 0,
	69, 67, 71, 66, 0, 0, 0, 0, 63, 0,
	0, 59, 61, 64, 73, 68, 62, 72, 74, 0,
	0, 70, 65, 176, 0, 59, 0, 64, 73, 68,
	62, 72, 60, 0, 69, 67, 71, 66, 0, 178,
	0, 323, 63, 0, 0, 300, 61, 0, 0, 0,
	0, 66, 74, 0, 0, 70, 65, 0, 0, 59,
	61, 64, 73, 68, 62, 72, 74, 0, 0, 70,
	65, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 57, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 176,
	74, 0, 0, 70, 65, 0, 0, 0, 60, 0,
	69, 67, 71, 0, 0, 0, 0, 0, 63, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 59, 0, 64, 73, 68,
	62, 72, 60, 0, 69, 67, 71, 176, 0, 0,
	0, 0, 63, 0, 0, 0, 60, 0, 69, 67,
	71, 66, 0, 0, 0, 0, 63, 0, 0, 59,
	61, 64, 73, 68, 62, 72, 74, 0, 0, 70,
	65, 176, 0, 59, 0, 64, 73, 68, 62, 72,
	60, 0, 69, 67, 71, 0, 0, 178, 0, 0,
	63, 18, 36, 20, 21, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 64,
	73, 68, 62, 72, 22, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 69, 67,
	71, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 64, 73, 68, 62, 72,
	0, 23, 24, 26, 25, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 28, 30, 31, 0, 0, 32,
	33, 34, 0, 355, 0, 358, 0, 0, 0, 0,
	0, 372, 373, 374, 375, 376, 377, 378, 37, 356,
	357, 354, 360, 359, 369, 370, 362, 363, 364, 365,
	366, 367, 368, 361, 0, 0, 371,
}
var yyPact = [...]int{

	3675, -1000, -117, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 451, 488, -1000, -1000,
	-1000, -1000, -1000, 951, -45, -6, -22, -7, 2236, 3624,
	-1000, -1000, -1000, -1000, -1000, 277, -1000, -1000, -1000, -1000,
	-1000, 442, 452, 322, 437, 369, -1000, -38, 3356, 466,
	3548, -49, -13, 3624, -83, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -9, 3624, -1000, 3624, -50,
	165, -50, 3624, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 164, 414, 2794, 2794, 451,
	-1000, 277, -1000, -1000, -1000, 388, -1000, -1000, 109, 3500,
	274, 797, -1000, -1000, -1000, 422, 3232, 3308, 38, 3624,
	175, -1000, 68, -1000, 37, -1000, -1000, 3624, 107, 159,
	1481, -19, 3624, 1481, -32, 3624, 418, 270, 3624, -1000,
	-1000, -1000, -1000, -1000, 484, 44, 371, -1000, 2794, 3736,
	-1000, 243, -1000, 2, -1000, -1000, 3054, 3054, 3054, 3054,
	3054, 3054, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 243, 35, -1000, 2655, 243,
	243, 243, 243, 243, 243, 2794, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 235,
	-1000, 155, 442, 164, 369, 3342, 256, -1000, -1000, 293,
	3624, -1000, 3548, 3356, 3356, 3356, 3356, -1000, 329, 320,
	-1000, 331, 316, 409, 3624, -1000, 225, 164, 3232, 45,
	-1000, 3466, -1000, -1000, 2085, 460, 3548, 2794, 1934, 1481,
	412, -53, -1000, -1000, -1000, -1000, -1000, 3624, 73, -1000,
	3624, -1000, -1000, 3624, 1481, -1000, 364, 2794, 2794, 185,
	2794, 2794, 60, 2924, 139, 82, 3054, 3054, 3054, 3054,
	3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054,
	3054, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	277, 339, 339, 28, 28, 28, 28, 28, 3184, 1095,
	1934, 223, 80, 2655, 2375, 2375, 2794, 2794, 2375, 434,
	93, 80, 3514, -1000, 164, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2375, 2375, 2375, 2375, 2794, -1000, -1000, -1000,
	414, -1000, 434, 450, -1000, 382, 380, 2375, -1000, 265,
	3548, 243, -1000, 3198, -1000, 302, 797, 255, 966, -1000,
	-1000, -1000, -1000, 318, -1000, 299, -1000, -1000, -1000, -1000,
	-1000, 164, -1000, -14, -16, -17, -1000, -1000, -1000, -1000,
	451, 2794, -1000, 80, -1000, 34, -1000, -1000, -1000, 251,
	3514, 1481, -1000, 76, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 355, 60, 110, -1000, -1000, 142,
	-1000, -1000, 80, 80, -1000, 672, -1000, -1000, -1000, -1000,
	139, 3054, 3054, 3054, 391, 672, 1203, 781, 703, 28,
	195, 195, 36, 36, 36, 36, 36, 168, 168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 164, 2375, 233,
	-1000, -1000, 118, 29, 243, 2794, -1000, 194, 194, 121,
	128, 194, 2375, 125, -1000, 2794, 164, -1000, 194, 164,
	194, 194, -1000, -1000, 3624, -1000, -1000, -1000, -1000, 247,
	-1000, 404, 231, 178, -1000, -1000, 2514, 164, 203, 27,
	451, 2794, 2794, -1000, -1000, -1000, 243, 243, 243, 442,
	80, 1783, 3624, -1000, -1000, -1000, 3624, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 391, 672, 759,
	-1000, 3054, 3054, -1000, 194, 2375, -1000, -1000, 3390, -1000,
	-1000, 1632, 2375, 80, -1000, -1000, 33, 33, 33, -95,
	264, 87, -1000, 2794, 103, -1000, -1000, -1000, -1000, -1000,
	-1000, 460, 3356, 400, -1000, 243, -1000, -1000, 306, 3514,
	3514, 442, 80, 80, 3514, 3514, 3514, -1000, -1000, 1481,
	-1000, -1000, -1000, 3054, 672, 672, -1000, -1000, -1000, -1000,
	20, 164, 164, 26, 164, 164, 243, -91, -1000, 80,
	2794, 458, 182, 482, -1000, 243, -1000, 277, 6, -1000,
	-1000, 184, -1000, 184, 184, -1000, 672, 1330, -1000, -1000,
	-1000, 141, -1000, 397, -1000, -1000, 3054, 164, 152, 80,
	456, 449, 3548, 178, 164, 3514, -1000, 3514, -1000, -1000,
	-1000, 163, 33, 25, -1000, -1000, -1000, 2794, 2794, 175,
	-1000, -1000, -1000, 30, 135, -1000, 164, 7, -104, 80,
	172, -1000, 390, 164, -1000, 353, -99, -109, 33, -1000,
	-1000, 296, -1000, -1000, -101, -106, -110, -1000,
}
var yyPgo = [...]int{

	0, 629, 21, 330, 621, 620, 614, 612, 611, 608,
	607, 606, 604, 603, 602, 600, 599, 595, 41, 591,
	590, 587, 29, 585, 38, 582, 581, 15, 46, 10,
	13, 147, 580, 20, 48, 43, 579, 578, 37, 577,
	747, 574, 571, 566, 9, 27, 565, 33, 563, 562,
	35, 526, 561, 559, 558, 557, 555, 554, 24, 2,
	11, 14, 3, 553, 59, 7, 548, 28, 537, 536,
	535, 533, 5, 532, 32, 530, 16, 26, 523, 23,
	8, 34, 522, 329, 156, 520, 519, 518, 516, 512,
	511, 42, 1, 349, 12, 18, 510, 202, 19, 36,
	504, 502, 40, 17, 4, 6, 501, 500, 497, 637,
	0, 494, 100,
}
var yyR1 = [...]int{

	0, 107, 108, 108, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 21, 21, 7,
	8, 9, 10, 10, 10, 10, 11, 11, 11, 11,
	12, 13, 13, 13, 14, 106, 106, 106, 15, 16,
	17, 17, 17, 17, 17, 111, 18, 19, 19, 20,
	20, 20, 24, 24, 24, 22, 22, 23, 23, 29,
	29, 28, 28, 30, 30, 30, 30, 96, 96, 96,
	95, 95, 32, 32, 33, 33, 34, 34, 35, 35,
	35, 42, 36, 36, 36, 36, 101, 101, 100, 100,
	100, 99, 99, 37, 37, 37, 37, 38, 38, 38,
	38, 39, 39, 41, 41, 40, 40, 43, 43, 43,
	43, 44, 44, 45, 45, 31, 31, 31, 31, 31,
	31, 47, 47, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 57, 57, 57, 57, 57,
	57, 48, 48, 48, 48, 48, 48, 48, 27, 27,
	58, 58, 58, 64, 59, 59, 104, 104, 104, 104,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 55,
	55, 55, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 54, 54, 54, 54, 54, 54, 54, 54, 112,
	112, 56, 56, 56, 56, 25, 25, 25, 25, 25,
	105, 105, 105, 105, 105, 105, 105, 105, 68, 68,
	26, 26, 66, 66, 67, 69, 69, 65, 65, 65,
	50, 50, 50, 50, 50, 50, 50, 52, 52, 52,
	70, 70, 71, 71, 72, 72, 73, 73, 74, 75,
	75, 75, 76, 76, 76, 76, 77, 77, 77, 49,
	49, 49, 49, 49, 49, 78, 78, 78, 78, 79,
	79, 60, 60, 62, 62, 61, 63, 80, 80, 81,
	82, 82, 84, 84, 85, 85, 83, 83, 86, 86,
	86, 86, 86, 86, 86, 87, 87, 87, 88, 88,
	89, 89, 89, 90, 90, 93, 93, 94, 94, 97,
	97, 98, 98, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 109,
	110, 102, 103, 103, 103,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 3, 5, 8, 4, 6, 6, 7, 7, 4,
	5, 4, 5, 5, 3, 1, 1, 1, 3, 2,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 5, 5, 3, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 1, 3, 0, 2, 1, 3, 3, 2, 3,
	1, 1, 1, 1, 3, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 2, 4, 5, 7, 2, 4, 6, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -107, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -3, -4, 6, -21,
	8, 9, 29, 106, 107, 109, 108, 110, 119, 47,
	120, 121, 124, 125, 126, -109, 7, 143, 50, -108,
	156, -72, 14, -20, 5, -18, -111, -18, -18, -18,
	-18, 111, -89, 113, 65, 117, -93, 53, -92, 149,
	122, 26, 154, 132, 151, 36, 17, 125, 153, 124,
	35, 126, 155, 152, 32, -83, 113, 115, 111, 111,
	112, 113, 111, -106, 53, -91, -92, 66, 21, 23,
	69, 101, 15, 70, 100, 144, 106, 45, 136, 137,
	134, 135, 127, 28, 9, 24, 120, 20, 94, 108,
	73, 74, 123, 22, 121, 64, 18, 48, 10, 12,
	13, 116, 115, 85, 112, 43, 7, 102, 25, 82,
	39, 27, 41, 83, 16, 138, 139, 30, 148, 96,
	46, 33, 67, 62, 49, 65, 14, 44, 84, 109,
	143, 42, 6, 147, 29, 129, 130, 131, 119, 40,
	111, 128, 72, 114, 63, 5, 117, 8, 47, 118,
	140, 141, 142, 31, 71, 11, 113, -97, 53, -92,
	-102, -102, -102, -102, -102, -2, -76, 16, 15, -5,
	-3, -109, 6, 19, 20, -24, 37, 38, -19, -83,
	-33, -34, -35, -36, -42, -64, -109, -40, -97, 10,
	-80, -81, -65, -93, -97, 53, -92, -85, 116, 112,
	-40, 143, 111, -40, -40, -84, 116, 53, -84, -40,
	-102, -110, 52, -77, 18, 30, -31, -46, 67, -51,
	-47, 22, -50, -65, -63, -64, 101, 90, 91, 98,
	68, 102, -55, -53, -54, -56, 63, 64, 55, 54,
	56, 57, 58, 59, 62, -93, -97, -61, -109, 41,
	42, 144, 145, 148, 146, 70, 31, 134, 142, 141,
	140, 138, 139, 136, 137, 116, 135, 96, 143, -73,
	-74, -31, -72, -2, -18, 33, -22, 20, 61, -41,
	25, -40, 29, 51, -37, -38, -39, 39, 43, 45,
	40, 41, 42, 46, -101, 21, -33, -2, -109, -100,
	-99, 21, -97, 55, 103, -40, 51, 75, 103, -40,
	67, 53, -103, -109, -94, -93, -91, 113, -40, -103,
	114, -40, 22, 49, -40, 8, 85, 66, 65, 82,
	51, 17, -31, -48, 85, 67, 83, 84, 69, 87,
	86, 97, 90, 91, 92, 93, 94, 95, 96, 88,
	89, 100, 75, 76, 77, 78, 79, 80, 81, -64,
	-109, 104, 105, -51, -51, -51, -51, -51, -51, -109,
	103, -59, -31, -109, -109, -109, -109, -109, -109, -109,
	-68, -31, -109, -112, -109, -112, -112, -112, -112, -112,
	-112, -112, -109, -109, -109, -109, 51, -75, 23, 24,
	-76, -110, -24, -52, -93, 56, 59, -23, 40, -49,
	29, 31, -2, -109, -40, -80, -34, -35, -34, -35,
	39, 39, 39, 44, 39, 44, 39, -38, -97, -110,
	-110, -2, -43, 47, 115, 48, -99, -98, -97, -91,
	-45, 11, -81, -31, -94, -98, -91, -103, 22, -90,
	118, -40, -86, 109, 107, 28, 108, 14, 144, 155,
	53, -40, -40, -103, 35, -31, -31, -57, 62, 67,
	63, 64, -31, -31, -47, -51, -58, -61, -64, 60,
	85, 83, 84, 69, -51, -51, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, -51, -51, -51, -104,
	53, 55, 101, 122, -50, -50, -93, -29, 20, -28,
	-30, 92, -31, -97, -94, 51, -110, -28, -28, -31,
	-31, -28, -22, -66, -67, 71, -93, -110, -28, -29,
	-28, -28, -74, -77, -82, 18, 10, 31, 31, -28,
	-79, 49, -80, -60, -62, -61, -109, -2, -78, -93,
	-45, 49, 49, 39, 39, -110, 112, 112, 112, -72,
	-31, 103, 49, -93, -103, -102, -87, -88, 114, 21,
	112, 27, 36, 62, 63, 64, -58, -51, -51, -51,
	-27, 123, 66, -110, -28, 51, -96, -95, 21, -93,
	55, 103, -109, -31, -110, -110, 51, 118, 21, -110,
	-28, -69, -67, 73, -31, -110, -110, -110, -110, -110,
	-40, -32, 10, 26, -79, 51, -110, -110, -110, 51,
	103, -72, -31, -31, -109, -109, -109, -76, -94, -40,
	-40, -102, -27, 66, -51, -51, -110, -30, -95, 92,
	-98, -29, -105, -104, -104, -105, 149, -72, 74, -31,
	72, -45, -33, 27, -62, 31, -2, -109, -93, -93,
	-76, -44, -93, -44, -44, -103, -51, 103, -110, -110,
	132, -109, -104, 133, -110, -110, -109, -26, 147, -31,
	-70, 12, 8, -60, -2, 103, -110, 51, -110, -110,
	92, 56, 29, -51, -110, 55, -71, 13, 15, -80,
	-110, -93, -93, -110, 51, -104, -25, 85, 152, -31,
	-59, -104, 133, 56, -110, 150, 46, 153, 29, -110,
	36, 151, 154, -104, 36, 152, 153, 154,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 264, 0, 55, 55,
	55, 55, 55, 320, 306, 0, 0, 0, 0, 0,
	441, 441, 441, 441, 441, 0, 27, 28, 439, 1,
	3, 272, 0, 0, 59, 62, 57, 306, 0, 0,
	0, 304, 0, 436, 0, 321, 322, 325, 326, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 435, 437, 438, 0, 0, 307, 0, 302,
	0, 302, 0, 441, 45, 46, 47, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 436, 49, 329, 330,
	50, 51, 52, 53, 54, 21, 276, 0, 0, 264,
	23, 0, 55, 60, 61, 65, 63, 64, 56, 0,
	0, 84, 86, 87, 88, 96, 0, 98, 115, 0,
	31, 297, 0, 247, 0, -2, -2, 0, 0, 0,
	442, 0, 0, 442, 0, 0, 0, 0, 0, 44,
	48, 22, 440, 17, 0, 0, 273, 125, 0, 130,
	133, 0, 170, 171, 172, 173, 0, 0, 0, 0,
	0, 0, 195, 196, 197, 198, 131, 132, 250, 251,
	252, 253, 254, 255, 256, 247, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 238, 0, 219, 219, 219,
	219, 219, 219, 219, 219, 0, 0, 0, 0, 265,
	266, 269, 272, 21, 62, 0, 67, 66, 58, 0,
	0, 114, 0, 0, 0, 0, 0, 103, 0, 0,
	106, 0, 0, 0, 0, 97, 0, 21, 0, 117,
	99, 0, 101, 102, 0, 123, 0, 0, 0, 442,
	0, 323, 34, 443, 444, 327, 328, 0, 0, 39,
	0, 41, 303, 0, 442, 277, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 153, 154, 155, 156, 157, 144,
	0, 0, 0, 189, 190, 191, 192, 193, 0, 69,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 65,
	0, 239, 0, 211, 0, 212, 213, 214, 215, 216,
	217, 218, 0, 69, 0, 0, 0, 268, 270, 271,
	276, 24, 65, 0, 257, 0, 0, 0, 68, 289,
	0, 0, -2, 0, 113, 123, 85, 92, 0, 95,
	104, 105, 107, 0, 109, 0, 111, 112, 89, 90,
	163, 21, 91, 0, 0, 0, 100, 116, 331, 332,
	264, 0, 298, 299, 248, 0, -2, 32, 305, 0,
	0, 442, 441, 315, 308, 309, 310, 311, 312, 313,
	314, 40, 42, 43, 0, 126, 127, 129, 145, 0,
	147, 149, 274, 275, 134, 135, 136, 160, 161, 162,
	0, 0, 0, 0, 158, 140, 0, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 188,
	166, 167, 168, 169, 186, 187, 194, 0, 0, 70,
	71, 73, 77, 0, 248, 0, 295, 0, 0, 0,
	0, 0, 0, 245, 242, 0, 0, 220, 0, 0,
	0, 0, 267, 18, 0, 300, 301, 258, 259, 82,
	25, 0, 289, 279, 291, 293, 0, 21, 0, 285,
	264, 0, 0, 108, 110, -2, 0, 0, 0, 272,
	124, 0, 0, 324, 35, 36, 0, 441, 316, 317,
	318, 319, 278, 146, 148, 150, 137, 158, 141, 0,
	138, 0, 0, 199, 0, 0, 74, 78, 0, 80,
	81, 0, 69, 165, 202, 203, 0, 0, 0, 0,
	264, 0, 243, 0, 0, 210, 221, 222, 223, 224,
	19, 123, 0, 0, 26, 0, 294, -2, 0, 0,
	0, 272, 93, 94, 0, 0, 0, 30, 249, 442,
	37, 38, 139, 0, 159, 142, 200, 72, 79, 75,
	0, 0, 0, 230, 0, 0, 0, 240, 209, 246,
	0, 260, 83, 0, 292, 0, -2, 0, 287, 286,
	29, 0, 121, 0, 0, 33, 143, 0, 201, 204,
	231, 0, 235, 0, 206, 205, 0, 0, 0, 244,
	262, 0, 0, 282, 21, 0, 118, 0, 119, 120,
	76, 0, 0, 225, 208, 241, 20, 0, 0, 290,
	-2, 288, 122, 232, 0, 236, 0, 0, 0, 263,
	261, 233, 0, 0, 207, 0, 0, 0, 0, 237,
	226, 0, 229, 234, 227, 0, 0, 228,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 156,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:214
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:219
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:220
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:224
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:242
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:250
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:254
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:261
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:267
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:271
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:277
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:281
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:288
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:299
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:311
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:315
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:321
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:327
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:333
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:339
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:343
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:348
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:352
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:358
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:362
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:367
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:372
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:378
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:384
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:392
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:397
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:407
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:413
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:417
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:426
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:432
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:438
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:444
		{
			yyVAL.statement = &Other{}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:448
		{
			yyVAL.statement = &Other{}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:452
		{
			yyVAL.statement = &Other{}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:456
		{
			yyVAL.statement = &Other{}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:460
		{
			yyVAL.statement = &Other{}
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:465
		{
			setAllowComments(yylex, true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:469
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:475
		{
			yyVAL.bytes2 = nil
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:479
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:485
		{
			yyVAL.str = UnionStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:489
		{
			yyVAL.str = UnionAllStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:493
		{
			yyVAL.str = UnionDistinctStr
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:498
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:502
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:506
		{
			yyVAL.str = SQLCacheStr
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:511
		{
			yyVAL.str = ""
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:515
		{
			yyVAL.str = DistinctStr
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:520
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:524
		{
			yyVAL.str = StraightJoinHint
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:529
		{
			yyVAL.selectExprs = nil
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:533
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:539
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:543
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:549
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:553
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:557
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:561
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:566
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:570
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:574
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:581
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:586
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:590
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:596
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:600
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:610
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:614
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:618
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:624
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:637
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:641
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:645
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:649
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:654
		{
			yyVAL.empty = struct{}{}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:656
		{
			yyVAL.empty = struct{}{}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:659
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:663
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:667
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:674
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:680
		{
			yyVAL.str = JoinStr
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:684
		{
			yyVAL.str = JoinStr
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:688
		{
			yyVAL.str = JoinStr
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:692
		{
			yyVAL.str = StraightJoinStr
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:698
		{
			yyVAL.str = LeftJoinStr
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:702
		{
			yyVAL.str = LeftJoinStr
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:706
		{
			yyVAL.str = RightJoinStr
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:710
		{
			yyVAL.str = RightJoinStr
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:716
		{
			yyVAL.str = NaturalJoinStr
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:720
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:730
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:734
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:740
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:744
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:749
		{
			yyVAL.indexHints = nil
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:753
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:757
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:761
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:767
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:771
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:776
		{
			yyVAL.expr = nil
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:780
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:786
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:790
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:794
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:798
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:802
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:806
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:812
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:816
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:822
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:826
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].boolVal}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:830
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:834
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:838
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:842
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:846
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:850
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:854
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:858
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:862
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:866
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:872
		{
			yyVAL.str = IsNullStr
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:876
		{
			yyVAL.str = IsNotNullStr
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:880
		{
			yyVAL.str = IsTrueStr
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:884
		{
			yyVAL.str = IsNotTrueStr
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:888
		{
			yyVAL.str = IsFalseStr
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:892
		{
			yyVAL.str = IsNotFalseStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:898
		{
			yyVAL.str = EqualStr
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:902
		{
			yyVAL.str = LessThanStr
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:906
		{
			yyVAL.str = GreaterThanStr
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:910
		{
			yyVAL.str = LessEqualStr
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:914
		{
			yyVAL.str = GreaterEqualStr
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:918
		{
			yyVAL.str = NotEqualStr
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:922
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:927
		{
			yyVAL.expr = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:931
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:937
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:941
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:945
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:951
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:957
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:961
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:967
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:971
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:979
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:985
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:989
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:993
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:997
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1001
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1005
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1009
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1013
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1017
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1021
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1025
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1029
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1033
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1037
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1041
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1045
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1049
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1053
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1057
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1061
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1065
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1073
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1087
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1091
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1095
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1113
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1117
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1121
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1131
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1135
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1139
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1143
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1147
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 207:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1151
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1155
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1159
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1163
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1173
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1177
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1181
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1185
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1190
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1195
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1200
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1219
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1223
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1227
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1231
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1237
		{
			yyVAL.str = ""
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1241
		{
			yyVAL.str = BooleanModeStr
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1245
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1249
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1253
		{
			yyVAL.str = QueryExpansionStr
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1260
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1264
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1268
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1272
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1276
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1280
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1284
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1288
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1293
		{
			yyVAL.expr = nil
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1297
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1302
		{
			yyVAL.str = string("")
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1306
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1312
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1316
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1322
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1327
		{
			yyVAL.expr = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1331
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1337
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1341
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1345
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1351
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1355
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1359
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1363
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1367
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1371
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1375
		{
			yyVAL.expr = &NullVal{}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1381
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1390
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1394
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1399
		{
			yyVAL.exprs = nil
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1403
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1408
		{
			yyVAL.expr = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1412
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1417
		{
			yyVAL.orderBy = nil
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1421
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1427
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1431
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1437
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1442
		{
			yyVAL.str = AscScr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1446
		{
			yyVAL.str = AscScr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1450
		{
			yyVAL.str = DescScr
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1455
		{
			yyVAL.limit = nil
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1459
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1463
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1467
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1472
		{
			yyVAL.str = ""
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1476
		{
			yyVAL.str = ForUpdateStr
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1480
		{
			yyVAL.str = ShareModeStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1493
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1497
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1501
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1506
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1510
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1514
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1521
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1525
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1529
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1533
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1538
		{
			yyVAL.updateExprs = nil
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1542
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1548
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1552
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1558
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1562
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1568
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1574
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1584
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1588
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1594
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1603
		{
			yyVAL.byt = 0
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1605
		{
			yyVAL.byt = 1
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1608
		{
			yyVAL.empty = struct{}{}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1610
		{
			yyVAL.empty = struct{}{}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1613
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1615
		{
			yyVAL.str = IgnoreStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1619
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1621
		{
			yyVAL.empty = struct{}{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1623
		{
			yyVAL.empty = struct{}{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1625
		{
			yyVAL.empty = struct{}{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1627
		{
			yyVAL.empty = struct{}{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1629
		{
			yyVAL.empty = struct{}{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1631
		{
			yyVAL.empty = struct{}{}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1634
		{
			yyVAL.empty = struct{}{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1636
		{
			yyVAL.empty = struct{}{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1638
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1642
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1644
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1647
		{
			yyVAL.empty = struct{}{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1649
		{
			yyVAL.empty = struct{}{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1651
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1654
		{
			yyVAL.empty = struct{}{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1656
		{
			yyVAL.empty = struct{}{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1660
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1664
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1671
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1677
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1681
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1688
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1819
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1828
		{
			decNesting(yylex)
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1833
		{
			forceEOF(yylex)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1838
		{
			forceEOF(yylex)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1842
		{
			forceEOF(yylex)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1846
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
